///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;-$#,##0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='MM/DD/YYYY';
SET TimestampFormat='MM/DD/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';


// LIB CONNECT TO 'LuUS DW2.0';

// LIB CONNECT TO 'LuUS_DATA:MSSQL_LuUS_DW_2.0';


LIB CONNECT TO 'LuUS_DATA:vAZ_MSSQL_LuUS_DW_2.0';

vToday = Today();


// vStorePathFact = 'lib://LuUS QVD/Production/QlikSense BI Evolution/QVDs/Extract/Facts/Vyepti/HQ';
// vStorePathDim = 'lib://LuUS QVD/Production/QlikSense BI Evolution/QVDs/Extract/Dimensions/Vyepti/HQ';

vStorePathFact = 'lib://LuUS_DATA:DataFiles/Production/QlikSense BI Evolution/QVDs/Extract/Facts/Vyepti/HQ';
vStorePathDim = 'lib://LuUS_DATA:DataFiles/Production/QlikSense BI Evolution/QVDs/Extract/Dimensions/Vyepti/HQ';

Let vWeekDay=weekday(Now());

$(Must_Include='lib://LuUS_DATA:LuUS_SharePoint/Shared Documents/Qlik Sense Data Files/Include/Qlik Cloud/FolderConnections.txt');

// $(Must_Include='lib://LuUS QVD/Production/QlikSense BI Evolution/Offline Files/Include/FolderConnections.txt');

	LOAD
    CALL_TYPE
FROM [lib://LuUS_DATA:LuUS_SharePoint/Shared Documents/Qlik Sense Data Files/ExcelFiles/ReactiveCalls.xlsx]
(ooxml, embedded labels, table is Sheet1);


	let vReactiveCalls = peek('CALL_TYPE');
	
	trace '$(vReactiveCalls)';





LET vSpace=if(upper(GetSysAttr('spaceType'))='SHARED' or GetSysAttr('spaceType')='','_DEV');

Trace '$(vSpace)';





///$tab Date Variable
// If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

Retail_Temp:
select 
	Max(DATE_KEY) as SALES_MAX_DATE_KEY 
from LUINC.FACT_RETAIL_SALES_ANTI_MIGRAINE rs 
INNER JOIN luinc.DIM_MB_VYEPTI_SA pg ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY
INNER JOIN luinc.DIM_CUSTOMER cust On cust.CUSTOMER_KEY = rs.CUSTOMER_KEY
WHERE 	pg.MARKET_BASKET_GROUP <> 'VYEPTI'
  		AND   ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
		AND   cust.CUSTOMER_TYPE = 'HCP';

NoConcatenate

RETAIL_SALES_MAX_DATE:
Load 
	Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-12),'YYYYMMDD') as RETAIL_MAX_DATE_KEY,
    Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-24),'YYYYMMDD') as ZERO_FACT_RETAIL_MAX_DATE_KEY
Resident Retail_Temp;

Drop table Retail_Temp;

let vRetailDateStart=peek('RETAIL_MAX_DATE_KEY');
let vZeroFactRetailDateStart=peek('ZERO_FACT_RETAIL_MAX_DATE_KEY');

Drop table RETAIL_SALES_MAX_DATE;

Trace '$(vRetailDateStart)';
Trace '$(vZeroFactRetailDateStart)';


//Patient Sales

Patient_Temp:
select 
	Max(SHIPPED_DATE_KEY) as SALES_MAX_DATE_KEY 
from LUINC.FACT_PATIENT_SALES p
	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY

where dp.PRODUCT_NAME='VYEPTI'	
 AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
 AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
 And 	RX_TYPE='STANDARD';  

NoConcatenate

PATIENT_SALES_MAX_DATE:
Load 
	Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-12),'YYYYMMDD') as PATIENT_MAX_DATE_KEY,
    Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-24),'YYYYMMDD') as ZERO_FACT_PATIENT_MAX_DATE_KEY
Resident Patient_Temp;

Drop table Patient_Temp;

let vPatientDateStart=peek('PATIENT_MAX_DATE_KEY');
let vZeroFactPatientDateStart=peek('ZERO_FACT_PATIENT_MAX_DATE_KEY');
Drop table PATIENT_SALES_MAX_DATE;

Trace '$(vPatientDateStart)';
Trace '$(vZeroFactPatientDateStart)';

//Account Sales
Account_Temp:
select 
	Max(DATE_KEY) as SALES_MAX_DATE_KEY 
FROM luinc.FACT_ACCOUNT_SALES vs

INNER JOIN luinc.DIM_CUSTOMER acct
  			ON acct.CUSTOMER_KEY = vs.ACCOUNT_KEY

INNER JOIN luinc.DIM_CUSTOMER cust
  			ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY

INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
  			ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY
WHERE  ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
	 AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
     ;

NoConcatenate

ACCOUNT_SALES_MAX_DATE:
Load 
	Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-13),'YYYYMMDD') as ACCOUNT_MAX_DATE_KEY,
    Date(AddMonths(MonthStart(Date#(SALES_MAX_DATE_KEY,'YYYYMMDD')),-24),'YYYYMMDD') as ZERO_FACT_ACCOUNT_MAX_DATE_KEY
Resident Account_Temp;

Drop table Account_Temp;

let vAccountDateStart=peek('ACCOUNT_MAX_DATE_KEY');
let vZeroFactAccountDateStart=peek('ZERO_FACT_ACCOUNT_MAX_DATE_KEY');
Drop table ACCOUNT_SALES_MAX_DATE;

Trace '$(vAccountDateStart)';
Trace '$(vZeroFactAccountDateStart)';

// end if
///$tab Market Access - // DONE
// NoConcatenate
// [Rx Date]:
// SQL Select Max(DATE_KEY) AS RX_DATE_MAX
// FROM LUINC.FACT_RX_CLAIMS_ANTI_MIGRAINE;

// Let vMaxRxDate=Date(Date#(Peek('RX_DATE_MAX'),'YYYYMMDD'),'DD-MMM-YYYY');

// Store [Rx Date] into [$(vQSBIE_TransformQVD_Fact)/FACT_RX_DATE_AD_HOC_STRETCH$(vSpace).qvd](Qvd);

// Drop Table [Rx Date];

// Trace '$(vMaxRxDate)';


// NoConcatenate
// [Med Date]:
// SQL Select Max(DATE_KEY) AS MED_DATE_MAX
// FROM LUINC.FACT_MX_CLAIMS_ANTI_MIGRAINE;

// Let vMaxMedDate=Date(Date#(Peek('MED_DATE_MAX'),'YYYYMMDD'),'DD-MMM-YYYY');

// Store [Med Date] into [$(vQSBIE_TransformQVD_Fact)/FACT_MED_DATE_AD_HOC_STRETCH$(vSpace).qvd](Qvd);

// Drop Table [Med Date];

// Trace '$(vMaxMedDate)';

// LIB CONNECT TO 'LuUS MDM';

// MDMTable:
// SQL Select 
//   PRODUCT_GROUP_CODE,
//   RETAIL_FACTOR,
//   RETAIL_INDICATION_FACTOR,
//   NON_RETAIL_FACTOR
// FROM incw2304h.MDS.MDM.VW_LKP_PRODUCT_FACTORS_ANTI_MIGRAINE;
// STORE MDMTable INTO [$(vQSBIE_TransformQVD_Fact)/FACT_VYEPTI_AD_HOC_MDM$(vSpace).qvd] (qvd); Drop Table MDMTable;

// LIB CONNECT TO 'LuUS DW2.0';

// [Temp Fact Rx]:
// SQL SELECT 
// concat(left(frx.DATE_KEY,6),'01') as DATE_KEY,
// CUSTOMER_KEY,
// pg.PRODUCT_GROUP_KEY,
// dpg.PRODUCT_GROUP_CODE,
// frx.PRIMARY_PLAN_KEY as PLAN_KEY,
// SF1_TERRITORY_KEY, 
// SF2_TERRITORY_KEY, 
// SF3_TERRITORY_KEY,
// frx.MM_REGIONAL_TERRITORY_KEY, 
// frx.MM_NATIONAL_TERRITORY_KEY, 
// ffn.MIGRAINE_FAVORABLE_COVERAGE,
// sum(TOTAL_CLAIMS) as TOTAL_CLAIMS,
// 'Rx' as CLAIM_TYPE
// FROM LUINC.FACT_RX_CLAIMS_ANTI_MIGRAINE frx
// inner join LUINC.DIM_MB_VYEPTI_SA pg on pg.PRODUCT_GROUP_KEY=frx.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_PRODUCT_GROUP dpg on dpg.PRODUCT_GROUP_KEY=frx.PRODUCT_GROUP_KEY
// left join LUINC.FACT_FORMULARY_NATIONAL_STATUS ffn on left(ffn.DATE_KEY,6)=left(frx.DATE_KEY,6) 
// and ffn.PLAN_KEY=frx.PRIMARY_PLAN_KEY 
// and ffn.PRODUCT_GROUP_KEY IN (SELECT PRODUCT_GROUP_KEY FROM luinc.DIM_PRODUCT_GROUP WHERE BRAND = 'VYEPTI')
// where frx.DATE_KEY >= '20200401' AND upper (COVERAGE_TYPE) = 'PHARMACY'
// Group by
// concat(left(frx.DATE_KEY,6),'01'),
// CUSTOMER_KEY,
// dpg.PRODUCT_GROUP_CODE,
// pg.PRODUCT_GROUP_KEY,SF1_TERRITORY_KEY, SF2_TERRITORY_KEY, SF3_TERRITORY_KEY,
// PRIMARY_PLAN_KEY,ffn.MIGRAINE_FAVORABLE_COVERAGE,
// frx.MM_REGIONAL_TERRITORY_KEY, frx.MM_NATIONAL_TERRITORY_KEY;

// STORE [Temp Fact Rx] INTO [$(vQSBIE_TransformQVD_Fact)/FACT_VYEPTI_AD_HOC_RX$(vSpace).qvd] (qvd); Drop Table [Temp Fact Rx];

// [Temp Fact Mx]:
// SQL SELECT 
// concat(left(frx.DATE_KEY,6),'01') as DATE_KEY,
// isnull(REFERRING_CUSTOMER_KEY,RENDERING_CUSTOMER_KEY) as CUSTOMER_KEY, 
// pg.PRODUCT_GROUP_KEY,
// dpg.PRODUCT_GROUP_CODE,
// SUBMITTED_PLAN_KEY as PLAN_KEY,
// SF1_TERRITORY_KEY, 
// SF2_TERRITORY_KEY, 
// SF3_TERRITORY_KEY, 
// PLACE_OF_SERVICE_KEY,
// ffnm.MIGRAINE_FAVORABLE_COVERAGE,
// count(DISTINCT MX_CLAIM_ID) as TOTAL_RECORDS,
// 'Medical' as CLAIM_TYPE
// FROM LUINC.FACT_MX_CLAIMS_ANTI_MIGRAINE frx
// inner join LUINC.DIM_MB_VYEPTI_SA pg on pg.PRODUCT_GROUP_KEY=frx.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_PRODUCT_GROUP dpg on dpg.PRODUCT_GROUP_KEY=frx.PRODUCT_GROUP_KEY
// left join LUINC.FACT_FORMULARY_NATIONAL_STATUS ffnm on left(ffnm.DATE_KEY,6)=left(frx.DATE_KEY,6) 
// and ffnm.PRODUCT_GROUP_KEY IN (SELECT PRODUCT_GROUP_KEY FROM luinc.DIM_PRODUCT_GROUP WHERE BRAND = 'VYEPTI') 
// and ffnm.PLAN_KEY=frx.SUBMITTED_PLAN_KEY 
// where frx.DATE_KEY >= '20200401' and VYEPTI_DIAGNOSIS_INCLUSION_IND = 'Y' and upper (COVERAGE_TYPE) = 'MEDICAL'
// Group by
// concat(left(frx.DATE_KEY,6),'01'),
// isnull(REFERRING_CUSTOMER_KEY,RENDERING_CUSTOMER_KEY),
// pg.PRODUCT_GROUP_KEY,
// SUBMITTED_PLAN_KEY,
// dpg.PRODUCT_GROUP_CODE,
// PLACE_OF_SERVICE_KEY,ffnm.MIGRAINE_FAVORABLE_COVERAGE,
// SF1_TERRITORY_KEY, 
// SF2_TERRITORY_KEY, 
// SF3_TERRITORY_KEY;

// STORE [Temp Fact Mx] INTO [$(vQSBIE_TransformQVD_Fact)/FACT_VYEPTI_AD_HOC_MX$(vSpace).qvd] (qvd);

// Drop Table [Temp Fact Mx];

// NoConcatenate
// [Place of Service temp]:
// Load
// PLACE_OF_SERVICE_KEY AS [Place of Service Key],
// PLACE_OF_SERVICE_CODE as [Place of Service Code],
// PLACE_OF_SERVICE_NAME AS [Site of Care];
// SQL SELECT Distinct 
// PLACE_OF_SERVICE_KEY,
// PLACE_OF_SERVICE_CODE,
// CASE 
// WHEN PLACE_OF_SERVICE_CODE IN ('11','19','22','24') THEN PLACE_OF_SERVICE_NAME
// WHEN PLACE_OF_SERVICE_CODE IN ('UNKNOWN','NULL') THEN 'UNKNOWN'
// ELSE 'OTHER' END AS PLACE_OF_SERVICE_NAME
// FROM LUINC.DIM_PLACE_OF_SERVICE;

// STORE [Place of Service temp] INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_PLACE_OF_SERVICE$(vSpace).qvd] (qvd);

// Drop Table [Place of Service temp];

// CURRENT_FORMULARY:
// Load AutoNumberHash256(PAYER_ID, PAYMENT_TYPE) as [Payer Payment Type Key]
// , FORMULARY_DESCRIPTION as [Payer (Payment Type) Coverage]
// , TIER as [Payer (Payment Type) Tier]
// , LAST_FORMULARY_CHANGE as [Payer (Payment Type) Formulary Last Change]

// ;
// SQL
// SELECT p.PAYER_ID
// ,      p.PAYMENT_TYPE
// ,      fn.COVERAGE_DETAIL as FORMULARY_DESCRIPTION
// ,      fn.TIER
// ,	   p.PLAN_ID
// ,      cal.DATE_FULL as LAST_FORMULARY_CHANGE
// FROM   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn
// INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg
//   On pg.PRODUCT_GROUP_KEY = fn.PRODUCT_GROUP_KEY
// INNER JOIN lu_dw.luinc.DIM_PLAN p
//   ON p.PLAN_KEY = fn.PLAN_KEY
// LEFT OUTER JOIN lu_dw.luinc.DIM_CLNDR cal
//   On cal.DATE_KEY = fn.PRIOR_FORMULARY_DATE_KEY
// WHERE pg.BRAND = 'VYEPTI'
// AND   upper (COVERAGE_TYPE) = 'PHARMACY'
// AND   fn.DATE_KEY = (SELECT  MAX(DATE_KEY) from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df 
// 	                   INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
//                        WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
// AND   fn.FACT_KEY IN (SELECT MAX(fn1.FACT_KEY) as FACT_KEY
//                       FROM   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn1						
//                           INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg1 On pg1.PRODUCT_GROUP_KEY = fn1.PRODUCT_GROUP_KEY
//                           INNER JOIN lu_dw.luinc.DIM_PLAN p1 ON p1.PLAN_KEY = fn1.PLAN_KEY
//                           INNER JOIN (SELECT MAX(fn2.FORMULARY_LIVES) as  formulary_lives,      p2.PAYER_ID ,      p2.PAYMENT_TYPE
//                                      FROM   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn2			
//                                       INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg2 On pg2.PRODUCT_GROUP_KEY = fn2.PRODUCT_GROUP_KEY
//                                       INNER JOIN lu_dw.luinc.DIM_PLAN p2 ON p2.PLAN_KEY = fn2.PLAN_KEY
//                                       WHERE pg2.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY'
//                                      AND   fn2.DATE_KEY = (SELECT  MAX(DATE_KEY) 
//                                      						from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df 
//                                                             INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
//                                                             WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
//                                                          GROUP BY p2.PAYER_ID,p2.PAYMENT_TYPE
//                                   ) max_lives ON max_lives.PAYER_ID = p1.PAYER_ID
//                                  AND max_lives.PAYMENT_TYPE = p1.PAYMENT_TYPE
//                                   AND max_lives.formulary_lives = fn1.FORMULARY_LIVES
//                                   WHERE fn1.DATE_KEY = (SELECT  MAX(DATE_KEY) from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df 
//                                   						INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
//                                                         WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
//                                   AND   pg1.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY'
//                                   GROUP BY p1.PAYER_ID
//                                   ,        p1.PAYMENT_TYPE)
// ;

// STORE CURRENT_FORMULARY INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_CURRENT_FORMULARY$(vSpace).qvd] (qvd);

// Drop Table CURRENT_FORMULARY;

// [TempPayer]:
// Load PLAN_KEY as [Plan Key]
// , FORMULARY_DESCRIPTION as [Plan Coverage]
// , TIER as [Plan Tier]
// , LAST_FORMULARY_CHANGE as [Plan Formulary Last Change]
// ;
// SQL
// SELECT p.PAYER_ID
// ,      p.PAYMENT_TYPE
// ,      fn.COVERAGE_DETAIL as FORMULARY_DESCRIPTION
// ,      fn.TIER
// ,	   p.PLAN_KEY
// ,      cal.DATE_FULL as LAST_FORMULARY_CHANGE
// FROm   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn
// INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg
//   On pg.PRODUCT_GROUP_KEY = fn.PRODUCT_GROUP_KEY
// INNER JOIN lu_dw.luinc.DIM_PLAN p
//   ON p.PLAN_KEY = fn.PLAN_KEY
// LEFT OUTER JOIN lu_dw.luinc.DIM_CLNDR cal
//   On cal.DATE_KEY = fn.PRIOR_FORMULARY_DATE_KEY
// WHERE pg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY'
// AND   fn.DATE_KEY = (SELECT  MAX(DATE_KEY) from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
// 						WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
// 						AND   fn.FACT_KEY IN (SELECT MAX(fn1.FACT_KEY) as FACT_KEY
//                       FROM   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn1
//                                     INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg1
//                         On pg1.PRODUCT_GROUP_KEY = fn1.PRODUCT_GROUP_KEY
//                                     INNER JOIN lu_dw.luinc.DIM_PLAN p1
//                          ON p1.PLAN_KEY = fn1.PLAN_KEY
//                                     INNER JOIN (SELECT MAX(fn2.FORMULARY_LIVES) as  formulary_lives
//                                                 ,      p2.PAYER_ID
//                                                          ,      p2.PAYMENT_TYPE
//                                   FROM   lu_dw.luinc.FACT_FORMULARY_NATIONAL_STATUS fn2
//                                                 INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP pg2
//                                      On pg2.PRODUCT_GROUP_KEY = fn2.PRODUCT_GROUP_KEY
//                                                          INNER JOIN lu_dw.luinc.DIM_PLAN p2
//                                      ON p2.PLAN_KEY = fn2.PLAN_KEY
//                                                 WHERE pg2.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY'
//                                                 AND   fn2.DATE_KEY = (SELECT  MAX(DATE_KEY) from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df 
//                                                 INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
//                                                 WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
//                                                          GROUP BY p2.PAYER_ID
//                                                          ,      p2.PAYMENT_TYPE
//                                   ) max_lives
//                                                          ON max_lives.PAYER_ID = p1.PAYER_ID
//                                                          AND max_lives.PAYMENT_TYPE = p1.PAYMENT_TYPE
//                                                          AND max_lives.formulary_lives = fn1.FORMULARY_LIVES
//                                   WHERE fn1.DATE_KEY = (SELECT  MAX(DATE_KEY) from LU_DW.luinc.FACT_FORMULARY_NATIONAL_STATUS df 
//                                   INNER JOIN lu_dw.luinc.DIM_PRODUCT_GROUP dpg  ON dpg.PRODUCT_GROUP_KEY = df.PRODUCT_GROUP_KEY 
//                                   WHERE dpg.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY')
//                                   AND   pg1.BRAND = 'VYEPTI' and upper (COVERAGE_TYPE) = 'PHARMACY'
//                                   GROUP BY p1.PAYER_ID
//                                   ,        p1.PAYMENT_TYPE)
// ;

// STORE [TempPayer] INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_PAYER_TRANSFORMED$(vSpace).qvd] (qvd); Drop Table TempPayer;

///$tab ----------Daily-----------

///$tab FRS Holiday - // DONE
LET vTodayKey=Date(Today(),'YYYYMMDD');

TempDate:
LOAD Chr(39) & Concat(DATE(DATE#(DATE_KEY,'YYYYMMDD'),'MM/DD/YYYY'),Chr(39)&','&Chr(39))&Chr(39) as FieldHoliday;
SQL Select Distinct DATE_KEY
from LUINC.DIM_CLNDR
where FLAG_FEDERAL_HOLIDAY='Y'  and DATE_KEY<='$(vTodayKey)' and DATE_KEY>='20200401';

Store TempDate into [$(vStorePathDim)/DIM_FRS_HOLIDAY$(vSpace).qvd](qvd);
Drop Table TempDate;

////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// tempWD:
// sql select *
// from LUINC.FACT_FRS_WORKING_DAYS
// where   DATE_KEY<='$(vTodayKey)' and DATE_KEY>=20200401;

// Store tempWD into [$(vStorePathFact)/FACT_FRS_WORKING_DAYS$(vSpace).qvd](qvd);

// Drop Table tempWD;
///$tab Market Basket & National Sales - //DONE
// NoConcatenate
// MB:
// Select *
// FROM LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE;

// Store MB into [$(vStorePathDim)/DIM_MB_ACUTE_ANTI_MIGRAINE$(vSpace).qvd](qvd);

// drop Table MB;

// FINAL_FACT:
// SELECT 
// 	   nsa.FACT_KEY,
// 	   nsa.PRODUCT_GROUP_KEY,
// 	   nsa.DATE_KEY,
//        nsa.NRX								as 'NRx',
//        nsa.TRX								as 'TRx',
//        nsa.NBRX								as 'NBRx',
//        nsa.T_QTY							as 'UNITS',
//        'NPA'								as 'GrainFlag'
// FROM LUINC.FACT_NATIONAL_SALES_WEEKLY nsa,
//      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CHANNEL ch
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//       AND (nsa.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsa.DATE_KEY = clndr.DATE_KEY)
//       AND (nsa.CHANNEL_KEY = ch.CHANNEL_KEY);
      
// Store FINAL_FACT into [$(vStorePathFact)/FACT_ACUTE_ANTI_MIGRAINE_NATIONAL_SALES_WEEKLY$(vSpace).qvd](qvd);

// Drop Table FINAL_FACT;

// FINAL_FACT:
// Select
// 	nsp.FACT_KEY,
//     nsp.DATE_KEY,
//     nsp.PRODUCT_GROUP_KEY,
//     nsp.STRENGTH_UNITS,
//     nsp.NORMALIZED_TRX						as 'TRx',
//     nsp.UNITS								as 'UNITS',
//     'NSP'									as 'GrainFlag'
// FROM LUINC.FACT_NATIONAL_NON_RETAIL_WEEKLY nsp,
//      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CLASS_OF_TRADE cld
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//       AND (nsp.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsp.DATE_KEY = clndr.DATE_KEY)
//       AND (nsp.CLASS_OF_TRADE_KEY = cld.CLASS_OF_TRADE_KEY);
// ;
      
// Store FINAL_FACT into [$(vStorePathFact)/FACT_ACUTE_ANTI_MIGRAINE_NATIONAL_NON_RETAIL_WEEKLY$(vSpace).qvd](qvd);

// Drop Table FINAL_FACT;


///$tab FACT_SP_SD_INVTRY_MONTHLY - //DONE
DATA:
SELECT
F.CUSTOMER_KEY,
CUSTOMER_NAME,
CUSTOMER_ALIAS,
INVTRY_START_DATE_KEY,
INVTRY_END_DATE_KEY,
RPTD_STARTING_INVTRY,
RPTD_ENDING_INVTRY,
CALC_ENDING_INVTRY,
DAYS_ON_HAND
FROM Luinc.FACT_SP_SD_INVTRY_MONTHLY F
LEFT JOIN Luinc.DIM_CUSTOMER C ON F.CUSTOMER_KEY = C.CUSTOMER_KEY
;

Store DATA into [$(vStorePathFact)/FACT_SP_SD_INVTRY_MONTHLY$(vSpace).qvd](qvd);

Drop Table DATA;


///$tab FACT_NATL_ANTI_MIGRAINE - //DONE
// [Fact]:

// LIB CONNECT TO 'LuUS DW2.0';

// SELECT
// 	CALR.CALENDAR_YEAR_MONTH, 
//    	calr.MONTH_OF_YEAR,
//  	calr.CALENDAR_YEAR,
//   	calr.CALENDAR_YEAR_QUARTER,
//     PGR.MARKET_GROUP, 
//     PGR.MARKET, 
//     PGR.BRAND,
//     PGR.PRODUCT_NAME,
//     sum(fr.T_QTY) AS UNITS, 
//     SUM(fr.NORMALIZED_TRX)  as NORMALIZED_TRX,
//     'Retail' as CHANNEL
    
// from lu_dw.luinc.FACT_NATL_SALES_MONTHLY_ANTI_MIGRAINE fr
// join lu_dw.luinc.DIM_PRODUCT_GROUP pgr on pgr.PRODUCT_GROUP_KEY = fr.PRODUCT_GROUP_KEY
// join lu_dw.luinc.DIM_CLNDR calr on calr.DATE_KEY = fr.DATE_KEY 
// where 
// 	FR.DATE_KEY >= 20150101 and
// 	PGR.MARKET_GROUP = 'ANTI-MIGRAINE' and
//     PGR.PRODUCT_NAME not in ('DYSPORT','MYOBLOC','XEOMIN') and
//     PGR.MARKET in ('CGRP','CGRP-ORAL','BOTOX','TRICYCLICS & TETRACYCLICS','TOPIRAMATE','BETA BLOCKER','SSRI','SNRI')

// GROUP BY CALR.CALENDAR_YEAR_MONTH, 	calr.MONTH_OF_YEAR, calr.CALENDAR_YEAR, calr.CALENDAR_YEAR_QUARTER,PGR.MARKET_GROUP, PGR.MARKET, PGR.BRAND, PGR.PRODUCT_NAME

// UNION ALL

// select 
// 	CALNR.CALENDAR_YEAR_MONTH, 
//     calnr.MONTH_OF_YEAR,
//  	calnr.CALENDAR_YEAR,
//   	calnr.CALENDAR_YEAR_QUARTER,
//     PGNR.MARKET_GROUP, 
//     PGNR.MARKET, 
//     PGNR.BRAND,
//     PGNR.PRODUCT_NAME,
//     sum(fnr.UNITS) as UNITS, 
//     SUM(fnr.NORMALIZED_TRX)  as NORMALIZED_TRX,
//     'Non_Retail' as CHANNEL
    
// from lu_dw.luinc.FACT_NATL_NON_RETAIL_MONTHLY_ANTI_MIGRAINE fnr
// join lu_dw.luinc.DIM_PRODUCT_GROUP pgnr on pgnr.PRODUCT_GROUP_KEY = fnr.PRODUCT_GROUP_KEY
// join lu_dw.luinc.DIM_CLNDR calnr on calnr.DATE_KEY = fnr.DATE_KEY
// where  
// 	FNR.DATE_KEY >= 20150101 and 
//     PGNR.MARKET_GROUP = 'ANTI-MIGRAINE' and
//     PGNR.PRODUCT_NAME not in ('DYSPORT','MYOBLOC','XEOMIN') and
//     PGNR.MARKET in ('CGRP','CGRP-ORAL','BOTOX','TRICYCLICS & TETRACYCLICS','TOPIRAMATE','BETA BLOCKER','SSRI','SNRI')
// GROUP BY CALNR.CALENDAR_YEAR_MONTH, calnr.MONTH_OF_YEAR, calnr.CALENDAR_YEAR, calnr.CALENDAR_YEAR_QUARTER, PGNR.MARKET_GROUP, PGNR.MARKET, PGNR.BRAND, PGNR.PRODUCT_NAME
// ;

// Store [Fact] into [$(vStorePathFact)/FACT_NATL_ANTI_MIGRAINE$(vSpace).qvd](qvd);

// Drop Table [Fact];
///$tab Load Component - //DONE
// [Data Source and Dates]:

// SELECT DISTINCT LOAD_SUMMARY.COMPONENT_NAME as SOURCE_COMPONENT_NAME,
//                 LOAD_SUMMARY.START_DATE as SOURCE_START_DATE,
//                 LOAD_SUMMARY.END_DATE as SOURCE_END_DATE,
//                 LOAD_SUMMARY.LAST_FULL_WEEK_END_DATE as SOURCE_LAST_FULL_WEEK_END_DATE,
//                 LOAD_SUMMARY.LAST_FULL_MONTH_END_DATE as SOURCE_LAST_FULL_MONTH_END_DATE,
//                 DIM_CLNDR.SF_RELATIVE_WEEK as SOURCE_RELATIVE_WEEK
// FROM LU_DW.LUINC.LOAD_SUMMARY LOAD_SUMMARY,
//      LU_DW.LUINC.DIM_CLNDR DIM_CLNDR
// WHERE     (LOAD_SUMMARY.COMPONENT_NAME = 'IMS NPA WEEKLY')
//       AND (LOAD_SUMMARY.LAST_FULL_WEEK_END_DATE = DIM_CLNDR.DATE_WEEK_END);

// Store [Data Source and Dates] into [$(vStorePathDim)/LOAD_COMPONENT$(vSpace).qvd](qvd);

// Drop Table [Data Source and Dates];
///$tab DIM_AFFILIATION - //DONE
// If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

NoConcatenate
FACT_ACCOUNT_AFFILIATION:
SQL SELECT distinct 
       af.ACCOUNT_KEY,
       af.PARENT_ACCOUNT_KEY,
       af.CUSTOMER_KEY,
       af.AFFILIATION_TYPE,
       af.CUSTOMER_SHARE,
       acct.DEMAND_GENERATING_SITE,  //New Field
	   acct.INFUSION_LOCATION,
       cust.CUSTOMER_TYPE,
       iif(cust.CUSTOMER_TYPE='HCP',cust.DEMAND_GENERATING_SITE,'N') as CUST_DEMAND_GENERATING_SITE,
       fcs.SEGMENT_VALUE
FROM   luinc.FACT_ACCOUNT_AFFILIATION af
INNER JOIN luinc.DIM_CUSTOMER cust
              ON cust.CUSTOMER_KEY = af.CUSTOMER_KEY
INNER JOIN luinc.DIM_CUSTOMER acct
              ON acct.CUSTOMER_KEY = af.ACCOUNT_KEY
LEFT JOIN LUINC.FACT_CUSTOMER_SEGMENTATION fcs on af.CUSTOMER_KEY=fcs.CUSTOMER_KEY and SEGMENT_TYPE='Core Targets' and SEGMENT_VALUE is not null and fcs.CURRENT_IND = 'Y'
WHERE   
              cust.CUSTOMER_TYPE <> 'HCO'
AND    ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'


UNION

SELECT
    vs.ACCOUNT_KEY,
    vs.PARENT_ACCOUNT_KEY,
    vs.CUSTOMER_KEY,
       '' as AFFILIATION_TYPE,
       1 as CUSTOMER_SHARE,
     acct.DEMAND_GENERATING_SITE, //New Field
	acct.INFUSION_LOCATION,
    cust.CUSTOMER_TYPE,
       iif(cust.CUSTOMER_TYPE='HCP',cust.DEMAND_GENERATING_SITE,'N') as CUST_DEMAND_GENERATING_SITE,
       fcs.SEGMENT_VALUE
FROM luinc.FACT_ACCOUNT_SALES vs
  INNER JOIN luinc.DIM_CUSTOMER acct
    ON acct.CUSTOMER_KEY = vs.ACCOUNT_KEY
  INNER JOIN luinc.DIM_CUSTOMER cust
    ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY
  INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
       ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY
LEFT JOIN LUINC.FACT_CUSTOMER_SEGMENTATION fcs on vs.CUSTOMER_KEY=fcs.CUSTOMER_KEY and SEGMENT_TYPE='Core Targets' and SEGMENT_VALUE is not null and fcs.CURRENT_IND = 'Y'
WHERE  
        ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
       AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y';

Concatenate
Load -1 as ACCOUNT_KEY,
-1 as PARENT_ACCOUNT_KEY,
-1 as CUSTOMER_KEY,
'HCP' as CUSTOMER_TYPE,
'UNK' as DEMAND_GENERATING_SITE
autogenerate (1);

Store FACT_ACCOUNT_AFFILIATION 
into [$(vStorePathFact)/FACT_VAP_ACCOUNT_AFFILIATION$(vSpace).qvd](qvd);

// else

// FACT_ACCOUNT_AFFILIATION:
// Load * From [$(vStorePathFact)/FACT_VAP_ACCOUNT_AFFILIATION$(vSpace).qvd](qvd);

// end if


///$tab DIM_CUSTOMER - //DONE
DIM_CUSTOMER:
SELECT  *  
FROM luinc.DIM_CUSTOMER;
   
left join(DIM_CUSTOMER)
select 
  cs.CUSTOMER_KEY,
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'ACGRP DECILE' THEN cs.SEGMENT_DESC ELSE NULL END) as "aCGRP Decile",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'ACGRP DECILE' THEN cs.SEGMENT_VALUE ELSE NULL END) as "aCGRP Decile Value",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'ACCOUNT SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as "Segment",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'HCP PRIORITIZATION' THEN cs.SEGMENT_VALUE ELSE NULL END) as HCP_PRIORITIZATION,
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'CORE TARGETS' THEN cs.SEGMENT_VALUE ELSE NULL END) as HCP_CORE_TARGETS,
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'CORE TARGETS' THEN cs.SEGMENT_VALUE ELSE NULL END) as "Core Target",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'HCP TERR RANK' THEN cs.SEGMENT_VALUE ELSE NULL END) as "Territory Rank",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'ACGRP BOTOX DECILE' THEN cs.SEGMENT_DESC ELSE NULL END) as "aCGRP BOTOX Decile",
  MAX(CASE WHEN cs.SEGMENT_TYPE = 'ACGRP BOTOX DECILE' THEN cs.SEGMENT_VALUE ELSE NULL END) as "aCGRP BOTOX Decile Value",
   '1'																					as "Segment Flag"
  FROM LUINC.FACT_CUSTOMER_SEGMENTATION cs
  LEFT OUTER JOIN LUINC.DIM_BRAND b ON b.BRAND_KEY = cs.BRAND_KEY
   WHERE cs.CURRENT_IND = 'Y' AND b.BRAND in ('VYEPTI') 
   GROUP BY cs.CUSTOMER_KEY;
   
   
left join(DIM_CUSTOMER)
select Distinct 
    cs.CUSTOMER_KEY
    ,MAX(CASE WHEN cs.SEGMENT_TYPE = 'DECILE SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as 'Decile Segment'
    ,MAX(CASE WHEN cs.SEGMENT_TYPE = 'SHARE SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as 'Share Segment'
FROM LUINC.FACT_CUSTOMER_SEGMENTATION cs
INNER JOIN LUINC.DIM_CUSTOMER c on cs.CUSTOMER_KEY=c.CUSTOMER_KEY
LEFT OUTER JOIN LUINC.DIM_BRAND b ON b.BRAND_KEY = cs.BRAND_KEY
WHERE CURRENT_IND = 'Y' AND b.BRAND in ('VYEPTI') and PDRP_IND<>'Y' 
AND SEGMENT_DESC <> 'UNSEGMENTED'
GROUP BY cs.CUSTOMER_KEY;
      

Left Join(DIM_CUSTOMER)
select distinct
	ca.CUSTOMER_KEY,
    'Y'									as MERIDIAN_TARGET_FLAG
from luinc.FACT_CALL_PLAN ca
INNER JOIN luinc.DIM_BRAND b
  			ON b.BRAND_KEY = ca.BRAND_KEY
  			AND b.BRAND = 'VYEPTI'
INNER JOIN luinc.DIM_CUSTOMER c
  			ON c.CUSTOMER_KEY = ca.CUSTOMER_KEY
  			AND ISNULL(c.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
  			AND ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
  			AND  ISNULL(c.VYEPTI_EXCLUSION_IND,'N')= 'N'
INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
  			ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
INNER JOIN luinc.DIM_CLNDR cal
 			ON cal.date_key = ca.DATE_KEY
INNER JOIN luinc.DIM_TERRITORY t
 			ON t.TERRITORY_KEY = ca.TERRITORY_KEY
 			AND t.SALESFORCE_GROUP_NAME in ('MERIDIAN') and ca.DATE_TO_KEY>='$(vTodayFormatted)';
            
Left Join(DIM_CUSTOMER)
select distinct
	ca.CUSTOMER_KEY,
    'Y' as Starter_Rx_Eligible,
    QTY_ALLOCATED as Starter_Rx_Qty_Allocated
from luinc.FACT_ALLOCATION ca
INNER JOIN luinc.DIM_PRODUCT_GROUP b
  			ON b.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
  			AND b.PRODUCT_NAME = 'VYEPTI';
            
Left Join(DIM_CUSTOMER)        
SELECT 
	p.CUSTOMER_KEY,
    min(SHIPPED_DATE_KEY)				as [First Shipment Date]
from LUINC.FACT_PATIENT_SALES p
	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY
where 
		dp.LU_PRODUCT_FLAG = 'Y' 
 AND   dp.PRODUCT_NAME='VYEPTI'				
 AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
 And 	RX_TYPE='STANDARD'  
 group by p.CUSTOMER_KEY ;
 
      
Left Join(DIM_CUSTOMER)
AFFILIATED_HCP_COUNT:
Load    
       ACCOUNT_KEY						as CUSTOMER_KEY, 
       count(distinct if(CUSTOMER_TYPE='HCP', CUSTOMER_KEY)) 	as "Count of Affiliated HCPs"
Resident FACT_ACCOUNT_AFFILIATION
where CUSTOMER_KEY <> 0 and ACCOUNT_KEY <> 0 and CUSTOMER_TYPE='HCP'
GROUP BY ACCOUNT_KEY
;


Left Join(DIM_CUSTOMER)
AFFILIATED_ACCOUNT_COUNT:
Load    
       CUSTOMER_KEY, 
       count(distinct ACCOUNT_KEY) 		as "Count of Affiliated Accounts",
       COUNT(distinct if(DEMAND_GENERATING_SITE='Y', ACCOUNT_KEY))	 as  "Count of DGS Accounts" //new
Resident FACT_ACCOUNT_AFFILIATION
where CUSTOMER_KEY <> 0 and ACCOUNT_KEY <> 0
GROUP BY CUSTOMER_KEY;

Left Join(DIM_CUSTOMER)
AFFILIATED_ACCOUNT_COUNT:
Load    
       PARENT_ACCOUNT_KEY as CUSTOMER_KEY, 
       count(distinct ACCOUNT_KEY) 		as "Total Sites",
       COUNT(distinct if(DEMAND_GENERATING_SITE='Y', ACCOUNT_KEY))	 as  "Count of DGS Accounts for Parent", //new
       COUNT(distinct if(DEMAND_GENERATING_SITE='Y' and CUSTOMER_TYPE='HCP', CUSTOMER_KEY))	 as  "Count of DGS HCPs for Parent", //new
       COUNT(distinct if(CUSTOMER_TYPE='HCP', CUSTOMER_KEY))	 as  "Count of Affiliated HCPs for Parent",
       COUNT(distinct if(INFUSION_LOCATION='Y', ACCOUNT_KEY))	 as  "Count of Infusion Location for Parent",
       COUNT(distinct if(Not(Isnull(SEGMENT_VALUE)) and CUSTOMER_TYPE='HCP', CUSTOMER_KEY))	 as  "Count of Core Target HCPs for Parent"
Resident FACT_ACCOUNT_AFFILIATION
where CUSTOMER_KEY <> 0 and ACCOUNT_KEY <> 0 and PARENT_ACCOUNT_KEY<>0
GROUP BY PARENT_ACCOUNT_KEY;

Left Join(DIM_CUSTOMER)
Load 
CUSTOMER_KEY,
LAST_CALL_BY_DATE_KEY_1 as LAST_CALL_BY_DATE_KEY,
ACCT_MGR_FULL_NAME as LAST_CALL_BY;

// sql With Universe as (
sql
Select Distinct  A.CUSTOMER_KEY, A.LAST_CALL_BY_DATE_KEY_1,ACCT_MGR_FULL_NAME
From (
Select CUSTOMER_KEY,Max(LAST_CALL_BY_DATE_KEY_1) as LAST_CALL_BY_DATE_KEY_1 FROM (
SELECT
     HCO_CUSTOMER_KEY as CUSTOMER_KEY,
     Max(CALL_DATE_KEY) as LAST_CALL_BY_DATE_KEY_1
FROM luinc.FACT_CALL_ACTIVITY ca
INNER JOIN luinc.DIM_BRAND b ON b.BRAND_KEY = ca.BRAND_KEY AND b.BRAND = 'VYEPTI'
INNER JOIN luinc.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
INNER JOIN luinc.DIM_CLNDR cal ON cal.date_key = ca.CALL_DATE_KEY
INNER JOIN luinc.DIM_TERRITORY t ON t.TERRITORY_KEY = ca.TERRITORY_KEY AND t.SALESFORCE_GROUP_NAME in ('MERIDIAN')
WHERE t.FRANCHISE = 'NRO' and RECORD_TYPE <> 'Logistical Touchpoint' and PDE>0 and CALL_TYPE <> '$(vReactiveCalls)'
Group by HCO_CUSTOMER_KEY

 

// Union all

 

// Select
//      ACCOUNT_CUSTOMER_KEY as CUSTOMER_KEY,
//      Max(INTRACTN_DATE_KEY) as LAST_CALL_BY_DATE_KEY_1
// FROM luinc.FACT_FRS_INTRACTN_ACTIVITY ca
// INNER JOIN luinc.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY and pg.BRAND='VYEPTI'
// INNER JOIN luinc.DIM_FRS_TERRITORY t  ON t.FRS_TERRITORY_KEY = ca.FRS_TERRITORY_KEY
// Group by
// ACCOUNT_CUSTOMER_KEY
)A group by CUSTOMER_KEY) A

Left Join (
SELECT
     HCO_CUSTOMER_KEY as CUSTOMER_KEY,
     CALL_DATE_KEY as LAST_CALL_BY_DATE_KEY_1,
     t.ACCT_MGR_FULL_NAME
FROM luinc.FACT_CALL_ACTIVITY ca
INNER JOIN luinc.DIM_BRAND b ON b.BRAND_KEY = ca.BRAND_KEY AND b.BRAND = 'VYEPTI'
INNER JOIN luinc.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
INNER JOIN luinc.DIM_CLNDR cal ON cal.date_key = ca.CALL_DATE_KEY
INNER JOIN luinc.DIM_TERRITORY t ON t.TERRITORY_KEY = ca.TERRITORY_KEY AND t.SALESFORCE_GROUP_NAME in ('MERIDIAN')
WHERE t.FRANCHISE = 'NRO' and RECORD_TYPE <> 'Logistical Touchpoint' and PDE>0 and CALL_TYPE <> '$(vReactiveCalls)'
)B on B.CUSTOMER_KEY=A.CUSTOMER_KEY and A.LAST_CALL_BY_DATE_KEY_1=B.LAST_CALL_BY_DATE_KEY_1
// Interaction as (
// Select
//      ACCOUNT_CUSTOMER_KEY as CUSTOMER_KEY,
//      INTRACTN_DATE_KEY as LAST_CALL_BY_DATE_KEY_1,
//      FRS_FULL_NAME
// FROM luinc.FACT_FRS_INTRACTN_ACTIVITY ca
// INNER JOIN luinc.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY and pg.BRAND='VYEPTI'
// INNER JOIN luinc.DIM_FRS_TERRITORY t  ON t.FRS_TERRITORY_KEY = ca.FRS_TERRITORY_KEY
// )
// Select Distinct  A.CUSTOMER_KEY, A.LAST_CALL_BY_DATE_KEY_1,ACCT_MGR_FULL_NAME//,FRS_FULL_NAME
// From Universe A
// Left Join Call_Acivity B on B.CUSTOMER_KEY=A.CUSTOMER_KEY and A.LAST_CALL_BY_DATE_KEY_1=B.LAST_CALL_BY_DATE_KEY_1
// //Left Join Interaction C on C.CUSTOMER_KEY=A.CUSTOMER_KEY and A.LAST_CALL_BY_DATE_KEY_1=C.LAST_CALL_BY_DATE_KEY_1
;

NoConcatenate
FCA:
sql select 
distinct CUSTOMER_KEY,
'Y' as [CPD PDE Visible]
from LUINC.FACT_CALL_ACTIVITY
where REPORT_PRESCRIBER_CATEGORY ='LICENSED/PRESCRIBER' and CALL_TYPE <> '$(vReactiveCalls)';

Left Join (DIM_CUSTOMER)
Load CUSTOMER_KEY, [CPD PDE Visible]
Resident FCA;

drop table FCA;

NoConcatenate
DIM_CUSTOMER_M:
LOAD
    CUSTOMER_KEY,
    LUNDBECK_ID,
    ORGANIZATION_NAME,
    CUSTOMER_FIRST_NAME,
    CUSTOMER_MIDDLE_NAME,
    CUSTOMER_LAST_NAME,
    CUSTOMER_NAME,
    CUSTOMER_ALIAS,
    CUSTOMER_ADDR1,
    CUSTOMER_ADDR2,
    CUSTOMER_CITY,
    CUSTOMER_STATE,
    CUSTOMER_STATE_ABBREV,
    CUSTOMER_ZIP,
    CUSTOMER_ADDR_LATITUDE,
    CUSTOMER_ADDR_LONGITUDE,
    CUSTOMER_PHONE_TYPE,
    CUSTOMER_PHONE,
    CUSTOMER_PHONE_EXT,
    CUSTOMER_STATUS,
    CUSTOMER_STATUS_REASON,
    CUSTOMER_TYPE,
    CUSTOMER_SUB_TYPE_CD,
    CUSTOMER_SUB_TYPE_NAME,
    CUSTOMER_DETAIL_TYPE_CODE,
    CUSTOMER_DETAIL_TYPE,
    FACILITY_TYPE,
    NPI,
    ME_ID,
    SPECIALTY,
    DATA_STEWARDSHIP_EXCLUSION_FLAG,
    LU_NO_CONTACT_FLAG,
    NO_CONTACT_FLAG,
    PDRP_IND,
    PSYCH_SPECIALTY_IND,
    NEURO_SPECIALTY_IND,
    CARDIO_SPECIALTY_IND,
    PRIMARY_CARE_SPECIALTY_IND,
    MID_LEVEL_PRACTITIONER_IND,
    NORTHERA_SPECIALTY_GROUP,
    ABILIFY_MAINTENA_EXCLUSION_IND,
    CARNEXIV_EXCLUSION_IND,
    NORTHERA_EXCLUSION_IND,
    ONFI_EXCLUSION_IND,
    REXULTI_EXCLUSION_IND,
    SABRIL_EXCLUSION_IND,
    TRINTELLIX_EXCLUSION_IND,
    XENAZINE_EXCLUSION_IND,
    VYEPTI_EXCLUSION_IND,
    ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND,
    REXULTI_RETAIL_HCO_EXCL_IND,
    TRINTELLIX_RETAIL_HCO_EXCL_IND,
    KEY_OPINION_LEADER_FLAG,
    HIN,
    EPILEPSY_CENTER,
    HUNTINGTONS_STUDY_GROUP,
    LIS_TARGET,
    PCT_LIS_CLAIMS,
    NORTHERA_DUAL_ELIGIBLE,
    PCT_NOR_DUAL_ELIG_CLAIMS,
    NOR_DUAL_ELIG_PAT_SAMPLE_COUNT,
    NOR_DUAL_ELIG_PAT_SAMPLE_DESC,
    INFUSION_CAPABLE,
    BUY_AND_BILL,
    VYEPTI_PREFERRED_ACCOUNT,
    MSA,
    CBSA,
    VEEVA_CUSTOMER_ID,
    REXULTI_SALES_BI_VISIBILITY,
    ABILITY_TO_DETAIL,
    INFUSION_LOCATION,
    HOME_INFUSION,
    DEMAND_GENERATING_SITE,
    PRESCRIPTIVE_AUTHORITY_IND,
    DMA,
    if(IsNull("aCGRP Decile"), 'NULL', "aCGRP Decile") as "aCGRP Decile",
    if(IsNull("aCGRP Decile Value"), 'NULL', "aCGRP Decile Value") as "aCGRP Decile Value",
    if(IsNull(Segment), 'NULL', Segment) as Segment,
    if(IsNull(HCP_PRIORITIZATION), 'NULL', HCP_PRIORITIZATION) as HCP_PRIORITIZATION,
    if(IsNull(HCP_CORE_TARGETS), 'NULL', HCP_CORE_TARGETS) as HCP_CORE_TARGETS,
    if(IsNull("Core Target"), 'NULL', "Core Target") as "Core Target",
    if(IsNull("Territory Rank"), 'NULL', "Territory Rank") as "Territory Rank", 
    if(IsNull("aCGRP BOTOX Decile"), 'NULL', "aCGRP BOTOX Decile") as "aCGRP BOTOX Decile",
    if(IsNull("aCGRP BOTOX Decile Value"), 'NULL', "aCGRP BOTOX Decile Value") as "aCGRP BOTOX Decile Value",
    if(IsNull("Decile Segment"), 'NULL', "Decile Segment") as "Decile Segment",
    if(IsNull("Share Segment"), 'NULL', "Share Segment") as "Share Segment",
    "Segment Flag",
    if(IsNull(MERIDIAN_TARGET_FLAG), 'N', MERIDIAN_TARGET_FLAG) as MERIDIAN_TARGET_FLAG,
    if(IsNull(Starter_Rx_Eligible), 'N', Starter_Rx_Eligible) as Starter_Rx_Eligible, //TBC - PRAW
    Starter_Rx_Qty_Allocated,
    "First Shipment Date",
    "Count of Affiliated HCPs",
    "Count of Affiliated Accounts",
    "Count of DGS Accounts",
    "Total Sites",
    "Count of DGS Accounts for Parent",
    "Count of DGS HCPs for Parent",
    "Count of Affiliated HCPs for Parent",
    "Count of Infusion Location for Parent",
    "Count of Core Target HCPs for Parent",
    LAST_CALL_BY_DATE_KEY,
    LAST_CALL_BY,
    If([CPD PDE Visible]='Y', 'Y','N') as [Show PDE]
resident DIM_CUSTOMER;


Store [DIM_CUSTOMER_M] into [$(vStorePathDim)/DIM_VAP_CUSTOMER$(vSpace).qvd](qvd);
Store [DIM_CUSTOMER] into [$(vStorePathDim)/DIM_CUSTOMER_NPRINTING$(vSpace).qvd](qvd);

Drop Table [DIM_CUSTOMER];	
Drop table DIM_CUSTOMER_M;

///$tab DIM_PATIENT - //DONE
// If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

DIM_PATIENT:
Select 
	* 
From LUINC.DIM_PATIENT
where SOURCE in ('MANUAL','VYEPTI');

Store DIM_PATIENT into [$(vStorePathDim)/DIM_PATIENT$(vSpace).qvd](qvd);
Drop Table [DIM_PATIENT];

// End If
///$tab CLNDR/PLAN/TERR/Prod - //DONE
DIM_CLNDR:
SELECT * FROM luinc.DIM_CLNDR;

Store DIM_CLNDR into [$(vStorePathDim)/DIM_CLNDR$(vSpace).qvd](qvd); Drop Table [DIM_CLNDR];




DIM_PLAN:
SELECT * FROM luinc.DIM_PLAN;

left join(DIM_PLAN)
Select b.PRIMARY_PLAN_KEY as PLAN_KEY, COUNT(B.PATIENT_KEY) AS COUNT_OF_FILLS
from
(
select DISTINCT patient_key , patient_source,PRODUCT_GROUP_KEY ,min(infusion_date_key) as infusion_date_key 
from luinc.fact_asoc_dispense
group by  patient_key , patient_source,PRODUCT_GROUP_KEY) a
inner join luinc.fact_asoc_dispense b on a.patient_key=b.patient_key and a.infusion_date_key=b.infusion_date_key
and a.patient_source=b.patient_source
inner join luinc.fact_patient_snapshot ps on ps.patient_key = a.patient_key
inner join luinc.dim_clndr c on c.date_key= 
(select CASE when b.referral_date_key is null then ps.referral_date_key
else b.referral_date_key
END)
INNER JOIN LUINC.DIM_PRODUCT_GROUP PG ON PG.PRODUCT_GROUP_KEY = a.PRODUCT_GROUP_KEY
where 
PRODUCT_NAME = 'VYEPTI'
AND REPLACE(ps.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
GROUP BY B.PRIMARY_PLAN_KEY 
HAVING COUNT(B.PATIENT_KEY) >= 20
;

Store DIM_PLAN into [$(vStorePathDim)/DIM_PLAN$(vSpace).qvd](qvd); Drop Table [DIM_PLAN];




DIM_TERRITORY:
SELECT *
FROM luinc.DIM_TERRITORY 
where TERR_CURRENT_IND='Y' and Upper(ORGANIZATION)='LU' and FRANCHISE='NRO' AND SALESFORCE_GROUP_NAME in ('MERIDIAN') and TERRITORY_NAME <> 'UNASSIGNED'; 

Store DIM_TERRITORY into [$(vStorePathDim)/DIM_TERRITORY$(vSpace).qvd](qvd); drop Table DIM_TERRITORY;


DIM_PRODUCT_GROUP:
SELECT 
	pg.*,
    mb.MARKET_BASKET_GROUP
FROM luinc.DIM_PRODUCT_GROUP pg 
inner join LUINC.DIM_MB_VYEPTI_SA mb
	ON pg.PRODUCT_GROUP_KEY = mb.PRODUCT_GROUP_KEY;


Store DIM_PRODUCT_GROUP into [$(vStorePathDim)/DIM_PRODUCT_GROUP$(vSpace).qvd](qvd); Drop Table [DIM_PRODUCT_GROUP];




///$tab FRS Dimensions - //DONE
// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_ACTIVITY_DTL:
// select 
// 	* 
// from LUINC.DIM_INTRACTN_ACTIVITY_DTL;

// Store DIM_INTRACTN_ACTIVITY_DTL into [$(vStorePathDim)/DIM_INTRACTN_ACTIVITY_DTL$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_ACTIVITY_DTL;

// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_ACTIVITY:
// Select 
// 	* 
// from LUINC.DIM_INTRACTN_ACTIVITY;

// Store DIM_INTRACTN_ACTIVITY into [$(vStorePathDim)/DIM_INTRACTN_ACTIVITY$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_ACTIVITY;


// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_LENGTH:
// Select 
// 	* 
// from LUINC.DIM_INTRACTN_LENGTH;


// Store DIM_INTRACTN_LENGTH into [$(vStorePathDim)/DIM_INTRACTN_LENGTH$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_LENGTH;

// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_RESOURCE:
// Select 
// 	* 
// from LUINC.DIM_INTRACTN_RESOURCE;


// Store DIM_INTRACTN_RESOURCE into [$(vStorePathDim)/DIM_INTRACTN_RESOURCE$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_RESOURCE;

// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_OUTCOME:
// Select 
//     * 
// from LUINC.DIM_INTRACTN_OUTCOME;

// Store DIM_INTRACTN_OUTCOME into [$(vStorePathDim)/DIM_INTRACTN_OUTCOME$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_OUTCOME;

// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_FRS_INTRACTN_TYPE:
// Select 
// 	* 
// from LUINC.DIM_FRS_INTRACTN_TYPE;


// Store DIM_FRS_INTRACTN_TYPE into [$(vStorePathDim)/DIM_FRS_INTRACTN_TYPE$(vSpace).qvd](qvd);
// Drop Table DIM_FRS_INTRACTN_TYPE;

// ////Comment this - only used in Vyepti FRS Dashboard, this app will be discontinued
// DIM_INTRACTN_TRIGGER:
// Select 
// 	* 
// from LUINC.DIM_INTRACTN_TRIGGER;

// Store DIM_INTRACTN_TRIGGER into [$(vStorePathDim)/DIM_INTRACTN_TRIGGER$(vSpace).qvd](qvd);
// Drop Table DIM_INTRACTN_TRIGGER;

DIM_FRS_TERRITORY:
// Select 
// 	* 
// from LUINC.DIM_FRS_TERRITORY;

SELECT 
FAS_TERRITORY_KEY	 AS 	FRS_TERRITORY_KEY,
FAS_TERRITORY_ID	 AS 	FRS_TERRITORY_ID,
FAS_TERRITORY_NAME	 AS 	FRS_TERRITORY_NAME,
FAS_FIRST_NAME	 AS 	FRS_FIRST_NAME,
FAS_LAST_NAME	 AS 	FRS_LAST_NAME,
FAS_FULL_NAME	 AS 	FRS_FULL_NAME,
FAS_AD_ID	 AS 	FRS_AD_ID,
FAM_TERRITORY_ID	 AS 	FRM_TERRITORY_ID,
FAM_TERRITORY_NAME	 AS 	FRM_TERRITORY_NAME,
FAM_FIRST_NAME	 AS 	FRM_FIRST_NAME,
FAM_LAST_NAME	 AS 	FRM_LAST_NAME,
FAM_FULL_NAME	 AS 	FRM_FULL_NAME,
FAM_AD_ID	 AS 	FRM_AD_ID,
FAS_EFF_DATE	 AS 	FRS_EFF_DATE,
FAS_EXP_DATE	 AS 	FRS_EXP_DATE,
FAS_CURRENT_IND	 AS 	FRS_CURRENT_IND
FROM luinc.DIM_FAS_TERRITORY
;
Store DIM_FRS_TERRITORY into [$(vStorePathDim)/DIM_FRS_TERRITORY$(vSpace).qvd](qvd);
Drop Table DIM_FRS_TERRITORY;

///$tab Affiliation Rollup - //DONE
// NoConcatenate
// AFFILIATION_PACCT_TO_CUST_ACCOUNT:  //All Accounts and Customers for a Parent Account 
// Load   DISTINCT
//        PARENT_ACCOUNT_KEY, 
//        Concat(DISTINCT ACCOUNT_KEY,'|' ) as ALL_ACCOUNT_KEYS,
//        Coalesce(Concat(DISTINCT CUSTOMER_KEY, '|'), 0) as ALL_CUSTOMER_KEYS
// Resident FACT_ACCOUNT_AFFILIATION
// GROUP BY PARENT_ACCOUNT_KEY;


// NoConcatenate
// AFFILIATION_ACCT_TO_CUST: //All Parents and Customers for an Account
// Load   DISTINCT
//        ACCOUNT_KEY, 
//        Coalesce(Concat(DISTINCT PARENT_ACCOUNT_KEY, '|'), 0) as ALL_PACCOUNT_KEYS, 
//        Coalesce(Concat(DISTINCT CUSTOMER_KEY, '|'), 0) as ALL_CUSTOMER_KEYS
// Resident FACT_ACCOUNT_AFFILIATION
// GROUP BY ACCOUNT_KEY
// ;

// NoConcatenate
// AFFILIATION_CUST_TO_ACCT: //All Parent Accounts and Accounts for a Customer. Don't bring in HCO customers.
// Load   DISTINCT
//        CUSTOMER_KEY, 
//        Coalesce(Concat(DISTINCT PARENT_ACCOUNT_KEY,'|' ), 0) as ALL_PACCOUNT_KEYS, 
//        Coalesce(Concat(DISTINCT ACCOUNT_KEY,'|' ), 0) as ALL_ACCOUNT_KEYS
// Resident FACT_ACCOUNT_AFFILIATION
// WHERE CUSTOMER_TYPE <> 'HCO'
// GROUP BY CUSTOMER_KEY;


///$tab Patient Snapshot- // DONE
// VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ:           
//  SQL Select Distinct 
//  		ps.*,
//         PATIENT_ID,
// 	    ZT.FAS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
// FROM LUINC.FACT_PATIENT_SNAPSHOT_WEEKLY ps
// INNER JOIN LUINC.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ps.PRODUCT_GROUP_KEY AND pg.brand = 'Vyepti'
// INNER JOIN LUINC.DIM_PATIENT DP on DP.PATIENT_KEY=ps.PATIENT_KEY
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT on ZT.ZIP=ps.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
// WHERE PATIENT_SOURCE IN ('WALGREENS', 'ORSINI');
 
// Store VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ$(vSpace).qvd](qvd);
// Drop Table VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ;

VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ:           
 SQL Select Distinct 
 		ps.*,
        PATIENT_ID,
        REPLACE(PS.patient_source, ' ', '') as PATIENT_SOURCE_1,
	   ZT.FAS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
FROM LUINC.FACT_PATIENT_SNAPSHOT_WEEKLY ps
INNER JOIN LUINC.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ps.PRODUCT_GROUP_KEY AND pg.brand = 'Vyepti'
INNER JOIN LUINC.DIM_PATIENT DP on DP.PATIENT_KEY=ps.PATIENT_KEY
LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT on ZT.ZIP=ps.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
WHERE REPLACE(PS.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE');

Store VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SIP_SNAPSHOT_WEEKLY_HQ$(vSpace).qvd](qvd);
Drop Table VYEPTI_FACT_PATIENT_SNAPSHOT_WEEKLY_HQ;

VYEPTI_FACT_PATIENT_SNAPSHOT_MONTHLY_HQ:           
 SQL Select Distinct 
 		ps.*,
        PATIENT_ID,
        REPLACE(PS.patient_source, ' ', '') as PATIENT_SOURCE_1,
	   ZT.FAS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
FROM LUINC.FACT_PATIENT_SNAPSHOT_MONTHLY ps
INNER JOIN LUINC.DIM_PRODUCT_GROUP pg ON pg.PRODUCT_GROUP_KEY = ps.PRODUCT_GROUP_KEY AND pg.brand = 'Vyepti'
INNER JOIN LUINC.DIM_PATIENT DP on DP.PATIENT_KEY=ps.PATIENT_KEY
LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT on ZT.ZIP=ps.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
WHERE REPLACE(PS.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE');

Store VYEPTI_FACT_PATIENT_SNAPSHOT_MONTHLY_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SIP_SNAPSHOT_MONTHLY_HQ$(vSpace).qvd](qvd);
Drop Table VYEPTI_FACT_PATIENT_SNAPSHOT_MONTHLY_HQ;


VYEPTI_FACT_PATIENT_SNAPSHOT_HQ: //THIS IS BEING USED FOR MAX ENROLLMENT DATE KEY IN VIN HO DASHBOARD
SELECT 
    snap.*,
    PATIENT_ID,
	ZT.FAS_TERRITORY_KEY AS FRS_ZIP_TO_TERRITORY_KEY,
    F.HOME_INFUSION_DATE_KEY
FROM LUINC.FACT_PATIENT_SNAPSHOT snap
INNER JOIN LUINC.dim_product_group pg ON pg.product_group_key = snap.product_group_key
INNER JOIN LUINC.DIM_CLNDR enroll ON enroll.date_key = snap.ENROLLMENT_DATE_KEY
INNER JOIN LUINC.DIM_PATIENT DP ON DP.PATIENT_KEY=snap.PATIENT_KEY
LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT ON ZT.ZIP=snap.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
LEFT JOIN (
SELECT CUSTOMER_KEY,PATIENT_KEY, MAX(HOME_INFUSION_DATE_KEY) AS HOME_INFUSION_DATE_KEY
from LUINC.FACT_PATIENT_SALES f  
WHERE HOME_INFUSION_IND = 'Y'
group by
CUSTOMER_KEY,
PATIENT_KEY
)f on f.PATIENT_KEY = snap.PATIENT_KEY AND f.CUSTOMER_KEY = snap.CUSTOMER_KEY
 WHERE pg.brand = 'Vyepti'
 and snap.SPECIALTY_PHARMACY IN ('ORSINI','WALGREENS')
;


Store VYEPTI_FACT_PATIENT_SNAPSHOT_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SNAPSHOT_HQ$(vSpace).qvd](qvd);
Drop Table VYEPTI_FACT_PATIENT_SNAPSHOT_HQ;

VYEPTI_FACT_SIP_PATIENT_SNAPSHOT_HQ:
SELECT 
    snap.*,
PATIENT_ID,
HOME_INFUSION_DATE_KEY,
ZT.FAS_TERRITORY_KEY AS FRS_ZIP_TO_TERRITORY_KEY,
C.LUNDBECK_ID AS SOA_LUNDBECK_ID,
C.CUSTOMER_NAME AS SOA_CUSTOMER_NAME,
C.CUSTOMER_ADDR1 AS SOA_ADDRESS,
C.CUSTOMER_STATE as SOA_STATE,
C.CUSTOMER_CITY as SOA_CUSTOMER_CITY,
C.CUSTOMER_ZIP AS SOA_CUSTOMER_ZIP
FROM LUINC.FACT_PATIENT_SNAPSHOT snap
inner join luinc.DIM_PATIENT p on p.PATIENT_KEY = snap.PATIENT_KEY
INNER JOIN LUINC.dim_product_group pg ON pg.product_group_key = snap.product_group_key
INNER JOIN LUINC.DIM_CUSTOMER C ON C.CUSTOMER_KEY = SNAP.ENROLLMENT_FACILITY_KEY
left JOIN (
SELECT CUSTOMER_KEY,PATIENT_KEY,REPLACE(f.PATIENT_SOURCE,' ','') as PATIENT_SOURCE,MAX(INFUSION_DATE_KEY) AS HOME_INFUSION_DATE_KEY
from LUINC.FACT_ASOC_DISPENSE f 
Group BY
PATIENT_KEY,REPLACE(f.PATIENT_SOURCE,' ',''),CUSTOMER_KEY
) f on f.PATIENT_KEY = snap.PATIENT_KEY
and f.PATIENT_SOURCE= snap.PATIENT_SOURCE
and f.CUSTOMER_KEY= snap.CUSTOMER_KEY
LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT ON ZT.ZIP=snap.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
 WHERE pg.brand = 'VYEPTI'
and REPLACE(snap.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
;

Store VYEPTI_FACT_SIP_PATIENT_SNAPSHOT_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SIP_SNAPSHOT_HQ$(vSpace).qvd](qvd);
Drop Table VYEPTI_FACT_SIP_PATIENT_SNAPSHOT_HQ;

// First_Shipment:
// SELECT  isnull(first_ship2.SHIPPED_DATE_KEY,  ps.FIRST_PAID_SHIPMENT_DATE_KEY) as FIRST_PAID_SHIPMENT_DATE_KEY  
// ,      ISNULL(first_ship2.REFERRAL_DATE_KEY, ps.REFERRAL_DATE_KEY) as REFERRAL_DATE_KEY
// ,      ps.SPECIALTY_PHARMACY as SPECIALTY_PHARMACY
// ,      PATIENT_ID
// ,      PS.PATIENT_STATUS as "Patient Status"
// ,	   HIPAA_CONSENT_IND
// FROM  LUINC.FACT_PATIENT_SNAPSHOT PS
// INNER JOIN LUINC.DIM_PATIENT P on P.PATIENT_KEY=PS.PATIENT_KEY
// left join (
// SELECT SHIPPED_DATE_KEY
// ,      REFERRAL_DATE_KEY
// ,      SPECIALTY_PHARMACY
// ,      PATIENT_KEY
// FROM (
// SELECT  MIN(ps.SHIPPED_DATE_KEY) OVER (PARTITION BY ps.patient_key, ps.SPECIALTY_PHARMACY) as min_shipped_key
// ,      ps.SHIPPED_DATE_KEY
// ,      ps.REFERRAL_DATE_KEY
// ,      ps.SPECIALTY_PHARMACY
// ,      ps.PATIENT_KEY
// FROM   luinc.FACT_PATIENT_SALES ps
// INNER JOIN luinc.DIM_PRODUCT_GROUP pg
// On pg.PRODUCT_GROUP_KEY = ps.PRODUCT_GROUP_KEY
// WHERE pg.BRAND = 'VYEPTI'
// ) first_ship
// WHERE min_shipped_key = first_ship.SHIPPED_DATE_KEY
// ) first_ship2
// on  PS.PATIENT_KEY=first_ship2.PATIENT_KEY
// and  PS.SPECIALTY_PHARMACY=first_ship2.SPECIALTY_PHARMACY 
// where PS.SPECIALTY_PHARMACY IN ('ORSINI','WALGREENS')
// ;

// Store First_Shipment into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SNAPSHOT_FISRT_SHIPMENT$(vSpace).qvd](qvd);
// Drop Table First_Shipment;


First_Shipment:
SELECT  isnull(first_ship2.INFUSION_DATE_KEY,  ps.FIRST_PAID_SHIPMENT_DATE_KEY) as FIRST_PAID_SHIPMENT_DATE_KEY  
,      ISNULL(first_ship2.REFERRAL_DATE_KEY, ps.REFERRAL_DATE_KEY) as REFERRAL_DATE_KEY
,      ps.PATIENT_SOURCE as PATIENT_SOURCE
,      PATIENT_ID
,      PS.PATIENT_STATUS as "Patient Status"
,	   HIPAA_CONSENT_IND
FROM  LUINC.FACT_PATIENT_SNAPSHOT PS
INNER JOIN LUINC.DIM_PATIENT P on P.PATIENT_KEY=PS.PATIENT_KEY
left join (
SELECT INFUSION_DATE_KEY
,      REFERRAL_DATE_KEY
,      PATIENT_SOURCE
,      PATIENT_KEY
FROM (
SELECT  MIN(ps.INFUSION_DATE_KEY) OVER (PARTITION BY ps.patient_key, ps.PATIENT_SOURCE) as min_shipped_key
,      ps.INFUSION_DATE_KEY
,      ps.REFERRAL_DATE_KEY
,      ps.PATIENT_SOURCE
,      ps.PATIENT_KEY
FROM   luinc.FACT_ASOC_DISPENSE ps
INNER JOIN luinc.DIM_PRODUCT_GROUP pg
On pg.PRODUCT_GROUP_KEY = ps.PRODUCT_GROUP_KEY
WHERE pg.BRAND = 'VYEPTI'
) first_ship
WHERE min_shipped_key = first_ship.INFUSION_DATE_KEY
) first_ship2
on  PS.PATIENT_KEY=first_ship2.PATIENT_KEY
and  REPLACE(PS.PATIENT_SOURCE, ' ', '')=REPLACE(first_ship2.PATIENT_SOURCE, ' ', '')
WHERE 
REPLACE(PS.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
;

Store First_Shipment into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SIP_SNAPSHOT_FISRT_SHIPMENT$(vSpace).qvd](qvd);
Drop Table First_Shipment;

// VYEPTI_FACT_PATIENT_HUB_SNAPSHOT:
// Select 
//    snap.*,
//    PATIENT_ID,
// 	ZT.FAS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
// from luinc.FACT_PATIENT_HUB_SNAPSHOT snap
// INNER JOIN luinc.dim_product_group pg ON pg.product_group_key = snap.product_group_key
// INNER JOIN luinc.DIM_CLNDR enroll ON enroll.date_key = snap.ENROLLMENT_DATE_KEY
// inner join luinc.DIM_PATIENT p on p.PATIENT_KEY = snap.PATIENT_KEY
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT on ZT.ZIP=snap.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
//  WHERE pg.brand = 'Vyepti';

// Store VYEPTI_FACT_PATIENT_HUB_SNAPSHOT into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_HUB_SNAPSHOT$(vSpace).qvd](qvd);

// drop Table VYEPTI_FACT_PATIENT_HUB_SNAPSHOT;

// Fact_Copy_Enrollments:
// SQL SELECT  F.*,
// FZT.FAS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY,
//     ZT.TERRITORY_KEY
// From LUINC.FACT_COPAY_ENROLLMENT F
// INNER JOIN LUINC.DIM_PATIENT P on P.PATIENT_ID=COPAY_PATIENT_ID
// INNER JOIN LUINC.DIM_CUSTOMER C on C.CUSTOMER_KEY=F.CUSTOMER_KEY
// INNER JOIN LUINC.FACT_ZIP_TO_TERRITORY ZT on ZT.ZIP=C.CUSTOMER_ZIP and ZT.CURRENT_IND='Y' 
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS FZT on FZT.ZIP=F.CUSTOMER_ZIP and FZT.CURRENT_IND='Y'//change current ind
// INNER JOIN LUINC.DIM_TERRITORY T on T.TERRITORY_KEY=ZT.TERRITORY_KEY and TERR_CURRENT_IND='Y' and SALESFORCE_GROUP_NAME='MERIDIAN';

// Store Fact_Copy_Enrollments into [$(vStorePathFact)/FACT_COPAY_ENROLLMENT$(vSpace).qvd](qvd);
// Drop Table Fact_Copy_Enrollments;


Fact_Account_Sales_SIP : //USED IN VIN EXECUTIVE
NoConcatenate
SELECT F.*, ASOC_GROUP
FROM LUINC.FACT_ACCOUNT_SALES F
INNER JOIN LUINC.DIM_PRODUCT_GROUP PG ON PG.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
INNER JOIN LUINC.DIM_CUSTOMER C ON C.CUSTOMER_KEY = F.ACCOUNT_KEY
WHERE PRODUCT_NAME = 'VYEPTI'
AND CUSTOMER_TYPE = 'HCO'
AND SALE_TYPE = 'NON RETAIL'
;

Store Fact_Account_Sales_SIP into [$(vStorePathFact)/FACT_ACCOUNT_SALES_SIP$(vSpace).qvd](qvd);
Drop Table Fact_Account_Sales_SIP;
///$tab Account Sales - //DONE
// FACT_ACCOUNT_SALES_DAILY:
// Select 
// 	f.*,
//     c.CUSTOMER_NAME as SD_NAME,
//      c.CUSTOMER_ALIAS,
//     cust.CUSTOMER_TYPE,
//     FAS_TERRITORY_KEY AS FRS_TERRITORY_KEY
// FROM LUINC.FACT_ACCOUNT_SALES f
// inner join LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY
// INNER JOIN LUINC.DIM_MB_VYEPTI_SA SA on SA.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
// LEFT join LUINC.DIM_CUSTOMER c on c.CUSTOMER_KEY = f.SHIP_FROM_CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER cust on cust.CUSTOMER_KEY = f.CUSTOMER_KEY
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FAS ZT on ZT.ZIP=F.CUSTOMER_ZIP and ZT.CURRENT_IND='Y'//change current ind
// where p.BRAND = 'VYEPTI';

// ACCOUNT_CUSTOMER_ALIAS_CHECK:
// Load Distinct
// 	concat(distinct CUSTOMER_ALIAS,'|',CUSTOMER_ALIAS)			as ALL_CUSTOMER_ALIAS;
// Load Distinct    
// if(isnull(CUSTOMER_ALIAS),'NULL',CUSTOMER_ALIAS) as CUSTOMER_ALIAS
// Resident FACT_ACCOUNT_SALES_DAILY;

// vAllCustomerAlias_Account = Peek('ALL_CUSTOMER_ALIAS');

// Drop table ACCOUNT_CUSTOMER_ALIAS_CHECK; 

// Drop field CUSTOMER_ALIAS from FACT_ACCOUNT_SALES_DAILY;

// Store [FACT_ACCOUNT_SALES_DAILY] into [$(vStorePathFact)/FACT_ACCOUNT_SALES_DAILY$(vSpace).qvd](qvd);
// Drop Table [FACT_ACCOUNT_SALES_DAILY];



// FACT_ACCOUNT_SALES_DAILY:
// Select 
// 	f.*,
//     c.CUSTOMER_ALIAS,
//     cust.CUSTOMER_TYPE
// FROM LUINC.FACT_ACCOUNT_SALES f
// inner join LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY
// INNER JOIN LUINC.DIM_MB_VYEPTI_SA SA on SA.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_CUSTOMER c on c.CUSTOMER_KEY = f.SHIP_FROM_CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER cust on cust.CUSTOMER_KEY = f.CUSTOMER_KEY
// where p.BRAND<> 'VYEPTI'   and DATE_KEY>=20200101 and  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY','NURTEC','REYVOW','UBRELVY','QULIPTA');


// Drop field CUSTOMER_ALIAS from FACT_ACCOUNT_SALES_DAILY;

// Store [FACT_ACCOUNT_SALES_DAILY] into [$(vStorePathFact)/FACT_COMPETITOR_ACCOUNT_SALES_DAILY$(vSpace).qvd](qvd); Drop Table [FACT_ACCOUNT_SALES_DAILY];

///////////////////////////////////////////////////////////////////////////////////////////////
// VYEPTI_FLUCTUALTION:
// sql WITH CURRENT_WEEK AS (
//         Select DATE_WEEK_END_KEY,DATE_WEEK_END, SUm(NORMALIZED_TRX) AS CURRENT_UNITS FROM LUINC.FACT_ACCOUNT_SALES F
//         INNER JOIN LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY=F.PRODUCT_GROUP_KEY
//         INNER JOIN LUINC.DIM_CLNDR C ON C.DATE_KEY=F.DATE_KEY
//         WHERE PRODUCT_NAME='VYEPTI' AND DATE_WEEK_END_KEY<CONVERT(CHAR(8), Getdate(), 112) AND DATE_WEEK_END_KEY NOT IN ('20210219','20210226')
//         GROUP BY DATE_WEEK_END_KEY,DATE_WEEK_END
//   ),
//   PREVIOUS_WEEK AS (
//         Select DATE_WEEK_END_KEY AS PREV_WEEK_END_KEY,DATE_WEEK_END, SUm(NORMALIZED_TRX) AS PREV_UNITS FROM LUINC.FACT_ACCOUNT_SALES F
//         INNER JOIN LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY=F.PRODUCT_GROUP_KEY
//         INNER JOIN LUINC.DIM_CLNDR C ON C.DATE_KEY=F.DATE_KEY
//         WHERE PRODUCT_NAME='VYEPTI' AND DATE_WEEK_END_KEY<CONVERT(CHAR(8), Getdate(), 112) AND DATE_WEEK_END_KEY NOT IN ('20210219','20210226')
//         GROUP BY DATE_WEEK_END_KEY,DATE_WEEK_END
//   ),
//   TEMP_MEASURE AS (
//         SELECT DATE_WEEK_END_KEY,PREV_WEEK_END_KEY, CURRENT_UNITS, PREV_UNITS, ROUND((CURRENT_UNITS-PREV_UNITS)/PREV_UNITS,2) AS UNIT_CHANGE
//         FROM CURRENT_WEEK C
//         LEFT JOIN PREVIOUS_WEEK P ON DATEDIFF(DAY, P.DATE_WEEK_END, C.DATE_WEEK_END)=7
//   ),
//   STDDEV_MEASURE AS (
//   SELECT 1 AS FLAG,
//          ROUND(AVG(UNIT_CHANGE)+STDEV(UNIT_CHANGE),2)     AS STDDEV_P1, 
//          ROUND(AVG(UNIT_CHANGE)-STDEV(UNIT_CHANGE),2)     AS STDDEV_M1,
//          ROUND(AVG(UNIT_CHANGE)+(STDEV(UNIT_CHANGE)*2),2) AS STDDEV_P2,
//          ROUND(AVG(UNIT_CHANGE)-(STDEV(UNIT_CHANGE)*2),2) AS STDDEV_M2
//   FROM TEMP_MEASURE
//   //where UNIT_CHANGE<=1.5 or UNIT_CHANGE>=-0.55
//   )
  
//   SELECT DATE_WEEK_END_KEY AS DATE_KEY, UNIT_CHANGE, STDDEV_P1, STDDEV_M1, STDDEV_P2, STDDEV_M2, 'Fluctuation Chart' AS GrainFlag
//   FROM TEMP_MEASURE T LEFT JOIN STDDEV_MEASURE ON FLAG=1;
  
// Store VYEPTI_FLUCTUALTION into [$(vStorePathFact)/FACT_ACCOUNT_SALES_WEEKLY_FLUCTUATION$(vSpace).qvd](qvd);

// DROP TABLE VYEPTI_FLUCTUALTION;

///$tab RETAIL_SALES_ANTI_MIGRAINE - //DONE
// FACT_SALES_DAILY:
// Select 
// 	rs.*,
// 	VYEPTI_INCLUSION_IND
// FROM   luinc.fact_retail_sales_anti_migraine rs
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY and MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY','NURTEC','REYVOW','UBRELVY','QULIPTA')
// INNER JOIN luinc.DIM_AGE_GROUP ag
//   			ON ag.AGE_GROUP_KEY = rs.AGE_GROUP_KEY
// WHERE 
//   			pg.MARKET_BASKET_GROUP <> 'VYEPTI'
// 	 	AND   rs.DATE_KEY >= '20200406'	;

// Store FACT_SALES_DAILY into [$(vStorePathFact)/FACT_RETAIL_SALES_ANTI_MIGRAINE$(vSpace).qvd](qvd);
// Drop Table FACT_SALES_DAILY;


///$tab FACT_DIRECT_SALES - //DONE
// FACT_DIRECT_SALES:
// SELECT
// 	F.FACT_KEY,
// 	F.DATE_KEY,
//     F.SHIP_TO_CUSTOMER_KEY as CUSTOMER_KEY,
//     C_S.CUSTOMER_ALIAS,
//     F.FACT_SOURCE_ID,
//     F.LOT_NUMBER,
//     F.ORDER_NUMBER,
//     F.PRODUCT_GROUP_KEY,
//     F.SHIP_TO_CUSTOMER_KEY,
//     F.SHIP_TO_TYPE,
//     F.INVOICE_NUMBER as TRANSACTION_NUMBER,
//     F.INVOICE_NUMBER,
//     UNITS
// FROM LUINC.FACT_DIRECT_SALES F
// INNER JOIN LU_DW.LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
// INNER JOIN LU_DW.LUINC.DIM_CUSTOMER C_S ON C_S.CUSTOMER_KEY = F.SHIP_TO_CUSTOMER_KEY
// where p.BRAND = 'VYEPTI'
// //  AND C_S.CUSTOMER_ALIAS <> 'CURASCRIPT'
// ; 
    

// DAILY_CUSTOMER_ALIAS_CHECK:
// Load Distinct
// 	concat(distinct CUSTOMER_ALIAS,'|',CUSTOMER_ALIAS)			as ALL_CUSTOMER_ALIAS;
// Load Distinct  if(isnull(CUSTOMER_ALIAS),'NULL',CUSTOMER_ALIAS) as CUSTOMER_ALIAS    Resident FACT_DIRECT_SALES;

// vAllCustomerAlias_Daily = Peek('ALL_CUSTOMER_ALIAS');

// Drop table DAILY_CUSTOMER_ALIAS_CHECK; 

// Drop field CUSTOMER_ALIAS from FACT_DIRECT_SALES;

// Store FACT_DIRECT_SALES into [$(vStorePathFact)/FACT_DIRECT_SALES$(vSpace).qvd](qvd);
// Drop Table FACT_DIRECT_SALES;

///$tab FACT_PATIENT_SALES - //DONE
// VYEPTI_FACT_PATIENT_SALES_HQ: 
// SQl Select 
// 		p.SHIPPED_DATE_KEY												as DATE_KEY,
//         p.REFERRAL_DATE_KEY,
// 		p.CUSTOMER_KEY,
//         p.SF3_TERRITORY_KEY,
//         p.PLAN_KEY,
//         p.PRODUCT_GROUP_KEY,
// 		p.PATIENT_KEY,
//         PATIENT_ID,
// 		p.SPECIALTY_PHARMACY,
//         f.PATIENT_STATUS,
//         p.AGE_INCLUSION_IND   as VYEPTI_INCLUSION_IND,
//         CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END as 'DOSE', 
//         count(distinct p.FACT_KEY)										as SHIPMENTS,
//         Sum(p.QTY_DISPENSED) 												as 'Norm. Units',
//         p.BENEFIT_TYPE,
//         p.HOME_INFUSION_DATE_KEY,
// 		p.HOME_INFUSION_IND,
//         rank() over(partition by p.CUSTOMER_KEY,p.HOME_INFUSION_IND order by p.SHIPPED_DATE_KEY)  Ranks,
//         rank() over(partition by p.PATIENT_KEY,f.HOME_INFUSION_ENRL_IND order by p.SHIPPED_DATE_KEY)  First_Infusion_Flag,
//         rank() over(partition by p.PATIENT_KEY,f.HOME_INFUSION_ENRL_IND, f.HOME_INFUSION_CURRENT_IND order by p.SHIPPED_DATE_KEY)  New_First_Infusion_Flag
// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
//     inner join LUINC.DIM_PATIENT dpt on dpt.PATIENT_KEY=p.PATIENT_KEY
//     inner join LUINC.FACT_PATIENT_SNAPSHOT f on f.PATIENT_KEY=p.PATIENT_KEY
// where dp.PRODUCT_NAME='Vyepti' And p.RX_TYPE='STANDARD' 
// and p.SPECIALTY_PHARMACY IN ('ORSINI','WALGREENS')
// // and ISNULL(PATIENT_SOURCE,'Y') <> 'PARAGON'
// group by 
//  	p.SHIPPED_DATE_KEY,
//     p.CUSTOMER_KEY,
//     p.PRODUCT_GROUP_KEY,
//     p.PATIENT_KEY,
//     p.SF3_TERRITORY_KEY,
//     PATIENT_ID,
//         f.PATIENT_STATUS,
//     p.SPECIALTY_PHARMACY,
//     CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END,
//     p.REFERRAL_DATE_KEY,
//     p.PLAN_KEY,
//     p.AGE_INCLUSION_IND,
//     p.BENEFIT_TYPE,
//     p.HOME_INFUSION_DATE_KEY,
//     p.HOME_INFUSION_IND,
//     f.HOME_INFUSION_ENRL_IND,
//     f.HOME_INFUSION_CURRENT_IND;
    
//     Left Join(VYEPTI_FACT_PATIENT_SALES_HQ)
// SQl Select 
// 		p.PATIENT_KEY,
//         count(distinct SHIPPED_DATE_KEY)							SHIPMENTS_INFUSIONS
// from LUINC.FACT_PATIENT_SALES p
// inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// where dp.PRODUCT_NAME='Vyepti' And RX_TYPE='STANDARD' 
// group by p.PATIENT_KEY;

// Left Join(VYEPTI_FACT_PATIENT_SALES_HQ)
// SQl Select 
// 		p.PATIENT_KEY,
//         p.SHIPPED_DATE_KEY as DATE_KEY,
//         p.PRODUCT_GROUP_KEY,
//         NEW_UNITS_FLAG
// from LUINC.FACT_PATIENT_SALES p
//     inner join (
//     select PATIENT_KEY,
//     min(SHIPPED_DATE_KEY) as MinDATE,
//     'Y' as NEW_UNITS_FLAG
//     from LUINC.FACT_PATIENT_SALES f
//     inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
//     where 
// 		dp.PRODUCT_NAME='Vyepti'
//     group by
//     PATIENT_KEY
//     ) t on t.PATIENT_KEY=p.PATIENT_KEY and t.MinDATE=p.SHIPPED_DATE_KEY
// where RX_TYPE='STANDARD' 
// group by 
//  	p.PATIENT_KEY,
//     p.SHIPPED_DATE_KEY,
//     p.PRODUCT_GROUP_KEY,NEW_UNITS_FLAG;

// Left Join(VYEPTI_FACT_PATIENT_SALES_HQ)
// SQl Select PATIENT_KEY, HOME_INFUSION_ENRL_IND, HOME_INFUSION_CURRENT_IND
// from LUINC.FACT_PATIENT_SNAPSHOT;

// Left Join(VYEPTI_FACT_PATIENT_SALES_HQ)
// SQl Select 
// 		p.PATIENT_KEY,
//         count(distinct HOME_INFUSION_DATE_KEY)							HOME_INFUSIONS_SHIPMENTS
// from LUINC.FACT_PATIENT_SALES p
// inner join LUINC.FACT_PATIENT_SNAPSHOT F on F.PATIENT_KEY = p.PATIENT_KEY
// inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// where dp.PRODUCT_NAME='Vyepti' And p.RX_TYPE='STANDARD' 
// And HOME_INFUSION_DATE_KEY is NOT NULL And F.HOME_INFUSION_ENRL_IND = 'Y' 
// // and ISNULL(F.PATIENT_SOURCE,'Y') <> 'PARAGON'
// and p.SPECIALTY_PHARMACY IN ('ORSINI','WALGREENS')
// group by p.PATIENT_KEY;

// Store VYEPTI_FACT_PATIENT_SALES_HQ into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_SALES_HQ$(vSpace).qvd](qvd); Drop Table VYEPTI_FACT_PATIENT_SALES_HQ;

///$tab FACT_ASOC_DISPENSE - // DONE
VYEPTI_FACT_ASOC_DISPENSE_HQ: 
SQl Select 
		p.DISPENSE_DATE_KEY												as DATE_KEY,
        CONCAT(P.PATIENT_KEY,P.DISPENSE_DATE_KEY) AS F_KEY,
        P.ASOC_PATIENT_ID,
        replace(P.PATIENT_SOURCE,' ', '') as PATIENT_SOURCE,
        p.REFERRAL_DATE_KEY,
		p.CUSTOMER_KEY,
        p.SF3_TERRITORY_KEY,
        p.PRIMARY_PLAN_KEY AS PLAN_KEY,
        p.PRODUCT_GROUP_KEY,
		p.PATIENT_KEY,
        PATIENT_ID,
        RANK() OVER (PARTITION BY P.PATIENT_KEY ORDER BY DISPENSE_DATE_KEY) AS SHIPMENT_OCCOURENCE,
		replace(P.PATIENT_SOURCE,' ', '') AS SPECIALTY_PHARMACY,
        f.PATIENT_STATUS,
        CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END as 'DOSE', 
        count(distinct p.FACT_KEY)										as SHIPMENTS,
        Sum(p.QTY_DISPENSED) 												as 'Norm. Units',
        isnull(PRIMARY_BENEFIT_TYPE, SECONDARY_BENEFIT_TYPE) AS BENEFIT_TYPE
from LUINC.FACT_ASOC_DISPENSE p
	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
    inner join LUINC.DIM_PATIENT dpt on dpt.PATIENT_KEY=p.PATIENT_KEY
    LEFT join LUINC.FACT_PATIENT_SNAPSHOT f on f.PATIENT_KEY=p.PATIENT_KEY AND replace(P.PATIENT_SOURCE,' ', '') = replace(f.PATIENT_SOURCE,' ', '')
where dp.PRODUCT_NAME='Vyepti'
and REPLACE(p.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
group by 
	P.DISPENSE_DATE_KEY,
    p.CUSTOMER_KEY,
    p.PRODUCT_GROUP_KEY,
    p.PATIENT_KEY,
    p.SF3_TERRITORY_KEY,
    PATIENT_ID,
        f.PATIENT_STATUS,
    CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END,
    p.REFERRAL_DATE_KEY,
    p.PRIMARY_PLAN_KEY,
    P.ASOC_PATIENT_ID,
    P.PATIENT_SOURCE,
    isnull(PRIMARY_BENEFIT_TYPE, SECONDARY_BENEFIT_TYPE);
    
    Left Join(VYEPTI_FACT_ASOC_DISPENSE_HQ)
LOAD 
PATIENT_KEY,
SHIPMENTS_INFUSIONS;
SQl Select 
		p.PATIENT_KEY,
        count(distinct DISPENSE_DATE_KEY)							SHIPMENTS_INFUSIONS
from LUINC.FACT_ASOC_DISPENSE p
inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
where dp.PRODUCT_NAME='Vyepti'
AND REPLACE(p.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
group by p.PATIENT_KEY;

Left Join(VYEPTI_FACT_ASOC_DISPENSE_HQ)
LOAD PATIENT_KEY&DATE_KEY AS F_KEY,
NEW_UNITS_FLAG;
SQl Select 
		p.PATIENT_KEY,
        p.DISPENSE_DATE_KEY as DATE_KEY,
        NEW_UNITS_FLAG
from LUINC.FACT_ASOC_DISPENSE p
    inner join (
    select PATIENT_KEY,
    min(DISPENSE_DATE_KEY) as MinDATE,
    'Y' as NEW_UNITS_FLAG
    from LUINC.FACT_ASOC_DISPENSE f
    inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
    where 
		dp.PRODUCT_NAME='Vyepti'
        AND REPLACE(F.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
    group by
    PATIENT_KEY
    ) t on t.PATIENT_KEY=p.PATIENT_KEY and t.MinDATE=p.DISPENSE_DATE_KEY
where REPLACE(p.patient_source, ' ', '') in ('PARAGON','IVXHEALTH','VITALCARE', 'OPTIONCARE')
group by 
 	p.PATIENT_KEY,
    p.DISPENSE_DATE_KEY,
	NEW_UNITS_FLAG
;


Store VYEPTI_FACT_ASOC_DISPENSE_HQ into [$(vStorePathFact)/VYEPTI_FACT_ASOC_DISPENSE_HQ$(vSpace).qvd](qvd); Drop Table VYEPTI_FACT_ASOC_DISPENSE_HQ;

NoConcatenate
FACT:
select f.*, P.PATIENT_ID
from luinc.fact_patient_snapshot f
INNER JOIN LUINC.DIM_PRODUCT_GROUP PG ON PG.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
INNER JOIN LUINC.DIM_PATIENT P ON P.PATIENT_KEY = F.PATIENT_KEY
INNER JOIN luinc.dim_clndr Cal on Cal.Date_key=f.enrollment_date_key
where 
PRODUCT_NAME = 'VYEPTI'
and REPLACE(f.PATIENT_SOURCE, ' ', '') in ('PARAGON', 'VITALCARE', 'OPTIONCARE', 'IVXHEALTH')
// and patient_status_detail not in ('ALREADY ON THERAPY WITH SP' ,'BUY AND BILL','OUT OF NETWORK','REDIRECT TO OTHER SP')
AND PATIENT_STATUS NOT IN ('PENDING')
;

Left Join(FACT) 

select DISTINCT F.PATIENT_KEY, F.PATIENT_SOURCE, 'Y' as SP_CONVERSION_FLAG
from luinc.fact_patient_snapshot f
INNER JOIN LUINC.DIM_PRODUCT_GROUP PG ON PG.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
INNER JOIN luinc.FACT_ASOC_DISPENSE P on P.Patient_KEY=f.PATIENT_KEY AND REPLACE(f.PATIENT_SOURCE, ' ', '') = REPLACE(P.PATIENT_SOURCE, ' ', '')
INNER JOIN luinc.dim_clndr Cal on Cal.Date_key=f.enrollment_date_key
where 
PRODUCT_NAME = 'VYEPTI'
and REPLACE(f.PATIENT_SOURCE, ' ', '') in ('PARAGON', 'VITALCARE', 'OPTIONCARE', 'IVXHEALTH')
// and patient_status_detail not in ('ALREADY ON THERAPY WITH SP' ,'BUY AND BILL','OUT OF NETWORK','REDIRECT TO OTHER SP')
AND PATIENT_STATUS NOT IN ('PENDING')
;


DROP FIELD SOURCE, PATIENT_KEY;
Store FACT into [$(vStorePathFact)/VYEPTI_FACT_ASOC_DISPENSE_CONVERSION_HQ$(vSpace).qvd](qvd); Drop Table FACT;
///$tab VYEPTI_FACT_FORECAST_WEEKLY - //DONE
// VYEPTI_FACT_FORECAST_WEEKLY:
// Select 
// 	f.* 
// FROM LUINC.FACT_FORECAST_WEEKLY f
// 	inner join LUINC.DIM_PRODUCT_GROUP pg 
//     	ON pg.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY  

// where pg.PRODUCT_NAME='VYEPTI'
// ;

// Store VYEPTI_FACT_FORECAST_WEEKLY into [$(vStorePathFact)/VYEPTI_FACT_FORECAST_WEEKLY$(vSpace).qvd](qvd);
// Drop Table VYEPTI_FACT_FORECAST_WEEKLY;
 


// VYEPTI_FACT_FORECAST_MONTHLY:
// Select 
// 	f.* 
// FROM LUINC.FACT_FORECAST_MONTHLY f
// 	inner join LUINC.DIM_PRODUCT_GROUP pg 
//     	ON pg.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY  

// where pg.PRODUCT_NAME='VYEPTI'
// ;

// Store VYEPTI_FACT_FORECAST_MONTHLY into [$(vStorePathFact)/VYEPTI_FACT_FORECAST_MONTHLY$(vSpace).qvd](qvd);
// Drop Table VYEPTI_FACT_FORECAST_MONTHLY;
 

///$tab Fact National Sales - //DONE
// FACT_NATIONAL_NON_RETAIL_WEEKLY:
// Select
// 	nsp.FACT_KEY,
//     nsp.DATE_KEY,
//     nsp.CLASS_OF_TRADE_KEY,
//     nsp.PRODUCT_GROUP_KEY,
//     nsp.STRENGTH_UNITS,
//     nsp.NORMALIZED_TRX,
//     nsp.SALES_DOLLARS,
//     nsp.UNITS
// FROM LUINC.FACT_NATIONAL_NON_RETAIL_WEEKLY nsp,
//      LUINC.DIM_MB_VYEPTI_SA pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CLASS_OF_TRADE cld
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI' and  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY')
//       AND (nsp.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsp.DATE_KEY = clndr.DATE_KEY)
//       AND (nsp.CLASS_OF_TRADE_KEY = cld.CLASS_OF_TRADE_KEY);
// ;

// Store FACT_NATIONAL_NON_RETAIL_WEEKLY into [$(vStorePathFact)/FACT_NATIONAL_NON_RETAIL_WEEKLY$(vSpace).qvd](qvd);
// Drop Table FACT_NATIONAL_NON_RETAIL_WEEKLY;

// FACT_NATIONAL_SALES_WEEKLY:
// SELECT 
// 	   nsa.FACT_KEY,
// 	   nsa.PRODUCT_GROUP_KEY,
//        nsa.CHANNEL_KEY,
// 	   nsa.DATE_KEY,
//        nsa.NORMALIZED_TRX,
//        nsa.NRX,
//        nsa.TRX,
//        nsa.NBRX,
//        nsa.N_QTY,
//        nsa.T_QTY,
//        nsa.SPECIALTY
// FROM LUINC.FACT_NATIONAL_SALES_WEEKLY nsa,
//      LUINC.DIM_MB_VYEPTI_SA pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CHANNEL ch
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI' and  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY','NURTEC','REYVOW','UBRELVY','QULIPTA')
//       AND (nsa.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsa.DATE_KEY = clndr.DATE_KEY)
//       AND (nsa.CHANNEL_KEY = ch.CHANNEL_KEY);
      
// Store FACT_NATIONAL_SALES_WEEKLY into [$(vStorePathFact)/FACT_NATIONAL_SALES_WEEKLY$(vSpace).qvd](qvd);
// Drop Table FACT_NATIONAL_SALES_WEEKLY;

 


///$tab Fact Inventory - // DONE
// INVENTORY_DAILY:
// SQL SELECT 
// FACT_KEY,
// DATE_KEY,
// I.CUSTOMER_KEY,
// C_S.CUSTOMER_ALIAS,
// CALC_STARTING_INVTRY,
// UNITS_SHIPPED,
// UNITS_RCVD,
// UNITS_TRNSFRD_IN,
// UNITS_TRNSFRD_OUT,
// CALC_ENDING_INVTRY,
// DAYS_ON_HAND,
// 'Inventory_Daily' as GrainFlag
// FROM LUINC.FACT_SP_SD_INVTRY_DAILY I
// INNER JOIN LU_DW.LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY = I.PRODUCT_GROUP_KEY
// INNER JOIN LU_DW.LUINC.DIM_CUSTOMER C_S ON C_S.CUSTOMER_KEY = I.CUSTOMER_KEY
// where p.BRAND = 'VYEPTI' and C_S.CUSTOMER_ALIAS <> 'UNKNOWN';

// DAILY_INVENTORY_ALIAS_CHECK:
// Load Distinct
// 	concat(distinct CUSTOMER_ALIAS,'|',CUSTOMER_ALIAS)			as ALL_CUSTOMER_ALIAS;
// Load Distinct    
// if(isnull(CUSTOMER_ALIAS),'NULL',CUSTOMER_ALIAS) as CUSTOMER_ALIAS    
// Resident INVENTORY_DAILY;

// vAllCustomerAlias_Dailyinv = Peek('ALL_CUSTOMER_ALIAS');

// Drop table DAILY_INVENTORY_ALIAS_CHECK; 

// Drop field CUSTOMER_ALIAS from INVENTORY_DAILY;

// Store INVENTORY_DAILY into [$(vStorePathFact)/FACT_INVENTORY_DAILY$(vSpace).qvd](qvd);

// DROP TABLE INVENTORY_DAILY;

// INVENTORY_MONTHLY:
// SQL SELECT 
// FACT_KEY,
// I.CUSTOMER_KEY,
// INVTRY_START_DATE_KEY,
// C_S.CUSTOMER_ALIAS,
// UNITS_SHIPPED,
// UNITS_RCVD,
// UNITS_TRNSFRD_IN,
// UNITS_TRNSFRD_OUT,
// CALC_ENDING_INVTRY,
// DAYS_ON_HAND,
// 'Inventory_Monthly' as GrainFlag
// FROM LUINC.FACT_SP_SD_INVTRY_MONTHLY I
// INNER JOIN LU_DW.LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY = I.PRODUCT_GROUP_KEY
// INNER JOIN LU_DW.LUINC.DIM_CUSTOMER C_S ON C_S.CUSTOMER_KEY = I.CUSTOMER_KEY
// where p.BRAND = 'VYEPTI' and C_S.CUSTOMER_ALIAS <> 'UNKNOWN';


// MONTHLY_INVENTORY_ALIAS_CHECK:
// Load Distinct
// 	concat(distinct CUSTOMER_ALIAS,'|',CUSTOMER_ALIAS)			as ALL_CUSTOMER_ALIAS;
// Load Distinct    
// if(isnull(CUSTOMER_ALIAS),'NULL',CUSTOMER_ALIAS) as CUSTOMER_ALIAS    
// Resident INVENTORY_MONTHLY;

// vAllCustomerAlias_Monthlyinv = Peek('ALL_CUSTOMER_ALIAS');

// Drop table MONTHLY_INVENTORY_ALIAS_CHECK; 

// Drop field CUSTOMER_ALIAS from INVENTORY_MONTHLY;

// Store INVENTORY_MONTHLY into [$(vStorePathFact)/FACT_INVENTORY_MONTHLY$(vSpace).qvd](qvd);

// DROP TABLE INVENTORY_MONTHLY;
///$tab FRS Facts- // DONE
// NoConcatenate
// FACT_FRS_INTRACTN_RESOURCE:
// Select
// f.*,
// ZT.FRS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
// from Luinc.FACT_FRS_INTRACTN_RESOURCE f
// Inner Join LUINC.DIM_PRODUCT_GROUP p ON P.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FRS ZT on ZT.ZIP=F.CUSTOMER_ZIP and CURRENT_IND='Y'
// where p.BRAND = 'VYEPTI';

// Store FACT_FRS_INTRACTN_RESOURCE into [$(vStorePathFact)/FACT_FRS_INTRACTN_RESOURCE$(vSpace).qvd](qvd);

// Drop Table FACT_FRS_INTRACTN_RESOURCE;


// NoConcatenate
// FACT_FRS_INTRACTN_ACTIVITY:
// SELECT F.*, DUPLICATE_FLAG,  DUP.CONTACT_SOURCE_ID AS UPDATED_CONTACT_SOURCE_ID, INTRACTN_RESOURCE_KEY,
// F.FRS_TERRITORY_KEY as FRS_ZIP_TO_TERRITORY_KEY
// FROM LUINC.FACT_FRS_INTRACTN_ACTIVITY F
// LEFT JOIN LUINC.FACT_ZIP_TO_TERRITORY_FRS ZT on ZT.ZIP=F.CUSTOMER_ZIP and CURRENT_IND='Y'
// INNER JOIN LUINC.DIM_PRODUCT_GROUP P ON P.PRODUCT_GROUP_KEY = F.PRODUCT_GROUP_KEY
// LEFT JOIN LUINC.FACT_FRS_INTRACTN_RESOURCE IR ON IR.FACT_SOURCE_ID=F.FACT_SOURCE_ID 
// LEFT JOIN (
// SELECT INTRACTN_DATE_KEY, ACCOUNT_CUSTOMER_KEY, FRS_INTRACTN_TYPE_KEY, FRS_TERRITORY_KEY, ISNULL(F.CONTACT_SOURCE_ID,F.CUSTOMER_SOURCE_ID) AS CONTACT_SOURCE_ID, COUNT(DISTINCT INTRACTN_ID)  AS INTERACTION_COUNT,'Y' AS DUPLICATE_FLAG
// FROM LUINC.FACT_FRS_INTRACTN_ACTIVITY F
// WHERE INTRACTN_DATE_KEY>=20210901
// GROUP BY INTRACTN_DATE_KEY, ACCOUNT_CUSTOMER_KEY, FRS_INTRACTN_TYPE_KEY, FRS_TERRITORY_KEY, ISNULL(F.CONTACT_SOURCE_ID,F.CUSTOMER_SOURCE_ID)
// HAVING COUNT(DISTINCT INTRACTN_ID)>=2
// ) DUP ON DUP.INTRACTN_DATE_KEY=F.INTRACTN_DATE_KEY AND DUP.ACCOUNT_CUSTOMER_KEY=F.ACCOUNT_CUSTOMER_KEY AND
//          DUP.FRS_INTRACTN_TYPE_KEY=F.FRS_INTRACTN_TYPE_KEY AND DUP.FRS_TERRITORY_KEY=F.FRS_TERRITORY_KEY AND DUP.CONTACT_SOURCE_ID=ISNULL(F.CONTACT_SOURCE_ID,F.CUSTOMER_SOURCE_ID)
// WHERE P.BRAND = 'VYEPTI'
// ;

// Store FACT_FRS_INTRACTN_ACTIVITY into [$(vStorePathFact)/FACT_FRS_INTRACTN_ACTIVITY$(vSpace).qvd](qvd);

// Drop Table FACT_FRS_INTRACTN_ACTIVITY;




///$tab Patient Case - // DONE
// VYEPTI_FACT_PATIENT_CASE:
// Select 
//     FACT_KEY,
//     DATE_KEY,
//     CASE_OPEN_DATE_KEY,
//     CASE_CLOSED_DATE_KEY,
//     STATUS_CHG_DATE_KEY,
//     SHIPPED_DATE_KEY,
//     CUSTOMER_KEY,
//     BRAND_KEY,
//     s.PRODUCT_GROUP_KEY,
//     PATIENT_KEY,
//     SF1_TERRITORY_KEY,
//     SF2_TERRITORY_KEY,
//     SF3_TERRITORY_KEY,
//     CASE_NUMBER,
//     CASE_TYPE,
//     CASE_DETAIL,
//     PATIENT_STATUS,
//     PATIENT_STATUS_DETAIL,
//     CUSTOMER_SOURCE_ID,
//     FACT_SOURCE_ID,
//     SOURCE,
//     FULFILLMENT_TYPE,
//     SITE_TYPE,
//     BENEFIT_TYPE,
//     ENROLLMENT_DATE_KEY
// from LUINC.FACT_PATIENT_CASE s
// INNER JOIN LUINC.DIM_PRODUCT_GROUP p
// ON p.PRODUCT_GROUP_KEY = s.PRODUCT_GROUP_KEY
// where p.BRAND = 'VYEPTI'
// ;

// Store VYEPTI_FACT_PATIENT_CASE into [$(vStorePathFact)/VYEPTI_FACT_PATIENT_CASE$(vSpace).qvd](qvd);
// Drop Table VYEPTI_FACT_PATIENT_CASE;

///$tab ----Facts----------

///$tab VAP: SP Sales - // DONE
// // If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

// NoConcatenate
// [FACT_RETAIL_SALES_ANTI_MIGRAINE]:
// SELECT 
// 	rs.FACT_KEY,
//     DATE_KEY,
//     rs.CUSTOMER_KEY as CUSTOMER_KEY ,
//     rs.CUSTOMER_KEY    as CUSTOMER_KEY_TEMP,
//     rs.PRODUCT_GROUP_KEY,
//     PLAN_KEY,
//     SF1_TERRITORY_KEY,
//     SF2_TERRITORY_KEY,
// 	SF3_TERRITORY_KEY,
//     VYEPTI_INCLUSION_IND,
//     sum(TRX)						as TRx,
//     sum(NRX)						as NRx,
//     sum(NORMALIZED_TRX)				as "Norm. Units",
//     sum(NORMALIZED_NRX)				as "Norm. NRx Units",
//     'Retail Sales'                  as SRC
// FROM   luinc.fact_retail_sales_anti_migraine rs
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY and MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY', 'NURTEC', 'UBRELVY', 'REYVOW', 'QULIPTA')
// INNER JOIN luinc.DIM_AGE_GROUP ag
//   			ON ag.AGE_GROUP_KEY = rs.AGE_GROUP_KEY
// INNER JOIN luinc.DIM_CUSTOMER cust
//   			On cust.CUSTOMER_KEY = rs.CUSTOMER_KEY
// WHERE 
//   			pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//   		AND   ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// 		AND   cust.CUSTOMER_TYPE = 'HCP'
// 	 	AND   rs.DATE_KEY >= '20200406'	
// GROUP BY 
//        rs.FACT_KEY,
//        rs.CUSTOMER_KEY
// ,      rs.SF1_TERRITORY_KEY
// ,      rs.SF2_TERRITORY_KEY
// ,      rs.SF3_TERRITORY_KEY
// ,      rs.PLAN_KEY
// ,      rs.DATE_KEY
// ,		VYEPTI_INCLUSION_IND
// ,      rs.PRODUCT_GROUP_KEY;
  
// Concatenate(FACT_RETAIL_SALES_ANTI_MIGRAINE)
// SQl Select 
// 		SHIPPED_DATE_KEY												as DATE_KEY,
//         SHIPPED_DATE_KEY as "SHIPPED DATE",
// 		c.CUSTOMER_KEY       as CUSTOMER_KEY,
//         c.CUSTOMER_KEY    as CUSTOMER_KEY_TEMP,
// 		p.PRODUCT_GROUP_KEY,
// 		p.PATIENT_KEY,
//         PATIENT_ID,
// 		p.PLAN_KEY,
// 		p.SF1_TERRITORY_KEY,
// 		p.SF2_TERRITORY_KEY,
// 		p.SF3_TERRITORY_KEY,
//         AGE_INCLUSION_IND   as VYEPTI_INCLUSION_IND,
// 		p.SPECIALTY_PHARMACY,
// 		Sum(p.TRX) 														as TRX,
//         Sum(QTY_DISPENSED) 												as 'Norm. Units',
//         //CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END as 'DOSE',
//        'Patient Sales'                  as SRC
// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// 	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
// 	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY
//     INNER JOIN LUINC.DIM_PATIENT Pat on Pat.PATIENT_KEY=p.PATIENT_KEY
// where 
// 		dp.LU_PRODUCT_FLAG = 'Y' 
//  AND   dp.PRODUCT_NAME='VYEPTI'					
//  AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//  AND 	(p.NEW_PATIENT IS NULL OR p.RESTART_PATIENT IS NULL) 
//  AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
//  And 	RX_TYPE='STANDARD' 
//   AND    p.SHIPPED_DATE_KEY >= '20200406'
//  group by 
//  	SHIPPED_DATE_KEY,
//     c.CUSTOMER_KEY,
//     p.PRODUCT_GROUP_KEY,
//     p.PATIENT_KEY,
//     p.PLAN_KEY,
//     p.SF1_TERRITORY_KEY,
//     p.SF2_TERRITORY_KEY,
//     p.SF3_TERRITORY_KEY,
//     AGE_INCLUSION_IND,
//     PATIENT_ID,
//     //CASE p.QTY_DISPENSED WHEN 1 THEN '100 mg' WHEN 2 Then '200 mg' WHEN 3 Then '300 mg' ELSE 'Other' END,
//     p.SPECIALTY_PHARMACY;
   
// LEFT JOin(FACT_RETAIL_SALES_ANTI_MIGRAINE)  
// LOad Distinct CUSTOMER_KEY,
// 	ALL_PACCOUNT_KEYS, 
//     ALL_ACCOUNT_KEYS 
// Resident AFFILIATION_CUST_TO_ACCT;

// Store FACT_RETAIL_SALES_ANTI_MIGRAINE into [$(vStorePathFact)/FACT_VAP_HCPs_SP_SALES$(vSpace).qvd](qvd);

// // Else

// // NoConcatenate
// // FACT_RETAIL_SALES_ANTI_MIGRAINE:
// // Load * from [$(vStorePathFact)/FACT_VAP_HCPs_SP_SALES$(vSpace).qvd](qvd);

// // End if



///$tab VAP: Call Activity - // DONE
// FACT_CALL:
// Select FACT_KEY,
// 	ca.CALL_DATE_KEY,
//     ca.CUSTOMER_KEY,
//     ca.PRODUCT_GROUP_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     ca.TERRITORY_KEY,
//     sum(PDE) AS PDE
// FROM luinc.FACT_CALL_ACTIVITY ca
// INNER JOIN luinc.DIM_BRAND b
//   			ON b.BRAND_KEY = ca.BRAND_KEY
//   			AND b.BRAND = 'VYEPTI'
// INNER JOIN luinc.DIM_CUSTOMER c
//   			ON c.CUSTOMER_KEY = ca.CUSTOMER_KEY
//   			AND ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
// INNER JOIN luinc.DIM_CLNDR cal
//  			ON cal.date_key = ca.CALL_DATE_KEY
// INNER JOIN luinc.DIM_TERRITORY t
//  			ON t.TERRITORY_KEY = ca.TERRITORY_KEY
//  			AND t.SALESFORCE_GROUP_NAME in ('MERIDIAN')
// WHERE t.FRANCHISE = 'NRO' and CALL_DATE_KEY>=20200406
// and 	RECORD_TYPE <> 'Logistical Touchpoint'
// and 	ca.CUSTOMER_KEY <> 0 and CALL_TYPE <> '$(vReactiveCalls)'
// GROUP BY FACT_KEY,
// 	ca.CALL_DATE_KEY,
//     ca.CUSTOMER_KEY,
//     ca.PRODUCT_GROUP_KEY,
//     ca.TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE
//     ;

// LEFT JOin(FACT_CALL)  
// Load Distinct
// 	CUSTOMER_KEY, 
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_CUST_TO_ACCT;

// NoConcatenate
// FACT_CALL_HCP:
// Load FACT_KEY,
// 	CALL_DATE_KEY,
//     CUSTOMER_KEY,
//     PRODUCT_GROUP_KEY,
//     TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     PDE,
//     Coalesce(ALL_ACCOUNT_KEYS, 0)          	as  ALL_ACCOUNT_KEYS,
//     Coalesce(ALL_PACCOUNT_KEYS, 0)          	as  ALL_PACCOUNT_KEYS
// Resident FACT_CALL;

// Drop Table FACT_CALL;

// Store FACT_CALL_HCP into [$(vStorePathFact)/FACT_VAP_CALL_ACTIVITY$(vSpace).qvd](qvd);
// //Drop Table FACT_CALL;

// NoConcatenate
// TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCO:
// Select ca.FACT_KEY,
// 	ca.CALL_DATE_KEY,
//     ca.HCO_CUSTOMER_KEY as ACCOUNT_KEY,
//     ca.PRODUCT_GROUP_KEY,
//     ca.TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     sum(PDE)							as PDE
// FROM luinc.FACT_CALL_ACTIVITY ca
// INNER JOIN luinc.DIM_BRAND b
//   			ON b.BRAND_KEY = ca.BRAND_KEY
//   			AND b.BRAND = 'VYEPTI'
// INNER JOIN luinc.DIM_CUSTOMER c
//   			ON c.CUSTOMER_KEY = ca.CUSTOMER_KEY
//   			AND ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = ca.PRODUCT_GROUP_KEY
// INNER JOIN luinc.DIM_CLNDR cal
//  			ON cal.date_key = ca.CALL_DATE_KEY
// INNER JOIN luinc.DIM_TERRITORY t
//  			ON t.TERRITORY_KEY = ca.TERRITORY_KEY
//  			AND t.SALESFORCE_GROUP_NAME in ('MERIDIAN')
// WHERE t.FRANCHISE = 'NRO' and CALL_DATE_KEY>=20200406
// and 	RECORD_TYPE <> 'Logistical Touchpoint'
// and 	ca.CUSTOMER_KEY <> 0
// and 	ca.HCO_CUSTOMER_KEY <> 0
// and CALL_TYPE <> '$(vReactiveCalls)'
// GROUP BY ca.FACT_KEY,
// 	ca.CALL_DATE_KEY,
//     ca.HCO_CUSTOMER_KEY,
//     ca.PRODUCT_GROUP_KEY,
//     ca.TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE
// ;

// INNER JOIN (TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCO)
// Load 
// 	ACCOUNT_KEY, 
// 	ALL_CUSTOMER_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_ACCT_TO_CUST;

// NoConcatenate
// TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCP:
// Load FACT_KEY,
//     CALL_DATE_KEY,
//     CUSTOMER_KEY as ACCOUNT_KEY,
//     PRODUCT_GROUP_KEY,
//     TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     PDE
// Resident FACT_CALL_HCP;

// INNER JOIN (TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCP)
// LOad  ACCOUNT_KEY, 
// 	ALL_CUSTOMER_KEYS, 
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_ACCT_TO_CUST;

// NoConcatenate
// FACT_ACCOUNT_CALL_ACTIVITY:
// Load FACT_KEY,
//     CALL_DATE_KEY,
//     ACCOUNT_KEY,
//     Coalesce(ALL_CUSTOMER_KEYS, 0)         as ALL_CUSTOMER_KEYS,
//     ALL_PACCOUNT_KEYS,
//     PRODUCT_GROUP_KEY,
//     TERRITORY_KEY,	
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     PDE,
//     'HCO' as SOURCE
// Resident TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCO
// where TERRITORY_KEY <> 0;
// Drop table TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCO;



// //Drop Table FACT_CALL;

// Concatenate(FACT_ACCOUNT_CALL_ACTIVITY)
// Load FACT_KEY,
//     CALL_DATE_KEY,
//     ACCOUNT_KEY,
//     Coalesce(ALL_CUSTOMER_KEYS, 0)         as ALL_CUSTOMER_KEYS,
//     ALL_PACCOUNT_KEYS,
//     PRODUCT_GROUP_KEY,
//     TERRITORY_KEY,
//     INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//     PDE,
//     'HCP' as SOURCE
// Resident TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCP;
// Drop table TEMP_FACT_ACCOUNT_CALL_ACTIVITY_HCP;
    
// Store FACT_ACCOUNT_CALL_ACTIVITY into [$(vStorePathFact)/VYEPTI_FACT_VAP_ACCOUNT_CALL_ACTIVITY$(vSpace).qvd](qvd);

// //Parent Account Key
// NoConcatenate
// FACT_PARENT_ACCOUNT_CALL_ACTIVITY:
// LOAD FACT_KEY,
// 	 CALL_DATE_KEY,
//      ALL_PACCOUNT_KEYS as PARENT_ACCOUNT_KEY,
//      PRODUCT_GROUP_KEY,
//      TERRITORY_KEY,
//      INTERACTION_TYPE,
// 	RECORD_TYPE,
// 	CALL_TYPE,
// 	REPORT_CALL_TYPE,
//      //SUM(PDE) as
//      PDE,
//      SOURCE
// RESIDENT FACT_ACCOUNT_CALL_ACTIVITY

// ;

// DROP TABLE FACT_ACCOUNT_CALL_ACTIVITY;

// INNER JOIN (FACT_PARENT_ACCOUNT_CALL_ACTIVITY)
// LOad  PARENT_ACCOUNT_KEY,
// 	ALL_CUSTOMER_KEYS, 
//     ALL_ACCOUNT_KEYS
// Resident AFFILIATION_PACCT_TO_CUST_ACCOUNT;

// Store FACT_PARENT_ACCOUNT_CALL_ACTIVITY into [$(vStorePathFact)/VYEPTI_FACT_VAP_PARENT_ACCOUNT_CALL_ACTIVITY$(vSpace).qvd](qvd);

// DROP TABLE FACT_PARENT_ACCOUNT_CALL_ACTIVITY;



///$tab VAP: Account Sales Affiliation - // DONE
// // If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

// FACT_ACCOUNT_SALES_DAILY:
// Select 
// 	f.*,
//     c.CUSTOMER_ALIAS,
//     cust.CUSTOMER_TYPE,
//     ACCOUNT_KEY as ACCOUNT_KEY_TEMP
// FROM LUINC.FACT_ACCOUNT_SALES f
// inner join LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY
// INNER JOIN LUINC.DIM_MB_VYEPTI_SA SA on SA.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_CUSTOMER c on c.
// CUSTOMER_KEY = f.SHIP_FROM_CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER cust on cust.CUSTOMER_KEY = f.CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER acct on acct.CUSTOMER_KEY=f.ACCOUNT_KEY
// where p.BRAND = 'VYEPTI' 
// and ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG,'N')<>'Y'
// AND ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// //and cust.CUSTOMER_TYPE='HCP'
// ;

// ACCOUNT_CUSTOMER_ALIAS_CHECK:
// Load Distinct
// 	concat(distinct CUSTOMER_ALIAS,'|',CUSTOMER_ALIAS)			as ALL_CUSTOMER_ALIAS;
// Load Distinct    
// if(isnull(CUSTOMER_ALIAS),'NULL',CUSTOMER_ALIAS) as CUSTOMER_ALIAS
// Resident FACT_ACCOUNT_SALES_DAILY;

// vAllCustomerAlias_Account = Peek('ALL_CUSTOMER_ALIAS');

// Drop table ACCOUNT_CUSTOMER_ALIAS_CHECK; 

// Drop field CUSTOMER_ALIAS from FACT_ACCOUNT_SALES_DAILY;

// LEFT JOin(FACT_ACCOUNT_SALES_DAILY)  
// LOad Distinct ALL_PACCOUNT_KEYS, ACCOUNT_KEY, ALL_CUSTOMER_KEYS
// Resident AFFILIATION_ACCT_TO_CUST;

// Store [FACT_ACCOUNT_SALES_DAILY] into [$(vStorePathFact)/FACT_VAP_ACCOUNT_SALES_DAILY$(vSpace).qvd](qvd);

// Drop Table [FACT_ACCOUNT_SALES_DAILY];


// FACT_ACCOUNT_SALES_DAILY:
// Select 
// 	f.*,
//     c.CUSTOMER_ALIAS,
//     cust.CUSTOMER_TYPE,
//     ACCOUNT_KEY as ACCOUNT_KEY_TEMP
// FROM LUINC.FACT_ACCOUNT_SALES f
// inner join LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY = f.PRODUCT_GROUP_KEY
// INNER JOIN LUINC.DIM_MB_VYEPTI_SA SA on SA.PRODUCT_GROUP_KEY=f.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_CUSTOMER c on c.CUSTOMER_KEY = f.SHIP_FROM_CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER cust on cust.CUSTOMER_KEY = f.CUSTOMER_KEY
// inner join LUINC.DIM_CUSTOMER acct on acct.CUSTOMER_KEY=f.ACCOUNT_KEY
// where p.BRAND<> 'VYEPTI'   and DATE_KEY>=20200406 and  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY', 'NURTEC', 'UBRELVY', 'REYVOW', 'QULIPTA')
// and ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG,'N')<>'Y'
// and  ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// ;


// Drop field CUSTOMER_ALIAS from FACT_ACCOUNT_SALES_DAILY;

// LEFT JOin(FACT_ACCOUNT_SALES_DAILY)  
// LOad Distinct ALL_PACCOUNT_KEYS, ACCOUNT_KEY, ALL_CUSTOMER_KEYS
// Resident AFFILIATION_ACCT_TO_CUST;

// Store [FACT_ACCOUNT_SALES_DAILY] into [$(vStorePathFact)/FACT_VAP_COMPETITOR_ACCOUNT_SALES_DAILY$(vSpace).qvd](qvd);

// drop table FACT_ACCOUNT_SALES_DAILY;

// // end if
///$tab VAP: Zero Fact - // DONE
// // If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

// NoConcatenate
// ZERO_FACT_ACCOUNT_TEMP:
// Load 
// 	*,
//     1							as ZeroFact_Flag
// where  not Exists(ACCOUNT_KEY_TEMP,ACCOUNT_KEY)
//     ;
// SELECT distinct 
//        ACCOUNT_KEY,
//     t3.TERRITORY_KEY	 									as "SF3_TERRITORY_KEY" 
    
// FROM   luinc.FACT_ACCOUNT_AFFILIATION af
// INNER JOIN luinc.DIM_CUSTOMER cust
//               ON cust.CUSTOMER_KEY = af.CUSTOMER_KEY

// INNER JOIN luinc.DIM_CUSTOMER c
//   		ON c.CUSTOMER_KEY = af.ACCOUNT_KEY   
//         LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  c.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'   
// WHERE   
//               cust.CUSTOMER_TYPE <> 'HCO'
// AND    ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'

// UNION

// SELECT distinct
//     vs.ACCOUNT_KEY,
//    t3.TERRITORY_KEY									as "SF3_TERRITORY_KEY" 
   
// FROM luinc.FACT_ACCOUNT_SALES vs
//   INNER JOIN luinc.DIM_CUSTOMER acct
//     ON acct.CUSTOMER_KEY = vs.ACCOUNT_KEY
//   INNER JOIN luinc.DIM_CUSTOMER cust
//     ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY
//   INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//        ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY
//        LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'   
    
// WHERE  
//              ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//        AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// ;        

// Concatenate(ZERO_FACT_ACCOUNT_TEMP)

// ACCOUNT_SALES_TEMP:
// Load 
// 	*,
//     2							as ZeroFact_Flag
// where  not Exists(ACCOUNT_KEY_TEMP,ACCOUNT_KEY)
//     ;

// SELECT distinct
//     ACCOUNT_KEY,
//     t3.TERRITORY_KEY																as "SF3_TERRITORY_KEY" 
// FROM luinc.FACT_ACCOUNT_SALES vs

// INNER JOIN luinc.DIM_CUSTOMER acct
//   			ON acct.CUSTOMER_KEY = vs.ACCOUNT_KEY

// INNER JOIN luinc.DIM_CUSTOMER cust
//   			ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY

// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY
//     LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'   
// WHERE  

//      ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// 	 AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//      AND   vs.DATE_KEY >= '$(vZeroFactAccountDateStart)'
// ;

// Concatenate(ZERO_FACT_ACCOUNT_TEMP)

// ACCOUNT_SEGMENT_TEMP:
// Load 
// 		*,
//         3							as ZeroFact_Flag
// where  not Exists(ACCOUNT_KEY_TEMP,ACCOUNT_KEY)
// ;
        
// SELECT DISTINCT
// 		   cs.CUSTOMER_KEY								as ACCOUNT_KEY,
//            t3.TERRITORY_KEY							as SF3_TERRITORY_KEY 

// FROM LUINC.FACT_CUSTOMER_SEGMENTATION cs
//   INNER JOIN luinc.DIM_CUSTOMER c
//          ON c.CUSTOMER_KEY = cs.CUSTOMER_KEY
//   INNER JOIN luinc.DIM_PRODUCT_GROUP pg
//          ON pg.PRODUCT_GROUP_KEY = cs.PRODUCT_GROUP_KEY
// LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  c.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  c.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  c.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'   
//        WHERE
//            pg.BRAND = 'VYEPTI'
//        AND cs.SEGMENT_TYPE = 'ACCOUNT SEGMENT'
//        AND cs.CURRENT_IND = 'Y'
//        AND c.VYEPTI_EXCLUSION_IND = 'N'
//        AND  ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//        ;


// LEFT JOIN(ZERO_FACT_ACCOUNT_TEMP)

// LOAD distinct 
// 	ACCOUNT_KEY, 
// 	ALL_CUSTOMER_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_ACCT_TO_CUST
// ;

// NoConcatenate

// ZERO_FACT_ACCOUNT:
// LOAD Distinct
//        ACCOUNT_KEY,    
//        Coalesce(ALL_CUSTOMER_KEYS, 0)          	as  ALL_CUSTOMER_KEYS,
//        Coalesce(ALL_PACCOUNT_KEYS, 0)          	as  ALL_PACCOUNT_KEYS,
//        SF3_TERRITORY_KEY
// Resident ZERO_FACT_ACCOUNT_TEMP
// ;

// Drop Table ZERO_FACT_ACCOUNT_TEMP;


// Store ZERO_FACT_ACCOUNT 
// into [$(vStorePathFact)/ZERO_FACT_VAP_ACCOUNT$(vSpace).qvd](qvd);

// Drop Tables ZERO_FACT_ACCOUNT;

// // end if

// // If '$(vWeekDay)'='Wed' or '$(vWeekDay)'='Thu' then

// NoConcatenate
// ZERO_FACT_HCP_TEMP:
// Load 
// 		*,
//         4							as ZeroFact_Flag
// where  not Exists(CUSTOMER_KEY_TEMP,CUSTOMER_KEY);
// SQL SELECT  distinct
// 	af.CUSTOMER_KEY,
//     t3.TERRITORY_KEY									as "SF3_TERRITORY_KEY" 
// FROM   luinc.FACT_ACCOUNT_AFFILIATION af

// INNER JOIN luinc.DIM_CUSTOMER cust
//               ON cust.CUSTOMER_KEY = af.CUSTOMER_KEY 
              
// LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'    
// WHERE   
//               cust.CUSTOMER_TYPE <> 'HCO'
// AND    ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'

// UNION

// SELECT

//        vs.CUSTOMER_KEY,
//       	t3.TERRITORY_KEY								as "SF3_TERRITORY_KEY" 
    
// FROM luinc.FACT_ACCOUNT_SALES vs
//   INNER JOIN luinc.DIM_CUSTOMER acct
//     ON acct.CUSTOMER_KEY = vs.ACCOUNT_KEY
//   INNER JOIN luinc.DIM_CUSTOMER cust
//     ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY
//   INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//        ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY
       
// LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  cust.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y'    

// WHERE  ISNULL(acct.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//        AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// 	 AND SALE_TYPE <> 'NON RETAIL'

// ;        


// Concatenate(ZERO_FACT_HCP_TEMP)

// HCP_SEGMENT_TEMP:
// Load 
// 		*,
//         5							as ZeroFact_Flag
// where  not Exists(CUSTOMER_KEY_TEMP,CUSTOMER_KEY);
// SELECT DISTINCT
// 		   cs.CUSTOMER_KEY,
//            t3.TERRITORY_KEY							as SF3_TERRITORY_KEY 

// FROM LUINC.FACT_CUSTOMER_SEGMENTATION cs
//   INNER JOIN luinc.DIM_CUSTOMER c
//          ON c.CUSTOMER_KEY = cs.CUSTOMER_KEY
//   INNER JOIN luinc.DIM_PRODUCT_GROUP pg
//          ON pg.PRODUCT_GROUP_KEY = cs.PRODUCT_GROUP_KEY
//   LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt1
//             INNER JOIN luinc.DIM_TERRITORY t1
//                  ON t1.TERRITORY_KEY = zt1.TERRITORY_KEY
//                  AND t1.TERR_CURRENT_IND = 'Y'
//                  AND t1.SALESFORCE_GROUP = 'NRO1'
//            ) on zt1.ZIP =  c.CUSTOMER_ZIP
//                 AND zt1.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt2
//             INNER JOIN luinc.DIM_TERRITORY t2
//                  ON t2.TERRITORY_KEY = zt2.TERRITORY_KEY
//                  AND t2.TERR_CURRENT_IND = 'Y'
//                  AND t2.SALESFORCE_GROUP = 'NRO2'
//            ) on zt2.ZIP =  c.CUSTOMER_ZIP
//                 AND zt2.CURRENT_IND = 'Y'
//               LEFT OUTER JOIN (luinc.FACT_ZIP_TO_TERRITORY zt3
//                 INNER JOIN luinc.DIM_TERRITORY t3
//                  ON t3.TERRITORY_KEY = zt3.TERRITORY_KEY
//                  AND t3.TERR_CURRENT_IND = 'Y'
//                  AND t3.SALESFORCE_GROUP = 'NRO3'
//            ) on zt3.ZIP =  c.CUSTOMER_ZIP
//                 AND zt3.CURRENT_IND = 'Y' 
//        WHERE
//            pg.BRAND = 'VYEPTI'
//        AND cs.SEGMENT_TYPE = 'ACGRP BOTOX DECILE'
//        AND cs.CURRENT_IND = 'Y'
//        AND c.VYEPTI_EXCLUSION_IND = 'N'
//        AND c.CUSTOMER_TYPE <> 'HCO'
//        AND  ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//        ;


// Concatenate(ZERO_FACT_HCP_TEMP)

// PATIENT_SALES_TEMP:
// Load 
// 		*,
//         6							as ZeroFact_Flag
// where  not Exists(CUSTOMER_KEY_TEMP,CUSTOMER_KEY);
// SQl Select 
// 		p.CUSTOMER_KEY,
// 		p.SF3_TERRITORY_KEY

// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// 	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
// 	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY

// where 
// 		dp.LU_PRODUCT_FLAG = 'Y' 
//  AND   dp.PRODUCT_NAME='VYEPTI'				
//  AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//  AND 	(p.NEW_PATIENT IS NULL OR p.RESTART_PATIENT IS NULL) 
//  AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
//  AND 	p.AGE_INCLUSION_IND = 'Y'
//  And 	RX_TYPE='STANDARD' 
//   AND    p.SHIPPED_DATE_KEY >= '$(vZeroFactPatientDateStart)'
	
//     ;


// Concatenate(ZERO_FACT_HCP_TEMP)

// RETAIL_SALES_TEMP:
// Load 
// 		*,
//         7							as ZeroFact_Flag
// where  not Exists(CUSTOMER_KEY_TEMP,CUSTOMER_KEY);
// SELECT Distinct
//     rs.CUSTOMER_KEY ,
// 	SF3_TERRITORY_KEY

// FROM   luinc.fact_retail_sales_anti_migraine rs

// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
//   			ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY
// INNER JOIN luinc.DIM_AGE_GROUP ag
//   			ON ag.AGE_GROUP_KEY = rs.AGE_GROUP_KEY
// INNER JOIN luinc.DIM_CUSTOMER cust
//   			On cust.CUSTOMER_KEY = rs.CUSTOMER_KEY
// WHERE 
//   			pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//   		AND   ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// 		AND   cust.CUSTOMER_TYPE = 'HCP'
// 	 	AND   rs.DATE_KEY >= '$(vZeroFactRetailDateStart)'	
//         ;

// LEFT Join (ZERO_FACT_HCP_TEMP)

// Load distinct 
// 	CUSTOMER_KEY, 
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_CUST_TO_ACCT
// ;

// NoConcatenate

// ZERO_FACT_HCP:
// Load  Distinct
// 	  CUSTOMER_KEY,
// //       CUSTOMER_KEY                                   as CUSTOMER_KEY_TEMP,
//       Coalesce(ALL_ACCOUNT_KEYS, 0)                  as ALL_ACCOUNT_KEYS,
//        Coalesce(ALL_PACCOUNT_KEYS, 0) as ALL_PACCOUNT_KEYS,
// 	  SF3_TERRITORY_KEY
// Resident ZERO_FACT_HCP_TEMP;

// Drop table ZERO_FACT_HCP_TEMP;
// Store ZERO_FACT_HCP into [$(vStorePathFact)/ZERO_FACT_VAP_HCP$(vSpace).qvd](qvd);

// drop Table ZERO_FACT_HCP;

// // end if
///$tab VAP: Affiliation Universe - // DONE
// NoConcatenate
// CUSTOMER_TO_ACCOUNT:   
// LOAD   
// 	ACCOUNT_KEY,
//     PARENT_ACCOUNT_KEY,  //NH ADD
//     CUSTOMER_KEY
// Resident FACT_ACCOUNT_AFFILIATION;

// INNER JOIN (CUSTOMER_TO_ACCOUNT)
// Load
// 	CUSTOMER_KEY,
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident AFFILIATION_CUST_TO_ACCT;

// Concatenate (CUSTOMER_TO_ACCOUNT)
// Load distinct
// 	0 as  ACCOUNT_KEY,
//     0 as  PARENT_ACCOUNT_KEY,  //NH ADD
// 	CUSTOMER_KEY,
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident FACT_RETAIL_SALES_ANTI_MIGRAINE
// WHERE ALL_ACCOUNT_KEYS = 0  
// ;


// Concatenate (CUSTOMER_TO_ACCOUNT)
// Load distinct
// 	0 as  ACCOUNT_KEY,
//     0 as  PARENT_ACCOUNT_KEY,  //NH ADD
// 	CUSTOMER_KEY,
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident FACT_CALL_HCP
// WHERE ALL_ACCOUNT_KEYS = 0 
// ;

// NoConcatenate
// ACCOUNT_TO_CUSTOMER:
// LOAD
// 	ACCOUNT_KEY,
//     PARENT_ACCOUNT_KEY,  //NH ADD
//     CUSTOMER_KEY
// Resident FACT_ACCOUNT_AFFILIATION;

// INNER JOIN (ACCOUNT_TO_CUSTOMER)
// Load
// 	ACCOUNT_KEY,
// 	ALL_CUSTOMER_KEYS,
//     ALL_PACCOUNT_KEYS //NH Add
// Resident AFFILIATION_ACCT_TO_CUST;

// Concatenate (CUSTOMER_TO_ACCOUNT)

// Load distinct
// 	0 as  ACCOUNT_KEY,
//     0 as  PARENT_ACCOUNT_KEY,  //NH ADD
// 	CUSTOMER_KEY,
// 	ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident FACT_RETAIL_SALES_ANTI_MIGRAINE
// WHERE ALL_ACCOUNT_KEYS = 0;

// NoConcatenate
// PACCOUNT_TO_ACCT:
// LOAD
// 	ACCOUNT_KEY,
//     PARENT_ACCOUNT_KEY, 
//     CUSTOMER_KEY
// Resident FACT_ACCOUNT_AFFILIATION;

// INNER JOIN (PACCOUNT_TO_ACCT)

// Load
// 	PARENT_ACCOUNT_KEY,
// 	ALL_CUSTOMER_KEYS,
//     ALL_ACCOUNT_KEYS 
// Resident AFFILIATION_PACCT_TO_CUST_ACCOUNT;

// NoConcatenate
// DIM_ACCOUNT_AFFILIATION:
// Load DISTINCT 
//        ACCOUNT_KEY,
//        PARENT_ACCOUNT_KEY,  //NH ADD
//        CUSTOMER_KEY,
//        ALL_ACCOUNT_KEYS,
//        ALL_PACCOUNT_KEYS,
//        CUSTOMER_KEY 					as  ALL_CUSTOMER_KEYS
// resident CUSTOMER_TO_ACCOUNT;

// Concatenate (DIM_ACCOUNT_AFFILIATION)

// LOAD Distinct 
//  	ACCOUNT_KEY,
//     PARENT_ACCOUNT_KEY,  //NH ADD
//     CUSTOMER_KEY,
//     ALL_CUSTOMER_KEYS,
//     ACCOUNT_KEY 						as ALL_ACCOUNT_KEYS,
//     ALL_PACCOUNT_KEYS
// Resident ACCOUNT_TO_CUSTOMER;

// Concatenate (DIM_ACCOUNT_AFFILIATION)
// LOAD Distinct 
//  	ACCOUNT_KEY,
//     PARENT_ACCOUNT_KEY,  //NH ADD
//     CUSTOMER_KEY,
//     ALL_CUSTOMER_KEYS,
//     ALL_ACCOUNT_KEYS,
//     PARENT_ACCOUNT_KEY as ALL_PACCOUNT_KEYS
// Resident PACCOUNT_TO_ACCT;

// Store DIM_ACCOUNT_AFFILIATION into [$(vStorePathDim)/DIM_VAP_ACCOUNT_AFFILIATION$(vSpace).qvd](qvd);

// Trace '1';

// Drop Tables 
// DIM_ACCOUNT_AFFILIATION,
// FACT_ACCOUNT_AFFILIATION,
// CUSTOMER_TO_ACCOUNT,
// ACCOUNT_TO_CUSTOMER,
// AFFILIATION_ACCT_TO_CUST,
// AFFILIATION_CUST_TO_ACCT,
// AFFILIATION_PACCT_TO_CUST_ACCOUNT,
// PACCOUNT_TO_ACCT,
// FACT_CALL_HCP,
// FACT_RETAIL_SALES_ANTI_MIGRAINE;


// Trace '2';
///$tab Subnational - // DONE
// vCurrentDay =Date(Today(),'YYYYMMDD');
// Trace '$(vCurrentDay)';

// Retail_Temp:
// select 
// 	Max(DATE_KEY) as SALES_MAX_DATE_KEY 
// from LUINC.FACT_RETAIL_SALES_ANTI_MIGRAINE rs ;

// Store Retail_Temp into [$(vStorePathDim)/RETAIL_TEMP_MSN$(vSpace).qvd](qvd);

// DROP Table Retail_Temp;

// FACT_RETAIL_SALES:
// SELECT 
//     SPLIT_WEEK_KEY                                                 as DATE_KEY, //Change
//    // CASE WHEN cust.PDRP_IND = 'Y' THEN -1 ELSE rs.CUSTOMER_KEY END as CUSTOMER_KEY ,
//     rs.CUSTOMER_KEY as CUSTOMER_KEY,
//     PRODUCT_NAME as PRODUCT_GROUP_KEY,
//     dpg.BRAND as Brand_Name, //change
// 	TERRITORY_ID,
//     sum(TRX)						as TRx,
//     sum(NRX)						as NRx,
//     sum(NORMALIZED_TRX)				as "Norm. Units",
//     sum(NORMALIZED_NRX)				as 'Norm. NRX',
//     'Direct'												as "Sales Type",
//     'Retail Sales'											as TableFlag
// FROM   luinc.fact_retail_sales_anti_migraine rs
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY
// INNER JOIN luinc.DIM_AGE_GROUP ag ON ag.AGE_GROUP_KEY = rs.AGE_GROUP_KEY
// INNER JOIN luinc.DIM_CUSTOMER cust On cust.CUSTOMER_KEY = rs.CUSTOMER_KEY
// INNER JOIN LUINC.DIM_CLNDR CLN on CLN.DATE_KEY=rs.DATE_KEY
// INNER JOIN luinc.DIM_PRODUCT_GROUP dpg ON dpg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY 
// INNER JOIN LUINC.DIM_TERRITORY T on T.TERRITORY_KEY=rs.SF3_TERRITORY_KEY 
// WHERE 
//   			pg.MARKET_BASKET_GROUP <> 'VYEPTI' and  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY')
//         AND   ISNULL(cust.LU_NO_CONTACT_FLAG,'N') <> 'Y'
//   		AND   ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//         AND   ISNULL(cust.VYEPTI_EXCLUSION_IND, 'N') <> 'Y'
//         AND   ISNULL(ag.VYEPTI_INCLUSION_IND, 'Y') <> 'N'
// 		AND   cust.CUSTOMER_TYPE = 'HCP'
//         AND (rs.SF1_TERRITORY_KEY <> 0 OR rs.SF2_TERRITORY_KEY <>0 OR rs.SF3_TERRITORY_KEY <>0)
// AND   SPLIT_WEEK_KEY >= '20200101'
//         AND SPLIT_WEEK_KEY < '$(vCurrentDay)'
// GROUP BY SPLIT_WEEK_KEY, //change
//    rs.CUSTOMER_KEY,
//     PRODUCT_NAME ,
// 	TERRITORY_ID,
//     dpg.BRAND;

// Store FACT_RETAIL_SALES into [$(vStorePathFact)/FACT_RETAIL_SALES_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_RETAIL_SALES;

// FACT_ACCOUNT_SALES:
// SELECTÂ Â 
// Â Â Â  SPLIT_WEEK_KEY Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as DATE_KEY,
// Â Â Â  //CASE WHEN cust.PDRP_IND = 'Y' THEN -1 ELSE 
//     vs.CUSTOMER_KEYÂ Â Â Â Â  as CUSTOMER_KEY,Â 
// Â Â Â  PRODUCT_NAME as PRODUCT_GROUP_KEY,
// Â Â Â  dpg.BRAND as Brand_Name,Â 
// Â Â Â  TERRITORY_ID,
// Â Â Â  sum(NORMALIZED_TRX)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as 'Norm. Units',
// Â Â Â  sum(TRX)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as TRx,
// //Â Â Â Â  sum(NORMALIZED_NRX)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as 'Norm. NRX',
// Â Â Â  'Account Sales'Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as TableFlag,
// Â Â Â Â Â  CASE WHEN SALE_TYPE = 'NON RETAIL' or CUSTOMER_TYPE = 'HCO'Â 
// Â Â Â Â Â  THEN 'Direct' ELSE 'Affiliated' ENDÂ  as "Sales Type"
// FROM luinc.FACT_ACCOUNT_SALES vs
Â 

// INNER JOIN luinc.DIM_TERRITORY dt
// Â Â Â Â Â Â Â Â Â Â Â  ON dt.TERRITORY_KEY=vs.SF3_TERRITORY_KEY
// INNER JOIN luinc.DIM_CUSTOMER cust
// Â Â Â Â Â Â Â Â Â Â Â Â Â  ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY
// INNER JOIN LUINC.DIM_CLNDR CLN on CLN.DATE_KEY=vs.DATE_KEY
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg
// Â Â Â Â Â Â Â Â Â Â Â Â Â  ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY andÂ  MARKET_BASKET_GROUP in ('BOTOX','AIMOVIG','AJOVY','EMGALITY','VYEPTI', 'QULIPTA', 'NURTEC')
// INNER JOIN luinc.DIM_PRODUCT_GROUP dpg
// Â Â Â Â Â Â Â Â Â Â Â Â Â  ON dpg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEYÂ Â 
// WHEREÂ Â 
// Â Â Â Â Â Â Â Â Â Â Â  ISNULL(VYEPTI_CLASS_OF_TRADE_EXCLUSION, 'N') <> 'Y'
// Â Â Â Â  AND ISNULL(vs.VYEPTI_SPECIALTY_EXCLUSION, 'N') <> 'Y'
// Â Â Â Â  AND ISNULL(vs.VYEPTI_AGE_GROUP_INCLUSION,'Y') <> 'N'
Â 
// Â Â Â Â  AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// Â Â Â Â  AND ISNULL(cust.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
//      and SPLIT_WEEK_KEY >= '20200101' 
// Â Â Â Â  AND SPLIT_WEEK_KEY < '$(vCurrentDay)'
// //Â Â Â Â Â  AND vs.DATE_KEY<='$(vEndDate)'
// Â Â Â Â  ANDÂ Â Â Â  (vs.SF1_TERRITORY_KEY <> 0 OR vs.SF2_TERRITORY_KEY <>0 OR vs.SF3_TERRITORY_KEY <>0)
// Group By
// SPLIT_WEEK_KEY,
// CASE WHEN SALE_TYPE = 'NON RETAIL' or CUSTOMER_TYPE = 'HCO'Â 
// Â Â Â Â Â  THEN 'Direct' ELSE 'Affiliated' END ,
// //CASE WHEN cust.PDRP_IND = 'Y' THEN -1 ELSE 
// vs.CUSTOMER_KEY Â Â Â Â Â Â  ,Â 
// PRODUCT_NAME,
// TERRITORY_ID,
// dpg.BRAND
// ;

// Store FACT_ACCOUNT_SALES into [$(vStorePathFact)/FACT_ACCOUNT_SALES_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_ACCOUNT_SALES;

// FACT_PATIENT_SALES:
// SQl Select 
		
// //         DATE_WEEK_END_KEY
//         SPLIT_WEEK_KEY Â         as DATE_KEY,//change
// 		//CASE WHEN c.PDRP_IND = 'Y' THEN -1 ELSE 
//         c.CUSTOMER_KEY       as CUSTOMER_KEY,
//         //c.CUSTOMER_KEY													as UNIQUE_CUSTOMER_KEY,
// 		PRODUCT_NAME as PRODUCT_GROUP_KEY,
//         dp.BRAND as Brand_Name,//change
// //         segment_type,
// 		TERRITORY_ID ,
// 		Sum(p.TRX) 														as TRX,
//         Sum(NORMALIZED_TRX) 										    as 'Norm. Units',
// //         sum(NORMALIZED_NRX)				                                as 'Norm. NRX',
//          'Direct'													as "Sales Type",
//    		 'Patient Sales'												as TableFlag    
// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// 	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
// //     left JOIN  LUINC.FACT_CUSTOMER_SEGMENTATION cs On p.CUSTOMER_KEY = cs.CUSTOMER_KEY
// 	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY
//     INNER JOIN LUINC.DIM_TERRITORY T on T.TERRITORY_KEY=p.SF3_TERRITORY_KEY 
// where 
// 		dp.LU_PRODUCT_FLAG = 'Y' 
//  AND   dp.PRODUCT_NAME='VYEPTI'
//  AND   c.VYEPTI_EXCLUSION_IND = 'N'						
//  AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//  AND   ISNULL(c.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
// //  AND segment_type in ('CORE TARGETS','INSIDE SALES TARGET')
//  AND 	(p.SF1_TERRITORY_KEY <> 0 OR p.SF2_TERRITORY_KEY <>0 OR p.SF3_TERRITORY_KEY <>0)
//  AND 	(p.NEW_PATIENT IS NULL OR p.RESTART_PATIENT IS NULL) 
//  AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
//  AND 	p.AGE_INCLUSION_IND = 'Y'
//  And 	RX_TYPE='STANDARD' 
//  and SPLIT_WEEK_KEY >= '20200101'
//  //AND    SPLIT_WEEK_KEY >= '$(vPrevYearRetailDateStart)' 
//   AND SPLIT_WEEK_KEY < '$(vCurrentDay)'
  
// //   SHIPPED_DATE_KEY <= '$(vToday)'//change
//  // p.SHIPPED_DATE_KEY <='$(vRetailMaxDate)'
//  group by 
//  	SPLIT_WEEK_KEY,//change
//   //  segment_type,
// 		//CASE WHEN c.PDRP_IND = 'Y' THEN -1 ELSE 
//         c.CUSTOMER_KEY ,
//      	dp.BRAND,
// 		TERRITORY_ID,
//         PRODUCT_NAME
//         ;
		
// Store FACT_PATIENT_SALES into [$(vStorePathFact)/FACT_PATIENT_SALES_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_PATIENT_SALES;


// FACT_TRIPTAN_SALES:
// SQL
// SELECT
// //     DATE_WEEK_END_KEY  
//     SPLIT_WEEK_KEY Â   as DATE_KEY, //change
//     //CASE WHEN cust.PDRP_IND = 'Y' THEN -1 ELSE 
//     rs.CUSTOMER_KEY  as CUSTOMER_KEY ,
//     A.MARKET_BASKET_GROUP,
//     A.MARKET_BASKET_GROUP as Brand_Name, //change
// //     segment_type,
// 	TERRITORY_ID,
//     sum(TRX)						as TRx,
//     CASE WHEN A.MARKET_BASKET_GROUP in ('NURTEC','QULIPTA','TRUDHESA') THEN
//     sum(NORMALIZED_TRX) 			ELSE SUM(TRX) END as 'Norm. Units' , 
// //    sum(NORMALIZED_TRX) 			as 'Norm. Units',     //change
//     CASE WHEN A.MARKET_BASKET_GROUP in ('NURTEC','QULIPTA','TRUDHESA') THEN
//     sum(NORMALIZED_TRX) 			ELSE SUM(TRX) END as 'Norm. TRX' ,
// //    sum(NORMALIZED_TRX) 			as 'Norm. TRX',
// 	CASE WHEN A.MARKET_BASKET_GROUP in ('NURTEC','QULIPTA','TRUDHESA') THEN
//     sum(NORMALIZED_NRX) 			ELSE SUM(NRX) END as 'Norm. NRX' ,
// //	sum(NORMALIZED_NRX)				as 'Norm. NRX',
//     'Direct'												as "Sales Type",
//     'Triptan Sales'											as TableFlag
// From luinc.fact_retail_sales_anti_migraine rs
// //FROM   luinc.fact_retail_sales_anti_migraine rs
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg ON pg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY
// INNER JOIN luinc.DIM_AGE_GROUP ag ON ag.AGE_GROUP_KEY = rs.AGE_GROUP_KEY
// INNER JOIN luinc.DIM_CUSTOMER cust	On cust.CUSTOMER_KEY = rs.CUSTOMER_KEY
// // left JOIN  LUINC.FACT_CUSTOMER_SEGMENTATION cs On rs.CUSTOMER_KEY = cs.CUSTOMER_KEY
// INNER JOIN luinc.DIM_PRODUCT_GROUP dpg	ON dpg.PRODUCT_GROUP_KEY = rs.PRODUCT_GROUP_KEY   
// INNER JOIN (Select Max(PRODUCT_GROUP_KEY) as PRODUCT_GROUP_KEY,MARKET_BASKET_GROUP from LUINC.DIM_MB_VYEPTI_SA
// group by MARKET_BASKET_GROUP) A on A.MARKET_BASKET_GROUP=pg.MARKET_BASKET_GROUP
// INNER JOIN LUINC.DIM_CLNDR CLN on CLN.DATE_KEY=rs.DATE_KEY
// INNER JOIN LUINC.DIM_TERRITORY T on T.TERRITORY_KEY=rs.SF3_TERRITORY_KEY 

// WHERE 
//   			 A.MARKET_BASKET_GROUP in ('NURTEC','QULIPTA','UBRELVY','TRUDHESA','REYVOW') 
//         AND   dpg.MARKET in ('5-HT1F RECEPTOR AGONIST', 'BETA BLOCKER', 'CGRP-ORAL', 'ERGOTAMINE', 'SNRI','SSRI','TOPIRAMATE','TRICYCLICS & TETRACYCLICS','TRIPTAN')
//         AND   ISNULL(cust.LU_NO_CONTACT_FLAG,'N') <> 'Y'
//   		AND   ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//         AND   ISNULL(cust.VYEPTI_EXCLUSION_IND, 'N') <> 'Y'
//         AND   ISNULL(ag.VYEPTI_INCLUSION_IND, 'Y') <> 'N'
// //         AND segment_type in ('CORE TARGETS','INSIDE SALES TARGET','ACGRP BOTOX DECILE')
// 		AND   cust.CUSTOMER_TYPE = 'HCP'
//         AND (rs.SF1_TERRITORY_KEY <> 0 OR rs.SF2_TERRITORY_KEY <>0 OR rs.SF3_TERRITORY_KEY <>0)
// 	 	and SPLIT_WEEK_KEY >= '20200101'
//         //AND   SPLIT_WEEK_KEY >= '$(vPrevYearRetailDateStart)' 
//         //rs.DATE_KEY <= '$(vToday)' //change
//         AND SPLIT_WEEK_KEY < '$(vCurrentDay)'
// GROUP BY 
//        SPLIT_WEEK_KEY, //change
// //        segment_type,
//     //CASE WHEN cust.PDRP_IND = 'Y' THEN -1 ELSE 
//     rs.CUSTOMER_KEY ,
//     A.MARKET_BASKET_GROUP,
// 	TERRITORY_ID;
    
// Store FACT_TRIPTAN_SALES into [$(vStorePathFact)/FACT_TRIPTAN_SALES_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_TRIPTAN_SALES;

// WEEKLY_PATIENT_SALES:
// SQl Select 
// // 		DATE_WEEK_END_KEY	
//         SPLIT_WEEK_KEY Â  as DATE_KEY,
// 		PRODUCT_NAME as PRODUCT_GROUP_KEY,
// 		TERRITORY_ID ,
// //         segment_type,
// 		Sum(p.TRX) 														as TRX,
//         Sum(NORMALIZED_TRX) 												as 'Norm. Units',
// //         sum(NORMALIZED_NRX)				                                   as 'Norm. NRX',
//         dp.BRAND as Brand_Name, 
//          'Direct'													as "Sales Type",
//    		 'Weekly Patient Sales'												as TableFlag    
// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// 	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
// //     left JOIN  LUINC.FACT_CUSTOMER_SEGMENTATION cs On p.CUSTOMER_KEY = cs.CUSTOMER_KEY
// 	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY
//     INNER JOIN LUINC.DIM_TERRITORY T on T.TERRITORY_KEY=p.SF3_TERRITORY_KEY 
// where 
// 		dp.LU_PRODUCT_FLAG = 'Y' 
//  AND   dp.PRODUCT_NAME='VYEPTI'
//  AND   c.VYEPTI_EXCLUSION_IND = 'N'						
//  AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//  AND   ISNULL(c.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
//  AND 	(p.SF1_TERRITORY_KEY <> 0 OR p.SF2_TERRITORY_KEY <>0 OR p.SF3_TERRITORY_KEY <>0)
//  AND 	(p.NEW_PATIENT IS NULL OR p.RESTART_PATIENT IS NULL) 
//  AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
//  AND 	p.AGE_INCLUSION_IND = 'Y'
// //  AND segment_type in ('CORE TARGETS','INSIDE SALES TARGET')
//  And 	RX_TYPE='STANDARD' 
//  and SPLIT_WEEK_KEY >= '20200101'
//  //AND    SPLIT_WEEK_KEY >= '$(vPrevYearRetailDateStart)'
//  AND SPLIT_WEEK_KEY < '$(vCurrentDay)'
//  group by 
//  	SPLIT_WEEK_KEY,
// //     segment_type,
//      	PRODUCT_NAME,
//         dp.BRAND,
// 		TERRITORY_ID
//         ;
        
// Store WEEKLY_PATIENT_SALES into [$(vStorePathFact)/WEEKLY_PATIENT_SALES_MSN$(vSpace).qvd](qvd);

// DROP Table WEEKLY_PATIENT_SALES;
///$tab Subnational call activity - // DONE
// FACT_CALL_ACTIVITY1:
// SQL
// SELECT
//      CALENDAR_YEAR_MONTH as DATE_KEY,
//      TERRITORY_ID,
//      CUSTOMER_KEY,
//      Sum(PDE)/6 as WORKING_DAY
            
// FROM LUINC.FACT_CALL_ACTIVITY fca
// inner join LUINC.DIM_TERRITORY t on t.TERRITORY_KEY = fca.TERRITORY_KEY
// inner join LUINC.DIM_PRODUCT_GROUP pg On pg.PRODUCT_GROUP_KEY = fca.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_CLNDR C on C.DATE_KEY=fca.CALL_DATE_KEY 
// where
// //C.FLAG_WEEKDAY='Y'
// RECORD_TYPE <> 'Logistical Touchpoint'
// and t.SALESFORCE_GROUP_NAME='MERIDIAN'
// and pg.PRODUCT_NAME IN ('VYEPTI')
// and (fca.CALL_DATE_KEY >= 20220101)
// and PDE>=0 and CALL_TYPE <> '$(vReactiveCalls)'
// group by CALENDAR_YEAR_MONTH,
//      TERRITORY_ID,CUSTOMER_KEY;
     
// Store FACT_CALL_ACTIVITY1 into [$(vStorePathFact)/FACT_CALL_ACTIVITY1_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_CALL_ACTIVITY1;     

// FACT_CALL_ACTIVITY2:
// SQL
// select   
//   t.TERRITORY_ID,
//   SPLIT_WEEK_KEY Â  as DATE_KEY,
//   count(DISTINCT fca.CALL_DATE_KEY) AS NUMBER_DAYS_CALLS_MADE,
//   'Working Days' as TableFlag
// FROM LUINC.FACT_CALL_ACTIVITY fca
// inner join LUINC.DIM_CLNDR cal
// on fca.CALL_DATE_KEY = cal.DATE_KEY
// inner join LUINC.DIM_TERRITORY t
// on fca.TERRITORY_KEY= t.TERRITORY_KEY
// inner join LUINC.DIM_PRODUCT_GROUP pg
// On pg.PRODUCT_GROUP_KEY = fca.PRODUCT_GROUP_KEY
// where fca.DETAIL_PRIORITY =1
// and RECORD_TYPE <> 'Logistical Touchpoint'
// and fca.PDE>0
// and cal.FLAG_WEEKDAY='Y'
// and t.SALESFORCE_GROUP_NAME='MERIDIAN'
// and pg.PRODUCT_NAME IN ('VYEPTI')
// and  SPLIT_WEEK_KEY < '$(vCurrentDay)' and CALL_TYPE <> '$(vReactiveCalls)'
// group by t.TERRITORY_ID,
// SPLIT_WEEK_KEY;

// Store FACT_CALL_ACTIVITY2 into [$(vStorePathFact)/FACT_CALL_ACTIVITY2_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_CALL_ACTIVITY2;     

// FACT_CALL_ACTIVITY3:
// SQL
// select   
//   t.TERRITORY_ID,
//   CUSTOMER_KEY,
//   DATE_WEEK_END_KEY as DATE_KEY,
//   count(DISTINCT fca.CALL_DATE_KEY) AS NUMBER_DAYS_CALLS_MADE,
//   'HCP Working Days' as TableFlag
// FROM LUINC.FACT_CALL_ACTIVITY fca
// inner join LUINC.DIM_CLNDR cal
// on fca.CALL_DATE_KEY = cal.DATE_KEY
// inner join LUINC.DIM_TERRITORY t
// on fca.TERRITORY_KEY= t.TERRITORY_KEY
// inner join LUINC.DIM_PRODUCT_GROUP pg
// On pg.PRODUCT_GROUP_KEY = fca.PRODUCT_GROUP_KEY
// where fca.DETAIL_PRIORITY =1
// and RECORD_TYPE <> 'Logistical Touchpoint'
// and fca.PDE>0
// and cal.FLAG_WEEKDAY='Y'
// and t.SALESFORCE_GROUP_NAME='MERIDIAN'
// and pg.PRODUCT_NAME IN ('VYEPTI') and CALL_TYPE <> '$(vReactiveCalls)'
// group by t.TERRITORY_ID,
// DATE_WEEK_END_KEY,CUSTOMER_KEY;

// Store FACT_CALL_ACTIVITY3 into [$(vStorePathFact)/FACT_CALL_ACTIVITY3_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_CALL_ACTIVITY3;     

// FACT_CALL_ACTIVITY4:
// SQL
// select   
//   t.TERRITORY_ID,
//   //CASE WHEN c.PDRP_IND = 'Y' THEN -1 ELSE
//   fca.CUSTOMER_KEY  as CUSTOMER_KEY,
//   SPLIT_WEEK_KEY Â  as DATE_KEY,
//   REPORT_CALL_TYPE,
//   //count(DISTINCT fca.CALL_DATE_KEY) AS NUMBER_DAYS_CALLS_MADE,
//    'Call Activity'											as TableFlag,
//   sum(PDE) AS PDE
// FROM LUINC.FACT_CALL_ACTIVITY fca
// inner join LUINC.DIM_CLNDR cal
// on fca.CALL_DATE_KEY = cal.DATE_KEY
// inner join luinc.dim_customer c ON c.CUSTOMER_KEY=FCA.CUSTOMER_KEY
// inner join LUINC.DIM_TERRITORY t
// on fca.TERRITORY_KEY= t.TERRITORY_KEY
// inner join LUINC.DIM_PRODUCT_GROUP pg
// On pg.PRODUCT_GROUP_KEY = fca.PRODUCT_GROUP_KEY
// where fca.DETAIL_PRIORITY =1
// and RECORD_TYPE <> 'Logistical Touchpoint'
// and fca.PDE>0
// //and cal.FLAG_WEEKDAY='Y'
// and t.SALESFORCE_GROUP_NAME='MERIDIAN'
// and pg.PRODUCT_NAME IN ('VYEPTI')
// AND SPLIT_WEEK_KEY < '$(vCurrentDay)' and CALL_TYPE <> '$(vReactiveCalls)'
// group by t.TERRITORY_ID,
// SPLIT_WEEK_KEY,
// REPORT_CALL_TYPE,//CASE WHEN c.PDRP_IND = 'Y' THEN -1 ELSE 
// fca.CUSTOMER_KEY ;

// Store FACT_CALL_ACTIVITY4 into [$(vStorePathFact)/FACT_CALL_ACTIVITY4_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_CALL_ACTIVITY4;     






///$tab Subnational segment - // DONE
// FACT_CUSTOMER_SEGMENTATION:
// SQL select CUSTOMER_KEY,
// SEGMENT_TYPE,
// Case when SEGMENT_TYPE in ( 'INSIDE SALES TARGET') then SEGMENT_TYPE else '-' end as "Target List"
// from LUINC.FACT_CUSTOMER_SEGMENTATION F
// INNER JOIN LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY=F.PRODUCT_GROUP_KEY
// where CURRENT_IND='Y'  and PRODUCT_NAME='VYEPTI';

// Concatenate(FACT_CUSTOMER_SEGMENTATION)
// select distinct F.CUSTOMER_KEY,
// 'CALL PLAN TARGET' as SEGMENT_TYPE,
// 'CALL PLAN TARGET' as "Target List"
// FROM LUINC.FACT_CALL_PLAN F
// INNER JOIN LUINC.DIM_PRODUCT_GROUP p on p.PRODUCT_GROUP_KEY=F.PRODUCT_GROUP_KEY
// inner join LUINC.DIM_CUSTOMER c on F.CUSTOMER_KEY = c.CUSTOMER_KEY and c.CUSTOMER_TYPE <> 'HCO'
// inner join luinc.dim_territory t on t.TERRITORY_KEY = F.TERRITORY_KEY 
//                   and salesforce_group_name = 'MERIDIAN' and terr_current_ind = 'Y'
// where CURRENT_IND='Y'  and PRODUCT_NAME='VYEPTI';
// Store FACT_CUSTOMER_SEGMENTATION into [$(vStorePathFact)/FACT_CUSTOMER_SEGMENTATION_MSN$(vSpace).qvd](qvd);

// DROP Table FACT_CUSTOMER_SEGMENTATION;     



///$tab (nprinting) vyepti brand - // DONE
// MaxdateKey:

// SELECT 
//       max(DATE_KEY) as DATE_KEY from LUINC.FACT_PATIENT_SNAPSHOT_WEEKLY;

// Let VmaxDate=Peek('DATE_KEY');

// Trace '$(VmaxDate)';

// store MaxdateKey into [$(vStorePathFact)/Vyepti_Brand_Dashboard_Maxdate$(vSpace)$(vSpace).qvd] (qvd);

// DROP TABLE MaxdateKey; 


// NoConcatenate
// FINAL_FACT:
// SQL SELECT DATE_KEY,
// 	Brand_Name,
//     TableFlag1,
//     "Sales Type1",
//     SUM("Norm. Units1") as "Norm. Units1" from (
// SELECTÂ Â 
// Â Â Â  DATE_WEEK_END_KEY Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as DATE_KEY,
// Â Â Â  dpg.BRAND as Brand_Name,Â 
// Â Â Â  sum(NORMALIZED_TRX)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as 'Norm. Units1',
// Â Â Â  'Account Sales'Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as TableFlag1,
// Â Â Â Â Â  CASE WHEN SALE_TYPE = 'NON RETAIL' or CUSTOMER_TYPE = 'HCO'Â 
// Â Â Â Â Â  THEN 'Direct' ELSE 'Affiliated' ENDÂ  as "Sales Type1"
// FROM luinc.FACT_ACCOUNT_SALES vs
// INNER JOIN luinc.DIM_CUSTOMER cust ON cust.CUSTOMER_KEY = vs.CUSTOMER_KEY
// INNER JOIN LUINC.DIM_CLNDR CLN on CLN.DATE_KEY=vs.DATE_KEY
// INNER JOIN luinc.DIM_MB_VYEPTI_SA pg ON pg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEY andÂ  MARKET_BASKET_GROUP in ('VYEPTI')
// INNER JOIN luinc.DIM_PRODUCT_GROUP dpg ON dpg.PRODUCT_GROUP_KEY = vs.PRODUCT_GROUP_KEYÂ Â 
// WHEREÂ Â ISNULL(VYEPTI_CLASS_OF_TRADE_EXCLUSION, 'N') <> 'Y'
// Â Â Â Â AND ISNULL(vs.VYEPTI_SPECIALTY_EXCLUSION, 'N') <> 'Y'
// Â Â Â Â  AND ISNULL(vs.VYEPTI_AGE_GROUP_INCLUSION,'Y') <> 'N'
// Â Â Â Â  AND ISNULL(cust.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
// Â Â Â Â  AND ISNULL(cust.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
// Â Â Â Â  AND SPLIT_WEEK_KEY < '$(VmaxDate)' 
// Group By
// DATE_WEEK_END_KEY,
// CASE WHEN SALE_TYPE = 'NON RETAIL' or CUSTOMER_TYPE = 'HCO'Â 
// Â Â Â Â Â  THEN 'Direct' ELSE 'Affiliated' END,Â 
// dpg.BRAND


// union all

//  Select DATE_WEEK_END_KEY Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  as DATE_KEY,
//         dp.BRAND as Brand_Name,//change
//         Sum(NORMALIZED_TRX) 										    as 'Norm. Units1',

//    		 'Patient Sales'												as TableFlag1    ,
//                   'Direct'													as "Sales Type1"
// from LUINC.FACT_PATIENT_SALES p
// 	inner join LUINC.DIM_PRODUCT_GROUP dp on dp.PRODUCT_GROUP_KEY=p.PRODUCT_GROUP_KEY
// 	inner join luinc.DIM_CUSTOMER c on c.CUSTOMER_KEY=p.CUSTOMER_KEY
// 	INNER JOIN LUINC.DIM_CLNDR dc on dc.DATE_KEy=p.SHIPPED_DATE_KEY
// where 
// 		dp.LU_PRODUCT_FLAG = 'Y' 
//  AND   dp.PRODUCT_NAME='VYEPTI'
//  AND   c.VYEPTI_EXCLUSION_IND = 'N'						
//  AND   ISNULL(c.DATA_STEWARDSHIP_EXCLUSION_FLAG, 'N') <> 'Y'
//  AND   ISNULL(c.LU_NO_CONTACT_FLAG, 'N') <> 'Y'
//  AND 	(p.NEW_PATIENT IS NULL OR p.RESTART_PATIENT IS NULL) 
//  AND 	p.SOURCE IN ('STG_CRX_NRO_EPTI_SP_SHIPMENT')
//  AND 	p.AGE_INCLUSION_IND = 'Y'
//  And 	RX_TYPE='STANDARD' 
// //  AND    p.SHIPPED_DATE_KEY > '$(vPrevYearRetailDateStart)' 
//   AND SPLIT_WEEK_KEY < '$(VmaxDate)'
//  group by 
//  	DATE_WEEK_END_KEY,
//      	dp.BRAND
  
  
//   union all

// select 
//        nsa.DATE_KEY Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ,
//         dp.BRAND as Brand_Name,//change
//         Sum(T_QTY) 										    as 'Norm. Units1',
//        'NPA'								as 'TableFlag1',
//        'Direct'													as "Sales Type1"
// FROM LUINC.FACT_NATL_SALES_WEEKLY_ANTI_MIGRAINE nsa,
// //      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_PRODUCT_GROUP dp,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CHANNEL ch
// WHERE 
// //       pg.MARKET_BASKET_GROUP <> 'VYEPTI'
// //       AND (nsa.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//        (nsa.PRODUCT_GROUP_KEY = dp. PRODUCT_GROUP_KEY)
//       AND (nsa.DATE_KEY = clndr.DATE_KEY)
//       AND (nsa.CHANNEL_KEY = ch.CHANNEL_KEY)
//       AND nsa.DATE_KEY <= '$(VmaxDate)'
//  group by 
//  	  nsa.DATE_KEY,
//       dp.BRAND   
      
 
//   union all

// select 
//        nsp.DATE_KEY Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ,
//         dp.BRAND as Brand_Name,//change
//         Sum(UNITS) 										    as 'Norm. Units1',
//        'NSP'								as 'TableFlag1',
//        'Direct'													as "Sales Type1"
// FROM LUINC.FACT_NATL_NON_RETAIL_WEEKLY_ANTI_MIGRAINE nsp,
// //      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_PRODUCT_GROUP dp,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CLASS_OF_TRADE cld
// WHERE 
// //       pg.MARKET_BASKET_GROUP <> 'VYEPTI'
// //       AND (nsp.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//        (nsp.PRODUCT_GROUP_KEY = dp. PRODUCT_GROUP_KEY)
//       AND (nsp.DATE_KEY = clndr.DATE_KEY)
//       AND (nsp.CLASS_OF_TRADE_KEY = cld.CLASS_OF_TRADE_KEY)
//       AND nsp.DATE_KEY <= '$(VmaxDate)'
//  group by 
//  	  nsp.DATE_KEY,
//       dp.BRAND    
//      ) A  group by DATE_KEY,
// 	Brand_Name,
//     TableFlag1,
//     "Sales Type1";
 
// // exit script;
// // Concatenate(FINAL_FACT)
// //   SELECT 		  FCA.CALL_DATE_KEY as DATE_KEY,                  FCA.CUSTOMER_KEY as HCP_KEY,
  					
// //                   FCA.PRODUCT_GROUP_KEY,
// //                   FCA.TERRITORY_KEY,
// //                   FCA.DETAIL_PRIORITY,
// //                   FCA.PDE,
// //                   FCA.CALL_TYPE,
// //                   CASE
// //                       WHEN RECORD_TYPE like '%ENGAGE%' or INTERACTION_TYPE like 'Remote%' THEN 'REMOTE'
// //                       WHEN INTERACTION_TYPE like '%PHONE%' THEN 'PHONE'
// //                       WHEN INTERACTION_TYPE like '%OFFICE%' or INTERACTION_TYPE like 'Lunch and Learn' THEN 'FACE TO FACE'
// //                       ELSE 'OTHER'
// //                       END AS REPORT_CALL_TYPE,
// //                  'CallActivity' as GrainFlag 
// //   FROM LU_DW.LUINC.FACT_CALL_ACTIVITY FCA,
// //        LU_DW.LUINC.DIM_TERRITORY DT,
// //        LU_DW.LUINC.DIM_PRODUCT_GROUP PG,
// //        LU_DW.LUINC.DIM_CUSTOMER C
// //   WHERE     (FCA.CALL_DATE_KEY >= 20190701)			/* Pull in only activity from January 2019 */
// //         AND (DT.ORGANIZATION = 'LU')					/* Pull in Lundbeck organizational data only */
// //         AND (DT.SALESFORCE_GROUP_NAME is not null)	/* Do not pull in any data not associated with a team */
// //         AND (FCA.RECORD_TYPE is not null)				/* Do not pull in any <null> RECORD_TYPE */
// //         //AND (FCA.PRODUCT_GROUP_KEY <> 0)				/* Do not pull in records not related to a brand */
// //         AND (FCA.TERRITORY_KEY = DT.TERRITORY_KEY)
// //         AND (PG.PRODUCT_GROUP_KEY = FCA.PRODUCT_GROUP_KEY)
// //         and (C.CUSTOMER_KEY=FCA.CUSTOMER_KEY)
// //         and PRODUCT_NAME='VYEPTI' and RECORD_TYPE not like '%LOGISTICAL%';
        
        
//        Concatenate(FINAL_FACT)
        
        
//         SELECT 		  FCA.CALL_DATE_KEY as DATE_KEY,                  FCA.HCO_CUSTOMER_KEY as ACCOUNT_KEY,
//   					FCA.CUSTOMER_KEY,
//                  FCA.PRODUCT_GROUP_KEY,
//                  FCA.TERRITORY_KEY,
//                  FCA.DETAIL_PRIORITY,
//                  FCA.PDE,
//                   FCA.CALL_TYPE,
//                  REPORT_CALL_TYPE,
//                  'HCOCallActivity' as GrainFlag 
//   FROM LU_DW.LUINC.FACT_CALL_ACTIVITY FCA,
//       LU_DW.LUINC.DIM_TERRITORY DT,
//       LU_DW.LUINC.DIM_PRODUCT_GROUP PG,
//        LU_DW.LUINC.DIM_CUSTOMER C
//   WHERE     (FCA.CALL_DATE_KEY >= 20190701)			/* Pull in only activity from January 2019 */
//        AND (DT.ORGANIZATION = 'LU')					/* Pull in Lundbeck organizational data only */
//        AND (DT.SALESFORCE_GROUP_NAME is not null)	/* Do not pull in any data not associated with a team */
//         AND (FCA.RECORD_TYPE is not null)				/* Do not pull in any <null> RECORD_TYPE */
//         AND (FCA.PRODUCT_GROUP_KEY <> 0)				/* Do not pull in records not related to a brand */
//         AND (FCA.TERRITORY_KEY = DT.TERRITORY_KEY)
//         AND (PG.PRODUCT_GROUP_KEY = FCA.PRODUCT_GROUP_KEY)
//         and (C.CUSTOMER_KEY=FCA.CUSTOMER_KEY)
//         and PRODUCT_NAME='VYEPTI' and UPPER(RECORD_TYPE) not like '%LOGISTICAL%'
//         and CALL_DATE_KEY <= '$(VmaxDate)'
//       AND SALESFORCE_GROUP_NAME ='MERIDIAN' and CALL_TYPE <> '$(vReactiveCalls)';
        
       
//        Concatenate(FINAL_FACT)
//        SELECT 		  FCA.CALL_DATE_KEY as DATE_KEY,                  FCA.CUSTOMER_KEY as ACCOUNT_KEY,
//   					FCA.CUSTOMER_KEY,
//                  FCA.PRODUCT_GROUP_KEY,
//                  FCA.TERRITORY_KEY,
//                  FCA.DETAIL_PRIORITY,
//                  FCA.PDE,
//                   FCA.CALL_TYPE,
//                   REPORT_CALL_TYPE,
//                  'HCOCallActivity' as GrainFlag 
//   FROM LU_DW.LUINC.FACT_CALL_ACTIVITY FCA,
//       LU_DW.LUINC.DIM_TERRITORY DT,
//       LU_DW.LUINC.DIM_PRODUCT_GROUP PG,
//        LU_DW.LUINC.DIM_CUSTOMER C
//   WHERE     (FCA.CALL_DATE_KEY >= 20190701)			/* Pull in only activity from January 2019 */
//        AND (DT.ORGANIZATION = 'LU')					/* Pull in Lundbeck organizational data only */
//        AND (DT.SALESFORCE_GROUP_NAME is not null)	/* Do not pull in any data not associated with a team */
//         AND (FCA.RECORD_TYPE is not null)				/* Do not pull in any <null> RECORD_TYPE */
//         AND (FCA.PRODUCT_GROUP_KEY <> 0)				/* Do not pull in records not related to a brand */
//         AND (FCA.TERRITORY_KEY = DT.TERRITORY_KEY)
//         AND (PG.PRODUCT_GROUP_KEY = FCA.PRODUCT_GROUP_KEY)
//        and (C.CUSTOMER_KEY=FCA.CUSTOMER_KEY)
//         and PRODUCT_NAME='VYEPTI' and UPPER(RECORD_TYPE) not like '%LOGISTICAL%'
//         and CUSTOMER_TYPE = 'HCO'
//        and CALL_DATE_KEY <= '$(VmaxDate)'
//         AND SALESFORCE_GROUP_NAME ='MERIDIAN' and CALL_TYPE <> '$(vReactiveCalls)';
        

// NoConcatenate 
// [WD from FCA]:
// SQL
// select 
// 	  fca.TERRITORY_KEY,
//       '20190701' as TERR_EFF_DATE,
//       '99991231' as TERR_EXP_DATE,
//       fca.CALL_DATE_KEY as DATE_KEY,
//       'BD_FACTOR' as RECORD_TYPE,
//       'BD_FACTOR' as CALL_TYPE,
//       'BD_FACTOR' as INTERACTION_TYPE,
// 	1 as BD_FACTOR
// FROM LUINC.FACT_CALL_ACTIVITY fca
// join LUINC.DIM_TERRITORY t on fca.TERRITORY_KEY= t.TERRITORY_KEY
// join LUINC.DIM_PRODUCT_GROUP pg On pg.PRODUCT_GROUP_KEY = fca.PRODUCT_GROUP_KEY
// INNER JOIN LUINC.DIM_CLNDR C on C.DATE_KEY=fca.CALL_DATE_KEY and FLAG_WEEKDAY='Y'
// where t.SALESFORCE_GROUP_NAME in ('MERIDIAN')
// and (fca.CALL_DATE_KEY >= 20190701)	AND fca.CALL_DATE_KEY<='$(VmaxDate)'
// and DETAIL_PRIORITY=1
// and PDE>0 and CALL_TYPE <> '$(vReactiveCalls)'
// group by fca.TERRITORY_KEY, fca.CALL_DATE_KEY;

// Concatenate(FINAL_FACT)
// Load TERRITORY_KEY,
// 	 TERR_EFF_DATE as TERR_EFF_DATE1,
//      TERR_EXP_DATE as TERR_EXP_DATE2,
// 	 DATE_KEY,
// 	 RECORD_TYPE,
//      CALL_TYPE,
//      //ACCT_MGR_AD_ID,
//      INTERACTION_TYPE,
//      BD_FACTOR
// Resident [WD from FCA]
// where Floor(date#(TERR_EFF_DATE,'YYYYMMDD'))<=Floor(date#(DATE_KEY,'YYYYMMDD')) and Floor(date#(TERR_EXP_DATE,'YYYYMMDD'))>=Floor(date#(DATE_KEY,'YYYYMMDD'));

// Drop fields TERR_EFF_DATE,TERR_EXP_DATE;

//  Drop Table [WD from FCA];

// Concatenate(FINAL_FACT)
// /*** Append call activity.  Use sum of BD_FACTOR above for denominator of calls per day calculations ***/

//   SELECT 		  FCA.CALL_DATE_KEY as DATE_KEY,
  				 
//                   FCA.CUSTOMER_KEY  as CUSTOMER_KEY,
//                FCA.FACT_SOURCE_ID,
//                   FCA.PRODUCT_GROUP_KEY,
//                   FCA.TERRITORY_KEY,
//                   FCA.DETAIL_PRIORITY,
//                   FCA.PDE,
//                   FCA.INTERACTION_TYPE,
//                   FCA.RECORD_TYPE,
//                   FCA.CALL_TYPE,
//                   'HCP_CALL_ACTIVITY' as GrainFlag,
//                   REPORT_CALL_TYPE
//   FROM LU_DW.LUINC.FACT_CALL_ACTIVITY FCA,
//        LU_DW.LUINC.DIM_TERRITORY DT,
//        LU_DW.LUINC.DIM_PRODUCT_GROUP PG,
//        LU_DW.LUINC.DIM_CUSTOMER C
//   WHERE     		/* Pull in only activity from January 2019 */
//          (DT.ORGANIZATION = 'LU')					/* Pull in Lundbeck organizational data only */
//         AND (DT.SALESFORCE_GROUP_NAME is not null)	/* Do not pull in any data not associated with a team */
//         AND (FCA.RECORD_TYPE is not null)				/* Do not pull in any <null> RECORD_TYPE */
//         //AND (FCA.PRODUCT_GROUP_KEY <> 0)				/* Do not pull in records not related to a brand */
//         AND (FCA.TERRITORY_KEY = DT.TERRITORY_KEY)
//         AND (PG.PRODUCT_GROUP_KEY = FCA.PRODUCT_GROUP_KEY)
//         and (C.CUSTOMER_KEY=FCA.CUSTOMER_KEY)
//         and PRODUCT_NAME = 'VYEPTI'
//         and  UPPER(RECORD_TYPE) not like '%LOGISTICAL%'
//         and CALL_DATE_KEY <= '$(VmaxDate)'
//         AND SALESFORCE_GROUP_NAME ='MERIDIAN' and CALL_TYPE <> '$(vReactiveCalls)';

// Concatenate(FINAL_FACT)

// SQL 
// select distinct CUSTOMER_KEY as ACCOUNT_KEY,
// SEGMENT_VALUE,
// 'CustomerSegmentation' as GrainFlag
// from LUINC.FACT_CUSTOMER_SEGMENTATION fcs 
// JOIN LUINC.DIM_PRODUCT_GROUP pg on fcs.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY
// where PRODUCT_NAME = 'VYEPTI' and fcs.CURRENT_IND = 'Y' and fcs.SEGMENT_TYPE = 'ACCOUNT SEGMENT';

// Concatenate(FINAL_FACT)
// SELECT 
// 	   nsa.FACT_KEY,
// 	   nsa.PRODUCT_GROUP_KEY,
// 	   nsa.DATE_KEY,
//        nsa.NRX								as 'NRx',
//        nsa.TRX								as 'TRx',
//        nsa.NBRX								as 'NBRx',
//        nsa.T_QTY							as 'UNITS',
//        'NPA'								as 'GrainFlag'
// FROM LUINC.FACT_NATIONAL_SALES_WEEKLY nsa,
//      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CHANNEL ch
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//       AND (nsa.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsa.DATE_KEY = clndr.DATE_KEY)
//       AND (nsa.CHANNEL_KEY = ch.CHANNEL_KEY)
//       AND nsa.DATE_KEY <= '$(VmaxDate)';

// Concatenate(FINAL_FACT)
// Select
// 	nsp.FACT_KEY,
//     nsp.DATE_KEY,
//     nsp.PRODUCT_GROUP_KEY,
//     nsp.STRENGTH_UNITS,
//     nsp.NORMALIZED_TRX						as 'TRx',
//     nsp.UNITS								as 'UNITS',
//     'NSP'									as 'GrainFlag'
    
// FROM LUINC.FACT_NATIONAL_NON_RETAIL_WEEKLY nsp,
//      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CLASS_OF_TRADE cld
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//       AND (nsp.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsp.DATE_KEY = clndr.DATE_KEY)
//       AND (nsp.CLASS_OF_TRADE_KEY = cld.CLASS_OF_TRADE_KEY)
//       AND nsp.DATE_KEY <= '$(VmaxDate)';


// Concatenate(FINAL_FACT)
// Select
// 	nsp.FACT_KEY,
//     nsp.DATE_KEY,
//     nsp.PRODUCT_GROUP_KEY,
//     nsp.STRENGTH_UNITS,
//     nsp.NORMALIZED_TRX						as 'TRx',
//     nsp.UNITS								as 'UNITS',
//     'NSP'									as 'GrainFlag'
    
// FROM LUINC.FACT_NATIONAL_NON_RETAIL_WEEKLY nsp,
//      LUINC.DIM_MB_ACUTE_ANTI_MIGRAINE pg,
//      LUINC.DIM_CLNDR clndr,
//      LUINC.DIM_CLASS_OF_TRADE cld
// WHERE pg.MARKET_BASKET_GROUP <> 'VYEPTI'
//       AND (nsp.PRODUCT_GROUP_KEY = pg.PRODUCT_GROUP_KEY)
//       AND (nsp.DATE_KEY = clndr.DATE_KEY)
//       AND (nsp.CLASS_OF_TRADE_KEY = cld.CLASS_OF_TRADE_KEY)
//       AND nsp.DATE_KEY <= '$(VmaxDate)';

// Store FINAL_FACT INTO [$(vStorePathFact)/Vyepti_Brand_Dashboard_Fact_Combined$(vSpace)$(vSpace).qvd] (qvd);
// DROP TABLE FINAL_FACT; 

// NoConcatenate
// DIM_TERRITORY:
// SELECT DT.TERRITORY_KEY,
//        DT.TERRITORY_ID,
//        ISNULL(DT.ACCT_MGR_AD_ID,'VACANT') as ACCT_MGR_AD_ID,
//        TERR_EFF_DATE,
//        TERR_EXP_DATE, 
//        DT.TERR_CURRENT_IND
// FROM LU_DW.LUINC.DIM_TERRITORY DT
// WHERE (DT.ORGANIZATION = 'LU')
// AND SALESFORCE_GROUP_NAME ='MERIDIAN';

// Store DIM_TERRITORY INTO [$(vStorePathDim)/Vyepti_Brand_Dashboard_Dim_Territory$(vSpace)$(vSpace).qvd] (qvd);

// drop TABLE DIM_TERRITORY; 
    
    
///$tab Check Alias Name - // DONE
// Trace '$(vAllCustomerAlias_Account)';
// Trace '$(vAllCustomerAlias_Daily)';
// Trace '$(vAllCustomerAlias_Dailyinv)';
// Trace '$(vAllCustomerAlias_Monthlyinv)';

// //If(('$(vAllCustomerAlias_Account)' = 'ASD|MCKESSON|ORSINI|WALGREENS' or '$(vAllCustomerAlias_Account)' = 'ASD|CARDINAL|CURASCRIPT|MCKESSON|ORSINI|WALGREENS') and '$(vAllCustomerAlias_Daily)' = 'ASD|CARDINAL|CURASCRIPT|MCKESSON|ORSINI|WALGREENS' and '$(vAllCustomerAlias_Dailyinv)' = 'ASD|MCKESSON|ORSINI|WALGREENS' and '$(vAllCustomerAlias_Monthlyinv)' = 'ASD|MCKESSON|ORSINI|WALGREENS')  then

// Exit SCript;

// //Else

// vCustomerAliasSubject = 'Incorrect Customer Aliases for Vyepti SD/SP names in DIM_CUSTOMER';
// vCustomerAliasBody = 'Hi Team, Vyepti SD/SP Customer Aliases are not as per the standard namimg convention, i.e. ASD,MCKESSON,ORSINI,WALGREENS. Affected the refresh of Vyepti HQ Applications like Vyepti Daily Launch Tracker and Vyepti Account Performance Dashboard.';

// LIB CONNECT TO 'REST Qlik Web Connector';

// RestConnectorMasterTable:
// SQL SELECT 
// 	"status",
// 	"result",
// 	"filesattached"
// FROM CSV (header on, delimiter ",", quote """") "CSV_source"
// WITH CONNECTION (
// QUERY "to" "TSHI@lundbeck.com"
// ,QUERY "cc" "lundbeck_bi_support@zs.com;MAPT@lundbeck.com"
// ,QUERY "bcc" "MAPT@lundbeck.com;SHRU@lundbeck.com"
// ,QUERY "subject" "$(vCustomerAliasSubject)"
// ,QUERY "message" "$(vCustomerAliasBody)"
// ,QUERY "from" "North America BI & Reporting"
// ,QUERY "fromEmail" "qlik-sense-no-reply@lundbeck.com"
// ,QUERY "fromName" ""
// ,QUERY "format" "csv"
// )
// ;

// Drop Table RestConnectorMasterTable;

// ErrorTable:
// Select 
// 	* 
// From LUINC.DUMMY_TABLE;

// Exit script;