///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET NumFormat='';
SET MoneyFormat='#.##0,00 kr.;-#.##0,00 kr.';
SET TimeFormat='hh.mm.ss';
SET DateFormat='MM/DD/YYYY';
SET TimestampFormat='MM/DD/YYYY hh.mm.ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December'; 
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';


$(Must_Include=[lib://LuUS_DATA:LuUS_SharePoint/Shared Documents/Qlik Sense Data Files/Include/Qlik Cloud/FolderConnections.txt]);

LIB CONNECT TO 'LuUS_DATA:SNOWFLAKE_LuUS_BI_Reader';

LET vStart=(Year(Today())-2)&'0101';
Let vCurrent=Date(Today(),'YYYYMMDD');

// LET vSpace='';//if(upper(GetSysAttr('spaceType'))='SHARED' or (GetSysAttr('spaceType'))='','_DEV');
LET vSpace=if(upper(GetSysAttr('spaceType'))='SHARED' or (GetSysAttr('spaceType'))='','_DEV');

Trace '$(vSpace)';

Let vSF = '_SF';
Trace '$(vSF)';

	LOAD
	    CALL_TYPE
	FROM [lib://LuUS_DATA:LuUS_SharePoint/Shared Documents/Qlik Sense Data Files/ExcelFiles/ReactiveCalls.xlsx]
	(ooxml, embedded labels, table is Sheet1);
	
	let vReactiveCalls = peek('CALL_TYPE');
	
trace '$(vReactiveCalls)';
///$tab SF: Alliance
DimAlliance:
Select
    TERRITORY_ID as TERRITORY_KEY,
    TERRITORY_ID,
    TERRITORY_NAME,
    AREA_ID,
    AREA_NAME,
    REGION_ID,
    REGION_NAME,
    FIRST_NAME as ACCT_MGR_FIRST_NAME,
    LAST_NAME as ACCT_MGR_LAST_NAME,
    concat(FIRST_NAME,' ',LAST_NAME) as ACCT_MGR_FULL_NAME,
    AD_ID as ACCT_MGR_AD_ID,
    AREA_FIRST_NAME as AREA_MGR_FIRST_NAME,
    AREA_LAST_NAME as AREA_MGR_LAST_NAME,
    concat(AREA_FIRST_NAME,' ',AREA_LAST_NAME) as AREA_MGR_FULL_NAME,
    AREA_AD_ID as AREA_MGR_AD_ID,
    REGION_FIRST_NAME as RGN_MGR_FIRST_NAME,
    REGION_LAST_NAME as RGN_MGR_LAST_NAME,
    concat(REGION_FIRST_NAME,' ',REGION_LAST_NAME) as RGN_MGR_FULL_NAME,
    REGION_AD_ID as RGN_MGR_AD_ID,
    FRANCHISE,
    FRANCHISE as SALESFORCE_GROUP,
    SALESFORCE_NAME as SALESFORCE_GROUP_NAME,
    AREA_SALESFORCE_NAME as AREA_GROUP_NAME,
    'LU' as ORGANIZATION,
    EFF_DATE as TERR_EFF_DATE,
    EXP_DATE as TERR_EXP_DATE,
    CURRENT_IND as TERR_CURRENT_IND
FROM "LUNDBECK_DW"."COMMON"."TERRITORY"

union 
Select
    TERRITORY_ID as TERRITORY_KEY,
    TERRITORY_ID,
    TERRITORY_NAME,
    AREA_ID,
    AREA_NAME,
    REGION_ID,
    REGION_NAME,
    FIRST_NAME as ACCT_MGR_FIRST_NAME,
    LAST_NAME as ACCT_MGR_LAST_NAME,
    concat(FIRST_NAME,' ',LAST_NAME) as ACCT_MGR_FULL_NAME,
    '' as ACCT_MGR_AD_ID,
    AREA_FIRST_NAME as AREA_MGR_FIRST_NAME,
    AREA_LAST_NAME as AREA_MGR_LAST_NAME,
    concat(AREA_FIRST_NAME,' ',AREA_LAST_NAME) as AREA_MGR_FULL_NAME,
    '' as AREA_MGR_AD_ID,
    REGION_FIRST_NAME as RGN_MGR_FIRST_NAME,
    REGION_LAST_NAME as RGN_MGR_LAST_NAME,
    concat(REGION_FIRST_NAME,' ',REGION_LAST_NAME) as RGN_MGR_FULL_NAME,
    '' as RGN_MGR_AD_ID,
    '',
    '' as SALESFORCE_GROUP,
    SALESFORCE_NAME as SALESFORCE_GROUP_NAME,
    '' as AREA_GROUP_NAME,
    'OTSUKA' as ORGANIZATION,
    EFF_DATE as TERR_EFF_DATE,
    EXP_DATE as TERR_EXP_DATE,
    CURRENT_IND as TERR_CURRENT_IND
FROM "LUNDBECK_DW"."COMMON"."OTS_TERRITORY"

union 

Select
    TERRITORY_ID as TERRITORY_KEY,
    TERRITORY_ID,
    TERRITORY_NAME,
    AREA_ID,
    AREA_NAME,
    REGION_ID,
    REGION_NAME,
    FIRST_NAME as ACCT_MGR_FIRST_NAME,
    LAST_NAME as ACCT_MGR_LAST_NAME,
    concat(FIRST_NAME,' ',LAST_NAME) as ACCT_MGR_FULL_NAME,
    '' as ACCT_MGR_AD_ID,
    AREA_FIRST_NAME as AREA_MGR_FIRST_NAME,
    AREA_LAST_NAME as AREA_MGR_LAST_NAME,
    concat(AREA_FIRST_NAME,' ',AREA_LAST_NAME) as AREA_MGR_FULL_NAME,
    '' as AREA_MGR_AD_ID,
    REGION_FIRST_NAME as RGN_MGR_FIRST_NAME,
    REGION_LAST_NAME as RGN_MGR_LAST_NAME,
    concat(REGION_FIRST_NAME,' ',REGION_LAST_NAME) as RGN_MGR_FULL_NAME,
    '' as RGN_MGR_AD_ID,
    '',
    '' as SALESFORCE_GROUP,
    SALESFORCE_NAME as SALESFORCE_GROUP_NAME,
    '' as AREA_GROUP_NAME,
    'TAKEDA' as ORGANIZATION,
    EFF_DATE as TERR_EFF_DATE,
    EXP_DATE as TERR_EXP_DATE,
    CURRENT_IND as TERR_CURRENT_IND
FROM "LUNDBECK_DW"."COMMON"."TAK_TERRITORY"
;
STORE DimAlliance into [$(vQSBIE_ExtractQVD_Dimension)/DIM_TERRITORY_ALLIANCE$(vSpace)$(vSF).qvd](qvd);
Drop Table DimAlliance;
///$tab SF: P&E PSY ALLIANCE
FACT_CUSTOMER_SEGMENTATION:
SQL
Select LUNDBECK_ID as CUSTOMER_KEY,
PRODUCT_GROUP_CODE as PRODUCT_GROUP_KEY,
SEGMENT_DESC as SEGMENT_VALUE,
SEGMENT_TYPE
From LUNDBECK_DW.ANALYTICS.CUSTOMER_SEGMENTATION cs
INNER JOIN LUNDBECK_DW.COMMON.PRODUCTS pg  ON pg.PRODUCT_GROUP_NAME = cs.PRODUCT_GROUP_NAME
where CURRENT_IND='Y';

// LOAD *

// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_CUSTOMER_SEGMENTATION$(vSpace)$(vSF).qvd] (qvd)
// WHERE CURRENT_IND = 'Y';

NoConcatenate
[DIM_SEGMENTATION]:
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY
RESIDENT FACT_CUSTOMER_SEGMENTATION;

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS HCP_TIER
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'HCP TIER';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS MDD_TIER
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'MDD TIER';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT 
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS SCZ_TIER
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'SCZ TIER';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS TARGETED_DECILE
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'TARGETED DECILE';

//Shubham
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS POG
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'PRECISION OPPORTUNITY GROUP';

//Shubham
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS ATTITUDINAL
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'ATTITUDINAL';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT 
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
 SEGMENT_VALUE AS TARGETING_SEGMENT
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'TARGETING SEGMENT';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS VALUE_TIER
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'VALUE TIER';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS WRITER_STATUS
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'WRITER STATUS';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS NORTHERA_PRIORITY
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'PRIORITIZATION';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS VYEPTI_ACCOUNT_SEGMENT
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'ACCOUNT SEGMENT';

// ADDED ON 15 jULY
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS ALAI_INITIATOR
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'ALAI INITIATOR';

// ADDED ON 15 jULY
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS MAINTENA_INITIATOR
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'MAINTENA INITIATOR';

// ADDED ON 30 June
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS ALAI_NBRX
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'ALAI NBRX';

// ADDED ON 30 June
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS ABIM_NBRX
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'ABIM NBRX';
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS BP_VALUE_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'BP VALUE TIER';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS SZ_VALUE_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'SZ VALUE TIER';

// ADDED ON 16 March
left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS BPI_IND
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'BP IND';

left JOIN([DIM_SEGMENTATION])
LOAD dISTINCT
CUSTOMER_KEY,
//BRAND_KEY,
PRODUCT_GROUP_KEY,
SEGMENT_VALUE AS REXULTI_DECLINER
RESIDENT FACT_CUSTOMER_SEGMENTATION
WHERE SEGMENT_TYPE= 'DECLINER';


STORE DIM_SEGMENTATION INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_SEGMENTATION$(vSpace)$(vSF).qvd] (qvd);

DROP Table FACT_CUSTOMER_SEGMENTATION;
DROP Table DIM_SEGMENTATION;



DIM_TERRITORY:

LOAD *

FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_TERRITORY_ALLIANCE$(vSpace)$(vSF).qvd] (qvd);

 
DIM_ALLIANCE:
LOAD
TERRITORY_KEY,
TERRITORY_ID AS OTSUKA_TERRITORY_ID,
TERRITORY_NAME AS OTSUKA_TERRITORY_NAME,
AREA_ID AS OTSUKA_AREA_ID,
AREA_NAME AS OTSUKA_AREA_NAME,
REGION_ID AS OTSUKA_REGION_ID,
REGION_NAME AS OTSUKA_REGION_NAME,
//ZONE_ID AS OTSUKA_ZONE_ID,
//ZONE_NAME AS OTSUKA_ZONE_NAME,
ACCT_MGR_FIRST_NAME AS OTSUKA_ACCT_MGR_FIRST_NAME,
ACCT_MGR_LAST_NAME AS OTSUKA_ACCT_MGR_LAST_NAME,
ACCT_MGR_FULL_NAME AS OTSUKA_ACCT_MGR_FULL_NAME,
//ACCT_MGR_AD_ID AS OTSUKA_ACCT_MGR_AD_ID,
AREA_MGR_FIRST_NAME AS OTSUKA_AREA_MGR_FIRST_NAME,
AREA_MGR_LAST_NAME AS OTSUKA_AREA_MGR_LAST_NAME,
AREA_MGR_FULL_NAME AS OTSUKA_AREA_MGR_FULL_NAME,
AREA_MGR_AD_ID AS OTSUKA_AREA_MGR_AD_ID,
RGN_MGR_FIRST_NAME AS OTSUKA_RGN_MGR_FIRST_NAME,
RGN_MGR_LAST_NAME AS OTSUKA_RGN_MGR_LAST_NAME,
RGN_MGR_FULL_NAME AS OTSUKA_RGN_MGR_FULL_NAME,
//RGN_MGR_AD_ID AS OTSUKA_RGN_MGR_AD_ID,
// ZONE_MGR_FIRST_NAME AS OTSUKA_ZONE_MGR_FIRST_NAME,
// ZONE_MGR_LAST_NAME AS OTSUKA_ZONE_MGR_LAST_NAME,
// ZONE_MGR_FULL_NAME AS OTSUKA_ZONE_MGR_FULL_NAME,
// ZONE_MGR_AD_ID AS OTSUKA_ZONE_MGR_AD_ID,
//FRANCHISE AS OTSUKA_FRANCHISE,
//SALESFORCE_GROUP AS OTSUKA_SALESFORCE_GROUP,
SALESFORCE_GROUP_NAME AS OTSUKA_SALESFORCE_GROUP_NAME,
//AREA_GROUP_NAME AS OTSUKA_AREA_GROUP_NAME,
ORGANIZATION AS ALLIANCE_PARTNER_NAME,
TERR_EFF_DATE AS OTSUKA_TERR_EFF_DATE,
TERR_EXP_DATE AS OTSUKA_TERR_EXP_DATE,
TERR_CURRENT_IND AS OTSUKA_TERR_CURRENT_IND

RESIDENT DIM_TERRITORY
WHERE ORGANIZATION = 'OTSUKA';

Concatenate

LOAD
TERRITORY_KEY,
TERRITORY_ID AS TAKEDA_TERRITORY_ID,
TERRITORY_NAME AS TAKEDA_TERRITORY_NAME,
AREA_ID AS TAKEDA_AREA_ID,
AREA_NAME AS TAKEDA_AREA_NAME,
REGION_ID AS TAKEDA_REGION_ID,
REGION_NAME AS TAKEDA_REGION_NAME,
// ZONE_ID AS TAKEDA_ZONE_ID,
// ZONE_NAME AS TAKEDA_ZONE_NAME,
ACCT_MGR_FIRST_NAME AS TAKEDA_ACCT_MGR_FIRST_NAME,
ACCT_MGR_LAST_NAME AS TAKEDA_ACCT_MGR_LAST_NAME,
ACCT_MGR_FULL_NAME AS TAKEDA_ACCT_MGR_FULL_NAME,
//ACCT_MGR_AD_ID AS TAKEDA_ACCT_MGR_AD_ID,
AREA_MGR_FIRST_NAME AS TAKEDA_AREA_MGR_FIRST_NAME,
AREA_MGR_LAST_NAME AS TAKEDA_AREA_MGR_LAST_NAME,
AREA_MGR_FULL_NAME AS TAKEDA_AREA_MGR_FULL_NAME,
//AREA_MGR_AD_ID AS TAKEDA_AREA_MGR_AD_ID,
RGN_MGR_FIRST_NAME AS TAKEDA_RGN_MGR_FIRST_NAME,
RGN_MGR_LAST_NAME AS TAKEDA_RGN_MGR_LAST_NAME,
RGN_MGR_FULL_NAME AS TAKEDA_RGN_MGR_FULL_NAME,
//RGN_MGR_AD_ID AS TAKEDA_RGN_MGR_AD_ID,
// ZONE_MGR_FIRST_NAME AS TAKEDA_ZONE_MGR_FIRST_NAME,
// ZONE_MGR_LAST_NAME AS TAKEDA_ZONE_MGR_LAST_NAME,
// ZONE_MGR_FULL_NAME AS TAKEDA_ZONE_MGR_FULL_NAME,
// ZONE_MGR_AD_ID AS TAKEDA_ZONE_MGR_AD_ID,
//FRANCHISE AS TAKEDA_FRANCHISE,
//SALESFORCE_GROUP AS TAKEDA_SALESFORCE_GROUP,
SALESFORCE_GROUP_NAME AS TAKEDA_SALESFORCE_GROUP_NAME,
//AREA_GROUP_NAME AS TAKEDA_AREA_GROUP_NAME,
ORGANIZATION AS ALLIANCE_PARTNER_NAME,
TERR_EFF_DATE AS TAKEDA_TERR_EFF_DATE,
TERR_EXP_DATE AS TAKEDA_TERR_EXP_DATE,
TERR_CURRENT_IND AS TAKEDA_TERR_CURRENT_IND

Resident DIM_TERRITORY
WHERE ORGANIZATION = 'TAKEDA';

STORE DIM_ALLIANCE INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_ALLIANCE$(vSpace)$(vSF).qvd] (qvd);

DROP Table DIM_ALLIANCE;
DROP Table DIM_TERRITORY;


///$tab SF: Segment
NoConcatenate
Segment:
SQL
   SELECT 
     cs.LUNDBECK_ID as CUSTOMER_KEY
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'VALUE TIER' THEN cs.SEGMENT_DESC else NULL end) as VALUE_TIER
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'VALUE TIER' THEN cs.SEGMENT_DESC else NULL  END) as VALUE_TIER_SORT
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'HFT' THEN cs.SEGMENT_DESC else NULL end) as HFT    //madhur
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'HFT' THEN cs.SELECTION_ORDER else NULL  END) as HFT_SORT   //madhur
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'KEY INDICATION MESSAGE' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as KEY_INDICATION_MESSAGE
   , max(CASE WHEN CS.PRODUCT_GROUP_NAME = 'ABILIFY LAI FRANCHISE' AND cs.SEGMENT_TYPE = 'PRIMARY PRODUCT MESSAGE' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC ELSE NULL END) as PRIMARY_PRODUCT_MESSAGE 
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'VALUE TIER' THEN cs.SEGMENT_DESC else NULL end) as VALUE_TIER_ABIM
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'VALUE TIER' THEN cs.SEGMENT_DESC else NULL  END) as VALUE_TIER_SORT_ABIM
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ALAI INITIATOR' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ALAI_INITIATOR//added on 15 July
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'MAINTENA INITIATOR' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as MAINTENA_INITIATOR//added on 15 July
    , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ALAI NBRX' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ALAI_NBRX//added on 15 July
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ABIM NBRX' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ABIM_NBRX//added on 15 July
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'BP IND' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as BPI_IND//Added 16 March
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'LLAI IND' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as LLAI_IND//Added 25 AUG'23
   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'FLAG - BIPOLAR TARGET'  AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as FLAG_BIPOLAR_TARGET //Added 25 AUG'23
   , max(CASE WHEN cs.SEGMENT_TYPE = 'TARGETED DECILE' THEN cs.SEGMENT_DESC else NULL end) as TARGETED_DECILE
   , max(CASE WHEN cs.SEGMENT_TYPE = 'TARGETED DECILE' THEN cs.SEGMENT_DESC else NULL  END) as TARGETED_DECILE_SORT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'PRECISION OPPORTUNITY GROUP' THEN cs.SEGMENT_DESC else NULL end) as POG   
   , max(CASE WHEN cs.SEGMENT_TYPE = 'PRECISION OPPORTUNITY GROUP' THEN cs.SEGMENT_DESC else NULL  END) as POG_SORT   
   , max(CASE WHEN cs.SEGMENT_TYPE = 'ATTITUDINAL' THEN cs.SEGMENT_DESC else NULL end) as ATTITUDINAL     
   , max(CASE WHEN cs.SEGMENT_TYPE = 'ATTITUDINAL' THEN cs.SEGMENT_DESC else NULL  END) as ATTITUDINAL_SORT    
   , max(CASE WHEN cs.SEGMENT_TYPE = 'MULTIDIMENSIONAL SEGMENT' THEN cs.SEGMENT_DESC else NULL end) as SEGMENT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'MULTIDIMENSIONAL SEGMENT' THEN cs.SEGMENT_DESC  else NULL  END) as SEGMENT_SORT
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as NORTHERA_SEGMENT
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'Y' THEN cs.SELECTION_ORDER  else  NULL END ) as NORTHERA_SORT
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'N' THEN cs.SEGMENT_DESC else NULL end ) as NORTHERA_SEGMENT_NEW
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'N' THEN cs.SELECTION_ORDER  else  NULL END ) as NORTHERA_SORT_NEW 
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'PRIORITIZATION' THEN cs.SEGMENT_DESC else NULL end ) as NORTHERA_PRIORITY
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'PRIORITIZATION' THEN cs.SELECTION_ORDER else NULL  END)  as NORTHERA_PRIORITY_SORT
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SEGMENT_DESC else NULL end) as NORTHERA_WRITER_STATUS
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SEGMENT_DESC else NULL end) as NORTHERA_WRITER_STATUS_DESC
   , max(CASE WHEN pg.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SELECTION_ORDER else NULL  END) as NORTHERA_WRITER_STATUS_SORT

   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'HCP TIER' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_HCP_TIER
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'HCP TIER' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_HCP_TIER_SORT
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'REXULTI MDD' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_SEGMENT
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'REXULTI MDD' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_SEGMENT_SORT
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCO TIER' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_AAD_HCO_TIER                                     //ON Prem Change                             
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCO TIER' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_AAD_HCO_TIER_SORT                             //On Prem Change
//    , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCP TIER' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_AAD_HCP_TIER                                   //On Prem Change
//    , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCP TIER' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_AAD_HCP_TIER_SORT//On Prem Change
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'REXULTI AADAD' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_AAD_HCP_TIER                                   //On Prem Change
   , max(CASE WHEN cs.PRODUCT_GROUP_NAME = 'REXULTI AADAD' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_AAD_HCP_TIER_SORT  
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AADAD HFT' THEN cs.SEGMENT_DESC else NULL end ) as  AADAD_HFT                                  //On Prem Change
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AADAD HFT' THEN cs.SELECTION_ORDER else NULL  END) as  AADAD_HFT_SORT
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'MDD TIER' THEN cs.SEGMENT_DESC else NULL end ) as REXULTI_MDD_TIER
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'MDD TIER' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_MDD_TIER_SORT
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ TIER' THEN cs.SEGMENT_DESC else NULL end ) as REXULTI_SCZ_TIER
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ TIER' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_SCZ_TIER_SORT
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ PEDIATRIC TARGET' THEN cs.SEGMENT_DESC else NULL end ) as REXULTI_SCZ_PED_TARGET
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ PEDIATRIC TARGET' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_SCZ_PED_TARGET_SORT
   , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'DECLINER' THEN cs.SEGMENT_DESC else NULL end ) as REXULTI_DECLINER
//    , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SEGMENT_DESC else NULL end ) as  REXULTI_SEGMENT
//    , max(CASE WHEN pg.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_SEGMENT_SORT
   
   , max(CASE WHEN pg.BRAND = 'VYEPTI' AND cs.SEGMENT_TYPE = 'ACCOUNT SEGMENT' THEN cs.SEGMENT_DESC else NULL end ) as ACCOUNT_SEGMENT
   , max(CASE WHEN pg.BRAND = 'TRINTELLIX' AND cs.SEGMENT_TYPE = 'TRINTELLIX NBRX DECLINER' THEN cs.SEGMENT_DESC else NULL end ) as TRINTELLIX_NBRX_DECLINER    

   , max(CASE WHEN pg.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE ='FLAG - BIPOLAR TARGET' AND cs.SEGMENT_DESC = 'Y' THEN 'Y' else NULL end) as ABILIFY_MAINTENA_BIPOLAR_LEAD
   , MAX(CASE WHEN pg.BRAND = 'VYEPTI' and cs.SEGMENT_TYPE = 'ACGRP BOTOX DECILE' THEN cs.SEGMENT_DESC ELSE NULL END) as "aCGRP BOTOX Decile"
   FROM LUNDBECK_DW.ANALYTICS.CUSTOMER_SEGMENTATION cs
		LEFT OUTER JOIN "LUNDBECK_DW"."COMMON"."PRODUCTS" as pg ON pg.BRAND = cs.PRODUCT_GROUP_NAME
   WHERE cs.CURRENT_IND = 'Y' 
   GROUP BY cs.LUNDBECK_ID
   ;
   
left join(Segment)
select Distinct 
    cs.LUNDBECK_ID AS CUSTOMER_KEY
//     ,MAX(CASE WHEN cs.SEGMENT_TYPE = 'DECILE SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as "Decile Segment"
    ,MAX(CASE WHEN cs.SEGMENT_TYPE = 'SHARE SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as "Share Segment"
    ,MAX(CASE WHEN cs.SEGMENT_TYPE = 'SEGMENT' THEN cs.SEGMENT_DESC ELSE NULL END) as "Vyepti Segment" //praw
FROM LUNDBECK_DW.ANALYTICS.CUSTOMER_SEGMENTATION cs
INNER JOIN LUNDBECK_DW.COMMON.CUSTOMERS c on cs.LUNDBECK_ID=c.LUNDBECK_ID
LEFT OUTER JOIN LUNDBECK_DW.COMMON.PRODUCTS b ON b.PRODUCT_GROUP_NAME = cs.PRODUCT_GROUP_NAME
WHERE CURRENT_IND = 'Y' AND b.BRAND in ('VYEPTI') and PDRP_IND<>'Y' AND SEGMENT_DESC <> 'UNSEGMENTED'
GROUP BY cs.LUNDBECK_ID;
 
///$tab SF: P&E PSY CUST
FACT_CALL_PLAN:
SQL SELECT START_DATE_KEY as DATE_KEY, 
     END_DATE_KEY as DATE_TO_KEY, 
     LUNDBECK_ID as CUSTOMER_KEY, 
     DETAIL_PRIORITY,
     pg.PRODUCT_GROUP_CODE as PRODUCT_GROUP_KEY, 
     T.TERRITORY_ID as TERRITORY_KEY, 
     PLANNED_CALLS
FROM "LUNDBECK_DW"."ANALYTICS"."CALL_PLAN_LU_SF" F 
INNER JOIN "LUNDBECK_DW"."COMMON"."PRODUCTS" as pg ON pg.BRAND = f.PRODUCT_GROUP_NAME
INNER JOIN "LUNDBECK_DW"."COMMON"."TERRITORY" T ON T.TERRITORY_ID=F.TERRITORY_ID
WHERE  LUNDBECK_ID <> '0' and f.CURRENT_IND='Y';

DIM_PRODUCT_GROUP:
LOAD PRODUCT_GROUP_KEY, 
     if(PRODUCT_GROUP = 'REXULTI AADAD', 'REXULTI AADAD' , PRODUCT_NAME) as PRODUCT_NAME
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace)$(vSF).qvd]
(qvd);


DIM_MASTER_CUSTOMER:
LOAD 
     CUSTOMER_KEY, 
     LUNDBECK_ID, 
     ORGANIZATION_NAME, 
     CUSTOMER_FIRST_NAME, 
     CUSTOMER_MIDDLE_NAME, 
     CUSTOMER_LAST_NAME, 
     CUSTOMER_NAME, 
     CUSTOMER_ADDR1, 
     CUSTOMER_ADDR2, 
     CUSTOMER_CITY, 
     CUSTOMER_STATE, 
     CUSTOMER_STATE_ABBREV, 
     CUSTOMER_ZIP, 
     CUSTOMER_ADDR_LATITUDE, 
     CUSTOMER_ADDR_LONGITUDE, 
     CUSTOMER_PHONE_TYPE, 
     CUSTOMER_PHONE, 
     CUSTOMER_PHONE_EXT, 
     CUSTOMER_STATUS, 
     CUSTOMER_STATUS_REASON, 
     CUSTOMER_TYPE, 
     CUSTOMER_SUB_TYPE_CD, 
     CUSTOMER_SUB_TYPE_NAME, 
     CUSTOMER_DETAIL_TYPE_CODE, 
     CUSTOMER_DETAIL_TYPE, 
     FACILITY_TYPE, 
     NPI, 
     ME_ID, 
     SPECIALTY,
     IF(ISNULL(DATA_STEWARDSHIP_EXCLUSION_FLAG),'N', DATA_STEWARDSHIP_EXCLUSION_FLAG) as DATA_STEWARDSHIP_EXCLUSION_FLAG, 
     IF(ISNULL(LU_NO_CONTACT_FLAG),'N', LU_NO_CONTACT_FLAG) as LU_NO_CONTACT_FLAG,  
     IF(ISNULL(NO_CONTACT_FLAG),'N', NO_CONTACT_FLAG) as NO_CONTACT_FLAG, 
     IF(ISNULL(PDRP_IND),'N', PDRP_IND) as PDRP_IND, 
     IF(ISNULL(PSYCH_SPECIALTY_IND),'N', PSYCH_SPECIALTY_IND) as PSYCH_SPECIALTY_IND, 
     IF(ISNULL(NEURO_SPECIALTY_IND),'N', NEURO_SPECIALTY_IND) as NEURO_SPECIALTY_IND, 
     CARDIO_SPECIALTY_IND, 
     PRIMARY_CARE_SPECIALTY_IND, 
     MID_LEVEL_PRACTITIONER_IND, 
     IF(ISNULL(ABILIFY_MAINTENA_EXCLUSION_IND),'N', ABILIFY_MAINTENA_EXCLUSION_IND) as ABILIFY_MAINTENA_EXCLUSION_IND,  
     CARNEXIV_EXCLUSION_IND, 
     IF(ISNULL(NORTHERA_EXCLUSION_IND),'N', NORTHERA_EXCLUSION_IND) as NORTHERA_EXCLUSION_IND, 
     ONFI_EXCLUSION_IND, 
     IF(ISNULL(REXULTI_EXCLUSION_IND),'N',REXULTI_EXCLUSION_IND) as REXULTI_EXCLUSION_IND, 
     IF(ISNULL(REXULTI_AAD_EXCLUSION_IND),'N',REXULTI_AAD_EXCLUSION_IND) as REXULTI_AAD_EXCLUSION_IND,   //ON Prem Change
     IF(ISNULL(REXULTI_SCZ_EXCLUSION_IND),'N',REXULTI_SCZ_EXCLUSION_IND) as REXULTI_SCZ_EXCLUSION_IND,   //ON Prem Change
     IF(ISNULL(REXULTI_MDD_EXCLUSION_IND),'N',REXULTI_MDD_EXCLUSION_IND) as REXULTI_MDD_EXCLUSION_IND,   //ON Prem Change
	 SABRIL_EXCLUSION_IND, 
     IF(ISNULL(TRINTELLIX_EXCLUSION_IND),'N',TRINTELLIX_EXCLUSION_IND) as TRINTELLIX_EXCLUSION_IND, 
     XENAZINE_EXCLUSION_IND, 
     IF(ISNULL(ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND),'N',ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND) as ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND,  
     IF(ISNULL(REXULTI_RETAIL_HCO_EXCL_IND),'N',REXULTI_RETAIL_HCO_EXCL_IND) as REXULTI_RETAIL_HCO_EXCL_IND,
     IF(ISNULL(REXULTI_RETAIL_HCO_AAD_EXCL_IND),'N',REXULTI_RETAIL_HCO_AAD_EXCL_IND) as REXULTI_RETAIL_HCO_AAD_EXCL_IND,     //ON Prem Change
     IF(ISNULL(REXULTI_RETAIL_HCO_SCZ_EXCL_IND),'N',REXULTI_RETAIL_HCO_SCZ_EXCL_IND) as REXULTI_RETAIL_HCO_SCZ_EXCL_IND,     //ON Prem Change
     IF(ISNULL(REXULTI_RETAIL_HCO_MDD_EXCL_IND),'N',REXULTI_RETAIL_HCO_MDD_EXCL_IND) as REXULTI_RETAIL_HCO_MDD_EXCL_IND,     //ON Prem Change
     IF(ISNULL(TRINTELLIX_RETAIL_HCO_EXCL_IND),'N',TRINTELLIX_RETAIL_HCO_EXCL_IND) as TRINTELLIX_RETAIL_HCO_EXCL_IND,  
     KEY_OPINION_LEADER_FLAG, 
     HIN, 
     EPILEPSY_CENTER, 
     HUNTINGTONS_STUDY_GROUP, 
     LIS_TARGET, 
     PCT_LIS_CLAIMS, 
     NORTHERA_DUAL_ELIGIBLE, 
     PCT_NOR_DUAL_ELIG_CLAIMS, 
     NOR_DUAL_ELIG_PAT_SAMPLE_COUNT, 
     NOR_DUAL_ELIG_PAT_SAMPLE_DESC, 
     MSA, 
     CBSA,
     VYEPTI_EXCLUSION_IND,
     NORTHERA_SPECIALTY_GROUP,
     REXULTI_SALES_BI_VISIBILITY,
     If(PRIMARY_CARE_SPECIALTY_IND='Y' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','PCP',
        If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='Y' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','PSYCH',
           If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='Y' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','NEURO',
               If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='Y','NPPA',
                If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='Y' and MID_LEVEL_PRACTITIONER_IND='N','CARD',
				   If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' 
                   and MID_LEVEL_PRACTITIONER_IND='N','OTHER'
        )))))) as [Speciality Group],
        PRESCRIPTIVE_AUTHORITY_IND
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace)$(vSF).qvd]
(qvd);

LEFT Join (FACT_CALL_PLAN)
LOAD * 
Resident DIM_PRODUCT_GROUP;

DROP Tables DIM_PRODUCT_GROUP;



TEMP_CALL_PLAN_TARGET:
LOAD DISTINCT CUSTOMER_KEY, PRODUCT_NAME
Resident FACT_CALL_PLAN;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'ABILIFY MAINTENA','Y','N') AS Lu_Call_Plan_Target_Abilify_Maintena
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'ABILIFY MAINTENA';


LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'ABILIFY LAI FRANCHISE','Y','N') AS Lu_Call_Plan_Target_Abilify_LAI_Franchise
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'ABILIFY LAI FRANCHISE';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'REXULTI','Y','N') AS Lu_Call_Plan_Target_Rexulti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'REXULTI';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'REXULTI AADAD','Y','N') AS Lu_Call_Plan_Target_Rexulti_AADAD
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'REXULTI AADAD';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'TRINTELLIX','Y','N') AS Lu_Call_Plan_Target_Trintellix
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'TRINTELLIX';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'NORTHERA','Y','N') AS Lu_Call_Plan_Target_Northera
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'NORTHERA';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'VYEPTI','Y','N') AS Lu_Call_Plan_Target_Vyepti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'VYEPTI';

Drop Tables TEMP_CALL_PLAN_TARGET;

TEMP_CALL_PLAN_TARGET:
LOAD DISTINCT CUSTOMER_KEY, PRODUCT_NAME,DETAIL_PRIORITY
Resident FACT_CALL_PLAN;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'REXULTI','Y','N') AS Lu_P1_Call_Plan_Target_Rexulti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'REXULTI' and DETAIL_PRIORITY=1;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD *
Resident Segment;

Drop Table Segment;

NoConcatenate
FCA:
sql select 
distinct LUNDBECK_ID as CUSTOMER_KEY,
'Y' as "CPD PDE Visible"
from "LUNDBECK_DW"."ANALYTICS"."CALL_ACTIVITY_LU_SF"
where REPORT_PRESCRIBER_CATEGORY ='LICENSED/PRESCRIBER'
and CALL_TYPE <> '$(vReactiveCalls)';          //revisit

Left Join (DIM_MASTER_CUSTOMER)
Load CUSTOMER_KEY, [CPD PDE Visible]
Resident FCA;

Drop table FCA;

NoConcatenate
DIM_CUST:
LOAD
    CUSTOMER_KEY,
    LUNDBECK_ID,
    ORGANIZATION_NAME,
    CUSTOMER_FIRST_NAME,
    CUSTOMER_MIDDLE_NAME,
    CUSTOMER_LAST_NAME,
    CUSTOMER_NAME,
    CUSTOMER_ADDR1,
    CUSTOMER_ADDR2,
    CUSTOMER_CITY,
    CUSTOMER_STATE,
    CUSTOMER_STATE_ABBREV,
    CUSTOMER_ZIP,
    CUSTOMER_ADDR_LATITUDE,
    CUSTOMER_ADDR_LONGITUDE,
    CUSTOMER_PHONE_TYPE,
    CUSTOMER_PHONE,
    CUSTOMER_PHONE_EXT,
    CUSTOMER_STATUS,
    CUSTOMER_STATUS_REASON,
    CUSTOMER_TYPE,
    CUSTOMER_SUB_TYPE_CD,
    CUSTOMER_SUB_TYPE_NAME,
    CUSTOMER_DETAIL_TYPE_CODE,
    CUSTOMER_DETAIL_TYPE,
    FACILITY_TYPE,
    NPI,
    ME_ID,
    SPECIALTY,
    DATA_STEWARDSHIP_EXCLUSION_FLAG,
    LU_NO_CONTACT_FLAG,
    NO_CONTACT_FLAG,
    PDRP_IND,
    PSYCH_SPECIALTY_IND,
    NEURO_SPECIALTY_IND,
    CARDIO_SPECIALTY_IND,
    PRIMARY_CARE_SPECIALTY_IND,
    MID_LEVEL_PRACTITIONER_IND,
    ABILIFY_MAINTENA_EXCLUSION_IND,
    CARNEXIV_EXCLUSION_IND,
    NORTHERA_EXCLUSION_IND,
    ONFI_EXCLUSION_IND,
    REXULTI_EXCLUSION_IND,
    REXULTI_AAD_EXCLUSION_IND,
    REXULTI_SCZ_EXCLUSION_IND,
    REXULTI_MDD_EXCLUSION_IND,
    REXULTI_RETAIL_HCO_SCZ_EXCL_IND,
    REXULTI_RETAIL_HCO_MDD_EXCL_IND,
    SABRIL_EXCLUSION_IND,
    TRINTELLIX_EXCLUSION_IND,
    XENAZINE_EXCLUSION_IND,
    ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND,
    REXULTI_RETAIL_HCO_EXCL_IND,
    REXULTI_RETAIL_HCO_AAD_EXCL_IND,
    TRINTELLIX_RETAIL_HCO_EXCL_IND,
    KEY_OPINION_LEADER_FLAG,
    HIN,
    EPILEPSY_CENTER,
    HUNTINGTONS_STUDY_GROUP,
    LIS_TARGET,
    PCT_LIS_CLAIMS,
    NORTHERA_DUAL_ELIGIBLE,
    PCT_NOR_DUAL_ELIG_CLAIMS,
    NOR_DUAL_ELIG_PAT_SAMPLE_COUNT,
    NOR_DUAL_ELIG_PAT_SAMPLE_DESC,
    MSA,
    CBSA,
    VYEPTI_EXCLUSION_IND,
    NORTHERA_SPECIALTY_GROUP,
    REXULTI_SALES_BI_VISIBILITY,
    "Speciality Group",
    Lu_Call_Plan_Target_Abilify_Maintena,
    Lu_Call_Plan_Target_Abilify_LAI_Franchise,
    Lu_Call_Plan_Target_Rexulti,
    Lu_Call_Plan_Target_Rexulti_AADAD,
    Lu_Call_Plan_Target_Trintellix,
    Lu_Call_Plan_Target_Northera,
    Lu_Call_Plan_Target_Vyepti,
    Lu_P1_Call_Plan_Target_Rexulti,
    if(IsNULL(VALUE_TIER),'NULL',VALUE_TIER) as VALUE_TIER,
    VALUE_TIER_SORT,
    if(IsNULL(HFT),'NULL',pick(match(HFT,'HCP HYPERFOCUS TARGET','ARISTADA HYPERFOCUS TARGET'),'HCP HFT','ARISTADA HFT')) as HFT,
    HFT_SORT,
    if(IsNULL(VALUE_TIER_ABIM),'NULL',VALUE_TIER_ABIM) as VALUE_TIER_ABIM,
    VALUE_TIER_SORT_ABIM,
    if(ISNULL(KEY_INDICATION_MESSAGE),'N/A',KEY_INDICATION_MESSAGE) AS KEY_INDICATION_MESSAGE,
    if(ISNULL(PRIMARY_PRODUCT_MESSAGE),'N/A',PRIMARY_PRODUCT_MESSAGE) AS PRIMARY_PRODUCT_MESSAGE, 
    if(IsNULL(LLAI_IND),'NULL',LLAI_IND) as LLAI_IND,
    if(IsNULL(FLAG_BIPOLAR_TARGET),'NULL',FLAG_BIPOLAR_TARGET) as FLAG_BIPOLAR_TARGET,
    if(IsNULL(ALAI_INITIATOR),'NULL',ALAI_INITIATOR) as ALAI_INITIATOR,
    if(IsNULL(MAINTENA_INITIATOR),'NULL',MAINTENA_INITIATOR) as MAINTENA_INITIATOR,
    if(IsNULL(ALAI_NBRX),'NULL', ALAI_NBRX) as ALAI_NBRX,
    if(IsNULL(ABIM_NBRX),'NULL',ABIM_NBRX) as ABIM_NBRX,
    if(IsNULL(BPI_IND),'NULL',BPI_IND) as BPI_IND,
    if(IsNULL(TARGETED_DECILE),'NULL',TARGETED_DECILE) as TARGETED_DECILE,
    TARGETED_DECILE_SORT,
    if(IsNULL(POG),'NULL',POG) as POG,    
    POG_SORT,   
    if(IsNULL(ATTITUDINAL),'NULL',ATTITUDINAL) as ATTITUDINAL,   
    ATTITUDINAL_SORT,       
    if(IsNULL(SEGMENT),'NULL',SEGMENT) as SEGMENT,
    SEGMENT_SORT,
    if(IsNULL(NORTHERA_SEGMENT),'NULL',NORTHERA_SEGMENT) as NORTHERA_SEGMENT,
    NORTHERA_SORT,
    if(IsNULL(NORTHERA_SEGMENT_NEW),'NULL',NORTHERA_SEGMENT_NEW) as NORTHERA_SEGMENT_NEW,
    NORTHERA_SORT_NEW,
    if(IsNULL(NORTHERA_PRIORITY),'NULL',NORTHERA_PRIORITY) as NORTHERA_PRIORITY,
    NORTHERA_PRIORITY_SORT,
    if(IsNULL(NORTHERA_WRITER_STATUS),'NULL',NORTHERA_WRITER_STATUS) as NORTHERA_WRITER_STATUS,
    if(IsNULL(NORTHERA_WRITER_STATUS_DESC),'NULL',NORTHERA_WRITER_STATUS_DESC) as NORTHERA_WRITER_STATUS_DESC,
    NORTHERA_WRITER_STATUS_SORT,
    if(IsNULL(REXULTI_HCP_TIER),'NULL',REXULTI_HCP_TIER) as REXULTI_HCP_TIER,
    REXULTI_HCP_TIER_SORT,
    if(IsNULL(REXULTI_SEGMENT),'NULL',REXULTI_SEGMENT) as REXULTI_SEGMENT,
    REXULTI_SEGMENT_SORT,
    if(IsNULL(REXULTI_AAD_HCO_TIER),'NULL',REXULTI_AAD_HCO_TIER) as REXULTI_AAD_HCO_TIER,
    REXULTI_AAD_HCO_TIER_SORT,
    if(IsNULL(REXULTI_AAD_HCP_TIER),'NULL',REXULTI_AAD_HCP_TIER) as REXULTI_AAD_HCP_TIER,
    REXULTI_AAD_HCP_TIER_SORT,
    if(IsNULL(AADAD_HFT),'NULL',if(AADAD_HFT='Y','AADAD HFT',AADAD_HFT)) as AADAD_HFT,
    AADAD_HFT_SORT,
    if(IsNULL(REXULTI_MDD_TIER),'NULL',REXULTI_MDD_TIER) as REXULTI_MDD_TIER,
    REXULTI_MDD_TIER_SORT,
    if(IsNULL(REXULTI_SCZ_TIER),'NULL',REXULTI_SCZ_TIER) as REXULTI_SCZ_TIER,
    REXULTI_SCZ_TIER_SORT,
    if(IsNULL(REXULTI_SCZ_PED_TARGET),'NULL',REXULTI_SCZ_PED_TARGET) as REXULTI_SCZ_PED_TARGET,
    REXULTI_SCZ_PED_TARGET_SORT,
    if(IsNULL(REXULTI_DECLINER),'NULL',REXULTI_DECLINER) as REXULTI_DECLINER,
    if(IsNULL(ACCOUNT_SEGMENT),'NULL',ACCOUNT_SEGMENT) as ACCOUNT_SEGMENT,
    if(IsNULL(TRINTELLIX_NBRX_DECLINER),'NULL',TRINTELLIX_NBRX_DECLINER) as TRINTELLIX_NBRX_DECLINER,
    if(IsNULL(ABILIFY_MAINTENA_BIPOLAR_LEAD),'NULL',ABILIFY_MAINTENA_BIPOLAR_LEAD) as ABILIFY_MAINTENA_BIPOLAR_LEAD,
    [CPD PDE Visible],
    PRESCRIPTIVE_AUTHORITY_IND,
    'Y' as [Show PDE],
    "aCGRP BOTOX Decile",
//     "Decile Segment",
    if(IsNULL("Share Segment"),'NULL',"Share Segment") as "Share Segment",
    if(IsNULL("Vyepti Segment"),'NULL',"Vyepti Segment") as "Vyepti Segment"
    
Resident DIM_MASTER_CUSTOMER;

STORE DIM_CUST INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_MASTER_CUSTOMER$(vSpace)$(vSF).qvd] (qvd);

DROP Table FACT_CALL_PLAN, TEMP_CALL_PLAN_TARGET, DIM_MASTER_CUSTOMER,DIM_CUST;	

///$tab //SF: Dim: Patient 10/23
// NoConcatenate
// [Dim Patient]:
// LOAD
//     PATIENT_KEY,
//     PATIENT_ID as "Patient ID",
//     PATIENT_GENDER as "Patient Gender",
//     PATIENT_DATE_OF_BIRTH,
//     PATIENT_YEAR_OF_BIRTH,
//     PATIENT_ZIP
// FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_PATIENT$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join([Dim Patient])
// LOAD distinct 
//     Date(Date#(ENROLLMENT_DATE_KEY,'YYYYMMDD'),'MM/DD/YYYY') as "Enrollment Date",
//     //FIRST_ENROLL_CUSTOMER_KEY,
//     PATIENT_KEY
// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join([Dim Patient])
// LOAD distinct PATIENT_KEY,
//     Date(Date#(FIRST_TRIAGE_DATE_KEY,'YYYYMMDD'),'MM/DD/YYYY') as "Triage Date"
// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace)$(vSF).qvd]
// (qvd) where not(isnull(FIRST_TRIAGE_DATE_KEY));


// NoConcatenate
// [Temp]:
// LOAD  PATIENT_KEY,
//     Max(DATE_KEY) as MaxDate
// FROM [[$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace)$(vSF).qvd]
// (qvd) Group by PATIENT_KEY;

// Left Join([Temp])
// LOAD distinct 
//     PATIENT_KEY,
//     DATE_KEY as MaxDate,
//     CUSTOMER_KEY,
//     FIRST_ENROLL_CUSTOMER_KEY
// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace)$(vSF).qvd]
// (qvd);

// left join(Temp)
// Load Distinct CUSTOMER_KEY ,
// 	 CUSTOMER_NAME as "Current Prescriber"
// FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace)$(vSF).qvd]
// (qvd);

// left join(Temp)
// Load Distinct CUSTOMER_KEY as FIRST_ENROLL_CUSTOMER_KEY,
// 	 CUSTOMER_NAME as "First Prescriber"
// FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace)$(vSF).qvd]
// (qvd);
 
// Left Join ([Dim Patient])
// Load PATIENT_KEY,
//      "Current Prescriber",
//      "First Prescriber"
// Resident Temp;

// Drop Table Temp;


// /////NoConcatenate
// [Patient Sales]:
// LOAD 
//     PATIENT_KEY as [Patient Key],
//     MG_DISPENSED,
//     DAYS_SUPPLIED
// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SALES$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join([Dim Patient])
// Load 
// 	 [Patient Key] as PATIENT_KEY,
//     Median(MG_DISPENSED/DAYS_SUPPLIED) as [Median Daily Dose]
// Resident [Patient Sales] 
// group by  [Patient Key];

// Drop Table [Patient Sales];


// Store [Dim Patient] into [$(vQSBIE_TransformQVD_Dimension)/DIM_PATIENT$(vSpace)$(vSF).qvd](QVD);

// Drop table [Dim Patient];





///$tab SF: Trintellix Product
NoConcatenate
[Product Group Key List]:
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     3 as MB_Key3
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     6 as MB_Key6
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     9 as MB_Key9
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
(qvd);


NoConcatenate
[New_Product_Dim]:
Load PRODUCT_GROUP_KEY,
     if(isnull(MB_Key3),0,MB_Key3) as MB_Key3,
     if(isnull(MB_Key6),0,MB_Key6) as MB_Key6,
     if(isnull(MB_Key9),0,MB_Key9) as MB_Key9
Resident [Product Group Key List];

Drop Table [Product Group Key List];

NoConcatenate
[Temp Product Dim]:
Load PRODUCT_GROUP_KEY,
	MB_Key3&MB_Key6&MB_Key9 as Market_Basket_Key
Resident [New_Product_Dim]
where (MB_Key3&MB_Key6&MB_Key9)<>000;

left join([Temp Product Dim])
Load PRODUCT_GROUP_KEY,
	 if(if(IsNull(GENERIC_AVAILABILITY_IND),'N',GENERIC_AVAILABILITY_IND)='Y','GENERIC',PRODUCT_NAME) as PRODUCT_NAME
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace)$(vSF).qvd]
(qvd);

drop Table [New_Product_Dim];


NoConcatenate
[Market Basket]:
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'SA' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'IC' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'MAI' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
(qvd);

LEFT JOIN ([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     FRANCHISE AS PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DAYS_OF_THERAPY as DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace)$(vSF).qvd]
(qvd);


left join([Temp Product Dim])
Load *
Resident [Market Basket];

Drop Table [Market Basket];

NoConcatenate
[Prod Dim]:
Load Distinct 
	 Market_Basket_Key&PRODUCT_NAME as Market_Product_Key,
     Market_Basket_Key,
     PRODUCT_NAME as [Product Name],
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     Market_Basket_Flag,
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
Resident [Temp Product Dim];

Drop Table [Temp Product Dim];


Store [Prod Dim] into [$(vQSBIE_TransformQVD_Dimension)/PSY_Trintellix_Product$(vSpace)$(vSF).qvd](QVD);

DROP Table [Prod Dim];





///$tab //SF: MA PSY PRODUCT
// NoConcatenate
// [Product Group Key List]:
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
// (qvd);


// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      1 as MB_Key1
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      2 as MB_Key2
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      3 as MB_Key3
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      4 as MB_Key4
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      5 as MB_Key5
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      6 as MB_Key6
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      7 as MB_Key7
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      8 as MB_Key8
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Left Join ([Product Group Key List])
// LOAD Distinct PRODUCT_GROUP_KEY, 
//      9 as MB_Key9
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
// (qvd);


// NoConcatenate
// [New_Product_Dim]:
// Load PRODUCT_GROUP_KEY,
// 	 if(isnull(MB_Key1),0,MB_Key1) as MB_Key1,
//      if(isnull(MB_Key2),0,MB_Key2) as MB_Key2,
//      if(isnull(MB_Key3),0,MB_Key3) as MB_Key3,
//      if(isnull(MB_Key4),0,MB_Key4) as MB_Key4,
//      if(isnull(MB_Key5),0,MB_Key5) as MB_Key5,
//      if(isnull(MB_Key6),0,MB_Key6) as MB_Key6,
//      if(isnull(MB_Key7),0,MB_Key7) as MB_Key7,
//      if(isnull(MB_Key8),0,MB_Key8) as MB_Key8,
//      if(isnull(MB_Key9),0,MB_Key9) as MB_Key9
// Resident [Product Group Key List];

// Drop Table [Product Group Key List];

// NoConcatenate
// [Temp Product Dim]:
// Load PRODUCT_GROUP_KEY,
// 	 MB_Key1&MB_Key2&MB_Key3&MB_Key4&MB_Key5&MB_Key6&MB_Key7&MB_Key8&MB_Key9 as Market_Basket_Key
// Resident [New_Product_Dim]
// where (MB_Key1&MB_Key2&MB_Key3&MB_Key4&MB_Key5&MB_Key6&MB_Key7&MB_Key8&MB_Key9)<>000000000;

// left join([Temp Product Dim])
// Load PRODUCT_GROUP_KEY,
// 	 if(if(IsNull(GENERIC_AVAILABILITY_IND),'N',GENERIC_AVAILABILITY_IND)='Y','GENERIC',PRODUCT_NAME) as PRODUCT_NAME
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace)$(vSF).qvd]
// (qvd);

// drop Table [New_Product_Dim];


// NoConcatenate
// [Market Basket]:
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'SA' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'SA' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'SA' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'IC' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'IC' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'IC' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'MAI' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'MAI' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// Concatenate([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      'MAI' AS Market_Basket_Flag
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace)$(vSF).qvd]
// (qvd);

// LEFT JOIN ([Market Basket])
// LOAD PRODUCT_GROUP_KEY, 
//      PRODUCT_GROUP_CODE, 
//      PRODUCT_GROUP, 
//      BRAND_CODE, 
//      BRAND, 
//      MARKET_CODE, 
//      MARKET, 
//      MARKET_GROUP_CODE, 
//      MARKET_GROUP, 
//      FRANCHISE_CODE, 
//      FRANCHISE AS PRODUCT_FRANCHISE, 
//      PRODUCT_STRENGTH, 
//      DAYS_OF_THERAPY as DaysforTherapy, 
//      FACTOR, 
//      PRODUCT_LAUNCH_DATE, 
//      LU_PRODUCT_FLAG, 
//      GENERIC_AVAILABILITY_IND
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace)$(vSF).qvd]
// (qvd);


// left join([Temp Product Dim])
// Load *
// Resident [Market Basket];

// Drop Table [Market Basket];

// NoConcatenate
// [Prod Dim]:
// Load Distinct 
// 	 Market_Basket_Key&PRODUCT_NAME as Market_Product_Key,
//      Market_Basket_Key,
//      PRODUCT_NAME as [Product Name],
//      MARKET_BASKET_NAME, 
//      MARKET_BASKET_DESC, 
//      MARKET_BASKET_GROUP,
//      Market_Basket_Flag,
//      PRODUCT_GROUP_CODE, 
//      PRODUCT_GROUP, 
//      BRAND_CODE, 
//      BRAND, 
//      MARKET_CODE, 
//      MARKET, 
//      MARKET_GROUP_CODE, 
//      MARKET_GROUP, 
//      FRANCHISE_CODE, 
//      PRODUCT_FRANCHISE, 
//      PRODUCT_STRENGTH, 
//      DaysforTherapy, 
//      FACTOR, 
//      PRODUCT_LAUNCH_DATE, 
//      LU_PRODUCT_FLAG, 
//      GENERIC_AVAILABILITY_IND
// Resident [Temp Product Dim];

// Drop Table [Temp Product Dim];


// Store [Prod Dim] into [$(vQSBIE_TransformQVD_Dimension)/PSY_Product$(vSpace)$(vSF).qvd](QVD);

// DROP Table [Prod Dim];





///$tab SF:MMIT
// NoConcatenate
// P4V_MMIT:
// select  
// BRIDGE_FILE_DATE AS XREF_KEY,
// MMIT_PLAN_ID,
// MMIT_PLAN_NAME,
// MMIT_PAYER_TYPE,
// MMIT_PAYER AS MMIT_PAYER_NAME,
// PLAN_ID,
// PLAN_NAME,
// PAYER_TYPE,
// PAYER_NAME
// from luinc.MMIT_PLAN_XREF   //table not there
// ;
// Store P4V_MMIT into [$(vQSBIE_TransformQVD_Dimension)\MMIT_PLAN_XREF$(vSpace)$(vSF).qvd](QVD);

///$tab EXIT SCRIPT
exit script;
///$tab Segment
NoConcatenate
Segment:
SQL
   SELECT 
     cs.CUSTOMER_KEY
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Value Tier' THEN cs.SEGMENT_DESC else NULL end) as VALUE_TIER
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Value Tier' THEN cs.SEGMENT_VALUE else NULL  END) as VALUE_TIER_SORT
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ALAI INITIATOR' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ALAI_INITIATOR//added on 15 July
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'MAINTENA INITIATOR' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as MAINTENA_INITIATOR//added on 15 July
    , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ALAI NBRX' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ALAI_NBRX//added on 15 July
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'ABIM NBRX' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as ABIM_NBRX//added on 15 July
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'BP IND' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as BPI_IND//Added 16 March
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'LLAI IND' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_VALUE else NULL end) as LLAI_IND//Added 25 AUG'23
   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE = 'FLAG - BIPOLAR TARGET'  AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end) as FLAG_BIPOLAR_TARGET //Added 25 AUG'23
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Targeted Decile' THEN cs.SEGMENT_DESC else NULL end) as TARGETED_DECILE
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Targeted Decile' THEN cs.SEGMENT_VALUE else NULL  END) as TARGETED_DECILE_SORT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Precision Opportunity Group' THEN cs.SEGMENT_DESC else NULL end) as POG
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Precision Opportunity Group' THEN cs.SEGMENT_VALUE else NULL  END) as POG_SORT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'ATTITUDINAL' THEN cs.SEGMENT_DESC else NULL end) as ATTITUDINAL
   , max(CASE WHEN cs.SEGMENT_TYPE = 'ATTITUDINAL' THEN cs.SEGMENT_VALUE else NULL  END) as ATTITUDINAL_SORT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Multidimensional Segment' THEN cs.SEGMENT_DESC else NULL end) as SEGMENT
   , max(CASE WHEN cs.SEGMENT_TYPE = 'Multidimensional Segment' THEN cs.SEGMENT_VALUE  else NULL  END) as SEGMENT_SORT
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'Y' THEN cs.SEGMENT_DESC else NULL end ) as NORTHERA_SEGMENT
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'Y' THEN cs.SELECTION_ORDER  else  NULL END ) as NORTHERA_SORT
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'N' THEN cs.SEGMENT_DESC else NULL end ) as NORTHERA_SEGMENT_NEW
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'TARGETING SEGMENT' AND cs.CURRENT_IND = 'N' THEN cs.SELECTION_ORDER  else  NULL END ) as NORTHERA_SORT_NEW 
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'PRIORITIZATION' THEN cs.SEGMENT_VALUE else NULL end ) as NORTHERA_PRIORITY
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'PRIORITIZATION' THEN cs.SELECTION_ORDER else NULL  END)  as NORTHERA_PRIORITY_SORT
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SEGMENT_VALUE else NULL end) as NORTHERA_WRITER_STATUS
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SEGMENT_DESC else NULL end) as NORTHERA_WRITER_STATUS_DESC
   , max(CASE WHEN b.BRAND = 'NORTHERA' AND cs.SEGMENT_TYPE = 'WRITER STATUS' THEN cs.SELECTION_ORDER else NULL  END) as NORTHERA_WRITER_STATUS_SORT

   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'HCP Tier' THEN cs.SEGMENT_VALUE else NULL end ) as  REXULTI_HCP_TIER
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'HCP Tier' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_HCP_TIER_SORT
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCO Tier' THEN cs.SEGMENT_VALUE else NULL end ) as  REXULTI_AAD_HCO_TIER                                     //ON Prem Change                             
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCO Tier' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_AAD_HCO_TIER_SORT                             //On Prem Change
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCP Tier' THEN cs.SEGMENT_VALUE else NULL end ) as  REXULTI_AAD_HCP_TIER                                   //On Prem Change
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'AAD HCP Tier' THEN cs.SELECTION_ORDER else NULL  END) as  REXULTI_AAD_HCP_TIER_SORT                           //On Prem Change
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'MDD Tier' THEN cs.SEGMENT_VALUE else NULL end ) as REXULTI_MDD_TIER
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'MDD Tier' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_MDD_TIER_SORT
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ Tier' THEN cs.SEGMENT_VALUE else NULL end ) as REXULTI_SCZ_TIER
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ Tier' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_SCZ_TIER_SORT
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ Pediatric Target' THEN cs.SEGMENT_VALUE else NULL end ) as REXULTI_SCZ_PED_TARGET
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'SCZ Pediatric Target' THEN cs.SELECTION_ORDER else NULL  END)  as REXULTI_SCZ_PED_TARGET_SORT
   , max(CASE WHEN b.BRAND = 'REXULTI' AND cs.SEGMENT_TYPE = 'DECLINER' THEN cs.SEGMENT_VALUE else NULL end ) as REXULTI_DECLINER

   , max(CASE WHEN b.BRAND = 'VYEPTI' AND cs.SEGMENT_TYPE = 'ACCOUNT SEGMENT' THEN cs.SEGMENT_VALUE else NULL end ) as ACCOUNT_SEGMENT
   , max(CASE WHEN b.BRAND = 'TRINTELLIX' AND cs.SEGMENT_TYPE = 'TRINTELLIX NBRX DECLINER' THEN cs.SEGMENT_VALUE else NULL end ) as TRINTELLIX_NBRX_DECLINER

   , max(CASE WHEN b.BRAND = 'ABILIFY MAINTENA' AND cs.SEGMENT_TYPE ='FLAG - BIPOLAR TARGET' AND cs.SEGMENT_VALUE = 'Y' THEN 'Y' else NULL end) as ABILIFY_MAINTENA_BIPOLAR_LEAD
   , MAX(CASE WHEN b.BRAND = 'VYEPTI' and cs.SEGMENT_TYPE = 'ACGRP BOTOX DECILE' THEN cs.SEGMENT_DESC ELSE NULL END) as 'aCGRP BOTOX Decile'
   FROM LUINC.FACT_CUSTOMER_SEGMENTATION cs
		LEFT OUTER JOIN LUINC.DIM_BRAND b ON b.BRAND_KEY = cs.BRAND_KEY
   WHERE cs.CURRENT_IND = 'Y' 
   GROUP BY cs.CUSTOMER_KEY
   ;
 
///$tab P&E PSY ALLIANCE
// FACT_CUSTOMER_SEGMENTATION:

// LOAD *

// FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_CUSTOMER_SEGMENTATION$(vSpace).qvd] (qvd)
// WHERE CURRENT_IND = 'Y';

// NoConcatenate
// [DIM_SEGMENTATION]:
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY
// RESIDENT FACT_CUSTOMER_SEGMENTATION;

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS HCP_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'HCP TIER';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS MDD_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'MDD TIER';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT 
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS SCZ_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'SCZ TIER';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS TARGETED_DECILE
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'TARGETED DECILE';

// //Shubham
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS POG
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'Precision Opportunity Group';

// //Shubham
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_VALUE AS ATTITUDINAL
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'ATTITUDINAL';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT 
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
//  SEGMENT_DESC AS TARGETING_SEGMENT
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'TARGETING SEGMENT';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS VALUE_TIER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'VALUE TIER';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS WRITER_STATUS
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'WRITER STATUS';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS NORTHERA_PRIORITY
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'PRIORITIZATION';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS VYEPTI_ACCOUNT_SEGMENT
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'ACCOUNT SEGMENT';

// // ADDED ON 15 jULY
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS ALAI_INITIATOR
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'ALAI INITIATOR';

// // ADDED ON 15 jULY
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS MAINTENA_INITIATOR
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'MAINTENA INITIATOR';

// // ADDED ON 30 June
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS ALAI_NBRX
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'ALAI NBRX';

// // ADDED ON 30 June
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS ABIM_NBRX
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'ABIM NBRX';
// // left JOIN([DIM_SEGMENTATION])
// // LOAD dISTINCT
// // CUSTOMER_KEY,
// // BRAND_KEY,
// // PRODUCT_GROUP_KEY,
// // SEGMENT_VALUE AS BP_VALUE_TIER
// // RESIDENT FACT_CUSTOMER_SEGMENTATION
// // WHERE SEGMENT_TYPE= 'BP VALUE TIER';

// // left JOIN([DIM_SEGMENTATION])
// // LOAD dISTINCT
// // CUSTOMER_KEY,
// // BRAND_KEY,
// // PRODUCT_GROUP_KEY,
// // SEGMENT_VALUE AS SZ_VALUE_TIER
// // RESIDENT FACT_CUSTOMER_SEGMENTATION
// // WHERE SEGMENT_TYPE= 'SZ VALUE TIER';

// // ADDED ON 16 March
// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS BPI_IND
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'BP IND';

// left JOIN([DIM_SEGMENTATION])
// LOAD dISTINCT
// CUSTOMER_KEY,
// BRAND_KEY,
// PRODUCT_GROUP_KEY,
// SEGMENT_VALUE AS REXULTI_DECLINER
// RESIDENT FACT_CUSTOMER_SEGMENTATION
// WHERE SEGMENT_TYPE= 'DECLINER';


// STORE DIM_SEGMENTATION INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_SEGMENTATION$(vSpace).qvd] (qvd);

// DROP Table FACT_CUSTOMER_SEGMENTATION;
// DROP Table DIM_SEGMENTATION;



// DIM_TERRITORY:

// LOAD *

// FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_TERRITORY$(vSpace).qvd] (qvd);

 
// DIM_ALLIANCE:
// LOAD
// TERRITORY_KEY,
// TERRITORY_ID AS OTSUKA_TERRITORY_ID,
// TERRITORY_NAME AS OTSUKA_TERRITORY_NAME,
// AREA_ID AS OTSUKA_AREA_ID,
// AREA_NAME AS OTSUKA_AREA_NAME,
// REGION_ID AS OTSUKA_REGION_ID,
// REGION_NAME AS OTSUKA_REGION_NAME,
// ZONE_ID AS OTSUKA_ZONE_ID,
// ZONE_NAME AS OTSUKA_ZONE_NAME,
// ACCT_MGR_FIRST_NAME AS OTSUKA_ACCT_MGR_FIRST_NAME,
// ACCT_MGR_LAST_NAME AS OTSUKA_ACCT_MGR_LAST_NAME,
// ACCT_MGR_FULL_NAME AS OTSUKA_ACCT_MGR_FULL_NAME,
// ACCT_MGR_AD_ID AS OTSUKA_ACCT_MGR_AD_ID,
// AREA_MGR_FIRST_NAME AS OTSUKA_AREA_MGR_FIRST_NAME,
// AREA_MGR_LAST_NAME AS OTSUKA_AREA_MGR_LAST_NAME,
// AREA_MGR_FULL_NAME AS OTSUKA_AREA_MGR_FULL_NAME,
// AREA_MGR_AD_ID AS OTSUKA_AREA_MGR_AD_ID,
// RGN_MGR_FIRST_NAME AS OTSUKA_RGN_MGR_FIRST_NAME,
// RGN_MGR_LAST_NAME AS OTSUKA_RGN_MGR_LAST_NAME,
// RGN_MGR_FULL_NAME AS OTSUKA_RGN_MGR_FULL_NAME,
// RGN_MGR_AD_ID AS OTSUKA_RGN_MGR_AD_ID,
// ZONE_MGR_FIRST_NAME AS OTSUKA_ZONE_MGR_FIRST_NAME,
// ZONE_MGR_LAST_NAME AS OTSUKA_ZONE_MGR_LAST_NAME,
// ZONE_MGR_FULL_NAME AS OTSUKA_ZONE_MGR_FULL_NAME,
// ZONE_MGR_AD_ID AS OTSUKA_ZONE_MGR_AD_ID,
// FRANCHISE AS OTSUKA_FRANCHISE,
// SALESFORCE_GROUP AS OTSUKA_SALESFORCE_GROUP,
// SALESFORCE_GROUP_NAME AS OTSUKA_SALESFORCE_GROUP_NAME,
// AREA_GROUP_NAME AS OTSUKA_AREA_GROUP_NAME,
// ORGANIZATION AS ALLIANCE_PARTNER_NAME,
// TERR_EFF_DATE AS OTSUKA_TERR_EFF_DATE,
// TERR_EXP_DATE AS OTSUKA_TERR_EXP_DATE,
// TERR_CURRENT_IND AS OTSUKA_TERR_CURRENT_IND

// RESIDENT DIM_TERRITORY
// WHERE ORGANIZATION = 'OTSUKA';

// Concatenate

// LOAD
// TERRITORY_KEY,
// TERRITORY_ID AS TAKEDA_TERRITORY_ID,
// TERRITORY_NAME AS TAKEDA_TERRITORY_NAME,
// AREA_ID AS TAKEDA_AREA_ID,
// AREA_NAME AS TAKEDA_AREA_NAME,
// REGION_ID AS TAKEDA_REGION_ID,
// REGION_NAME AS TAKEDA_REGION_NAME,
// ZONE_ID AS TAKEDA_ZONE_ID,
// ZONE_NAME AS TAKEDA_ZONE_NAME,
// ACCT_MGR_FIRST_NAME AS TAKEDA_ACCT_MGR_FIRST_NAME,
// ACCT_MGR_LAST_NAME AS TAKEDA_ACCT_MGR_LAST_NAME,
// ACCT_MGR_FULL_NAME AS TAKEDA_ACCT_MGR_FULL_NAME,
// ACCT_MGR_AD_ID AS TAKEDA_ACCT_MGR_AD_ID,
// AREA_MGR_FIRST_NAME AS TAKEDA_AREA_MGR_FIRST_NAME,
// AREA_MGR_LAST_NAME AS TAKEDA_AREA_MGR_LAST_NAME,
// AREA_MGR_FULL_NAME AS TAKEDA_AREA_MGR_FULL_NAME,
// AREA_MGR_AD_ID AS TAKEDA_AREA_MGR_AD_ID,
// RGN_MGR_FIRST_NAME AS TAKEDA_RGN_MGR_FIRST_NAME,
// RGN_MGR_LAST_NAME AS TAKEDA_RGN_MGR_LAST_NAME,
// RGN_MGR_FULL_NAME AS TAKEDA_RGN_MGR_FULL_NAME,
// RGN_MGR_AD_ID AS TAKEDA_RGN_MGR_AD_ID,
// ZONE_MGR_FIRST_NAME AS TAKEDA_ZONE_MGR_FIRST_NAME,
// ZONE_MGR_LAST_NAME AS TAKEDA_ZONE_MGR_LAST_NAME,
// ZONE_MGR_FULL_NAME AS TAKEDA_ZONE_MGR_FULL_NAME,
// ZONE_MGR_AD_ID AS TAKEDA_ZONE_MGR_AD_ID,
// FRANCHISE AS TAKEDA_FRANCHISE,
// SALESFORCE_GROUP AS TAKEDA_SALESFORCE_GROUP,
// SALESFORCE_GROUP_NAME AS TAKEDA_SALESFORCE_GROUP_NAME,
// AREA_GROUP_NAME AS TAKEDA_AREA_GROUP_NAME,
// ORGANIZATION AS ALLIANCE_PARTNER_NAME,
// TERR_EFF_DATE AS TAKEDA_TERR_EFF_DATE,
// TERR_EXP_DATE AS TAKEDA_TERR_EXP_DATE,
// TERR_CURRENT_IND AS TAKEDA_TERR_CURRENT_IND

// Resident DIM_TERRITORY
// WHERE ORGANIZATION = 'TAKEDA';

// STORE DIM_ALLIANCE INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_ALLIANCE$(vSpace).qvd] (qvd);

// DROP Table DIM_ALLIANCE;
// DROP Table DIM_TERRITORY;

///$tab P&E PSY CUST
FACT_CALL_PLAN:
SQL SELECT DATE_KEY, 
     DATE_TO_KEY, 
     CUSTOMER_KEY, 
     DETAIL_PRIORITY,
     F.PRODUCT_GROUP_KEY, 
     T.TERRITORY_KEY, 
     PLANNED_CALLS
FROM LUINC.FACT_CALL_PLAN F 
INNER JOIN LUINC.DIM_TERRITORY T ON T.TERRITORY_KEY=F.TERRITORY_KEY
WHERE  CUSTOMER_KEY <> 0 AND ORGANIZATION='LU'  and CURRENT_IND='Y';

DIM_PRODUCT_GROUP:
LOAD PRODUCT_GROUP_KEY, 
     PRODUCT_NAME
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
(qvd);


DIM_MASTER_CUSTOMER:
LOAD 
     CUSTOMER_KEY, 
     LUNDBECK_ID, 
     ORGANIZATION_NAME, 
     CUSTOMER_FIRST_NAME, 
     CUSTOMER_MIDDLE_NAME, 
     CUSTOMER_LAST_NAME, 
     CUSTOMER_NAME, 
     CUSTOMER_ADDR1, 
     CUSTOMER_ADDR2, 
     CUSTOMER_CITY, 
     CUSTOMER_STATE, 
     CUSTOMER_STATE_ABBREV, 
     CUSTOMER_ZIP, 
     CUSTOMER_ADDR_LATITUDE, 
     CUSTOMER_ADDR_LONGITUDE, 
     CUSTOMER_PHONE_TYPE, 
     CUSTOMER_PHONE, 
     CUSTOMER_PHONE_EXT, 
     CUSTOMER_STATUS, 
     CUSTOMER_STATUS_REASON, 
     CUSTOMER_TYPE, 
     CUSTOMER_SUB_TYPE_CD, 
     CUSTOMER_SUB_TYPE_NAME, 
     CUSTOMER_DETAIL_TYPE_CODE, 
     CUSTOMER_DETAIL_TYPE, 
     FACILITY_TYPE, 
     NPI, 
     ME_ID, 
     SPECIALTY,
     IF(ISNULL(DATA_STEWARDSHIP_EXCLUSION_FLAG),'N', DATA_STEWARDSHIP_EXCLUSION_FLAG) as DATA_STEWARDSHIP_EXCLUSION_FLAG, 
     IF(ISNULL(LU_NO_CONTACT_FLAG),'N', LU_NO_CONTACT_FLAG) as LU_NO_CONTACT_FLAG,  
     IF(ISNULL(NO_CONTACT_FLAG),'N', NO_CONTACT_FLAG) as NO_CONTACT_FLAG, 
     IF(ISNULL(PDRP_IND),'N', PDRP_IND) as PDRP_IND, 
     IF(ISNULL(PSYCH_SPECIALTY_IND),'N', PSYCH_SPECIALTY_IND) as PSYCH_SPECIALTY_IND, 
     IF(ISNULL(NEURO_SPECIALTY_IND),'N', NEURO_SPECIALTY_IND) as NEURO_SPECIALTY_IND, 
     CARDIO_SPECIALTY_IND, 
     PRIMARY_CARE_SPECIALTY_IND, 
     MID_LEVEL_PRACTITIONER_IND, 
     IF(ISNULL(ABILIFY_MAINTENA_EXCLUSION_IND),'N', ABILIFY_MAINTENA_EXCLUSION_IND) as ABILIFY_MAINTENA_EXCLUSION_IND,  
     CARNEXIV_EXCLUSION_IND, 
     IF(ISNULL(NORTHERA_EXCLUSION_IND),'N', NORTHERA_EXCLUSION_IND) as NORTHERA_EXCLUSION_IND, 
     ONFI_EXCLUSION_IND, 
     IF(ISNULL(REXULTI_EXCLUSION_IND),'N',REXULTI_EXCLUSION_IND) as REXULTI_EXCLUSION_IND, 
     IF(ISNULL(REXULTI_AAD_EXCLUSION_IND),'N',REXULTI_AAD_EXCLUSION_IND) as REXULTI_AAD_EXCLUSION_IND,   //ON Prem Change
     IF(ISNULL(REXULTI_SCZ_EXCLUSION_IND),'N',REXULTI_SCZ_EXCLUSION_IND) as REXULTI_SCZ_EXCLUSION_IND,   //ON Prem Change
     IF(ISNULL(REXULTI_MDD_EXCLUSION_IND),'N',REXULTI_MDD_EXCLUSION_IND) as REXULTI_MDD_EXCLUSION_IND,   //ON Prem Change
	 SABRIL_EXCLUSION_IND, 
     IF(ISNULL(TRINTELLIX_EXCLUSION_IND),'N',TRINTELLIX_EXCLUSION_IND) as TRINTELLIX_EXCLUSION_IND, 
     XENAZINE_EXCLUSION_IND, 
     IF(ISNULL(ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND),'N',ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND) as ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND,  
     IF(ISNULL(REXULTI_RETAIL_HCO_EXCL_IND),'N',REXULTI_RETAIL_HCO_EXCL_IND) as REXULTI_RETAIL_HCO_EXCL_IND,
     IF(ISNULL(REXULTI_RETAIL_HCO_AAD_EXCL_IND),'N',REXULTI_RETAIL_HCO_AAD_EXCL_IND) as REXULTI_RETAIL_HCO_AAD_EXCL_IND,     //ON Prem Change
     IF(ISNULL(REXULTI_RETAIL_HCO_SCZ_EXCL_IND),'N',REXULTI_RETAIL_HCO_SCZ_EXCL_IND) as REXULTI_RETAIL_HCO_SCZ_EXCL_IND,     //ON Prem Change
     IF(ISNULL(REXULTI_RETAIL_HCO_MDD_EXCL_IND),'N',REXULTI_RETAIL_HCO_MDD_EXCL_IND) as REXULTI_RETAIL_HCO_MDD_EXCL_IND,     //ON Prem Change
     IF(ISNULL(TRINTELLIX_RETAIL_HCO_EXCL_IND),'N',TRINTELLIX_RETAIL_HCO_EXCL_IND) as TRINTELLIX_RETAIL_HCO_EXCL_IND,  
     KEY_OPINION_LEADER_FLAG, 
     HIN, 
     EPILEPSY_CENTER, 
     HUNTINGTONS_STUDY_GROUP, 
     LIS_TARGET, 
     PCT_LIS_CLAIMS, 
     NORTHERA_DUAL_ELIGIBLE, 
     PCT_NOR_DUAL_ELIG_CLAIMS, 
     NOR_DUAL_ELIG_PAT_SAMPLE_COUNT, 
     NOR_DUAL_ELIG_PAT_SAMPLE_DESC, 
     MSA, 
     CBSA,
     VYEPTI_EXCLUSION_IND,
     NORTHERA_SPECIALTY_GROUP,
     REXULTI_SALES_BI_VISIBILITY,
     If(PRIMARY_CARE_SPECIALTY_IND='Y' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','PCP',
        If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='Y' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','PSYCH',
           If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='Y' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='N','NEURO',
               If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' and MID_LEVEL_PRACTITIONER_IND='Y','NPPA',
                If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='Y' and MID_LEVEL_PRACTITIONER_IND='N','CARD',
				   If(PRIMARY_CARE_SPECIALTY_IND='N' and PSYCH_SPECIALTY_IND='N' and NEURO_SPECIALTY_IND='N' and CARDIO_SPECIALTY_IND='N' 
                   and MID_LEVEL_PRACTITIONER_IND='N','OTHER'
        )))))) as [Speciality Group],
        PRESCRIPTIVE_AUTHORITY_IND
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace).qvd]
(qvd);

LEFT Join (FACT_CALL_PLAN)
LOAD * 
Resident DIM_PRODUCT_GROUP;

DROP Tables DIM_PRODUCT_GROUP;



TEMP_CALL_PLAN_TARGET:
LOAD DISTINCT CUSTOMER_KEY, PRODUCT_NAME
Resident FACT_CALL_PLAN;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'ABILIFY MAINTENA','Y','N') AS Lu_Call_Plan_Target_Abilify_Maintena
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'ABILIFY MAINTENA';


LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'ABILIFY LAI FRANCHISE','Y','N') AS Lu_Call_Plan_Target_Abilify_LAI_Franchise
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'ABILIFY LAI FRANCHISE';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'REXULTI','Y','N') AS Lu_Call_Plan_Target_Rexulti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'REXULTI';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'TRINTELLIX','Y','N') AS Lu_Call_Plan_Target_Trintellix
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'TRINTELLIX';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'NORTHERA','Y','N') AS Lu_Call_Plan_Target_Northera
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'NORTHERA';

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'VYEPTI','Y','N') AS Lu_Call_Plan_Target_Vyepti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'VYEPTI';

Drop Tables TEMP_CALL_PLAN_TARGET;

TEMP_CALL_PLAN_TARGET:
LOAD DISTINCT CUSTOMER_KEY, PRODUCT_NAME,DETAIL_PRIORITY
Resident FACT_CALL_PLAN;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD CUSTOMER_KEY, 
	IF(PRODUCT_NAME = 'REXULTI','Y','N') AS Lu_P1_Call_Plan_Target_Rexulti
Resident TEMP_CALL_PLAN_TARGET
WHERE PRODUCT_NAME = 'REXULTI' and DETAIL_PRIORITY=1;

LEFT JOIN (DIM_MASTER_CUSTOMER)
LOAD *
Resident Segment;

Drop Table Segment;

NoConcatenate
FCA:
sql select 
distinct CUSTOMER_KEY,
'Y' as [CPD PDE Visible]
from LUINC.FACT_CALL_ACTIVITY
where REPORT_PRESCRIBER_CATEGORY ='LICENSED/PRESCRIBER';

Left Join (DIM_MASTER_CUSTOMER)
Load CUSTOMER_KEY, [CPD PDE Visible]
Resident FCA;

Drop table FCA;

NoConcatenate
DIM_CUST:
LOAD
    CUSTOMER_KEY,
    LUNDBECK_ID,
    ORGANIZATION_NAME,
    CUSTOMER_FIRST_NAME,
    CUSTOMER_MIDDLE_NAME,
    CUSTOMER_LAST_NAME,
    CUSTOMER_NAME,
    CUSTOMER_ADDR1,
    CUSTOMER_ADDR2,
    CUSTOMER_CITY,
    CUSTOMER_STATE,
    CUSTOMER_STATE_ABBREV,
    CUSTOMER_ZIP,
    CUSTOMER_ADDR_LATITUDE,
    CUSTOMER_ADDR_LONGITUDE,
    CUSTOMER_PHONE_TYPE,
    CUSTOMER_PHONE,
    CUSTOMER_PHONE_EXT,
    CUSTOMER_STATUS,
    CUSTOMER_STATUS_REASON,
    CUSTOMER_TYPE,
    CUSTOMER_SUB_TYPE_CD,
    CUSTOMER_SUB_TYPE_NAME,
    CUSTOMER_DETAIL_TYPE_CODE,
    CUSTOMER_DETAIL_TYPE,
    FACILITY_TYPE,
    NPI,
    ME_ID,
    SPECIALTY,
    DATA_STEWARDSHIP_EXCLUSION_FLAG,
    LU_NO_CONTACT_FLAG,
    NO_CONTACT_FLAG,
    PDRP_IND,
    PSYCH_SPECIALTY_IND,
    NEURO_SPECIALTY_IND,
    CARDIO_SPECIALTY_IND,
    PRIMARY_CARE_SPECIALTY_IND,
    MID_LEVEL_PRACTITIONER_IND,
    ABILIFY_MAINTENA_EXCLUSION_IND,
    CARNEXIV_EXCLUSION_IND,
    NORTHERA_EXCLUSION_IND,
    ONFI_EXCLUSION_IND,
    REXULTI_EXCLUSION_IND,
    REXULTI_AAD_EXCLUSION_IND,
    REXULTI_SCZ_EXCLUSION_IND,
    REXULTI_MDD_EXCLUSION_IND,
    REXULTI_RETAIL_HCO_SCZ_EXCL_IND,
    REXULTI_RETAIL_HCO_MDD_EXCL_IND,
    SABRIL_EXCLUSION_IND,
    TRINTELLIX_EXCLUSION_IND,
    XENAZINE_EXCLUSION_IND,
    ABILIFY_MAINTENA_RETAIL_HCO_EXCL_IND,
    REXULTI_RETAIL_HCO_EXCL_IND,
    REXULTI_RETAIL_HCO_AAD_EXCL_IND,
    TRINTELLIX_RETAIL_HCO_EXCL_IND,
    KEY_OPINION_LEADER_FLAG,
    HIN,
    EPILEPSY_CENTER,
    HUNTINGTONS_STUDY_GROUP,
    LIS_TARGET,
    PCT_LIS_CLAIMS,
    NORTHERA_DUAL_ELIGIBLE,
    PCT_NOR_DUAL_ELIG_CLAIMS,
    NOR_DUAL_ELIG_PAT_SAMPLE_COUNT,
    NOR_DUAL_ELIG_PAT_SAMPLE_DESC,
    MSA,
    CBSA,
    VYEPTI_EXCLUSION_IND,
    NORTHERA_SPECIALTY_GROUP,
    REXULTI_SALES_BI_VISIBILITY,
    "Speciality Group",
    Lu_Call_Plan_Target_Abilify_Maintena,
    Lu_Call_Plan_Target_Abilify_LAI_Franchise,
    Lu_Call_Plan_Target_Rexulti,
    Lu_Call_Plan_Target_Trintellix,
    Lu_Call_Plan_Target_Northera,
    Lu_Call_Plan_Target_Vyepti,
    Lu_P1_Call_Plan_Target_Rexulti,
    if(IsNULL(VALUE_TIER),'NULL',VALUE_TIER) as VALUE_TIER,
    VALUE_TIER_SORT,
    if(IsNULL(LLAI_IND),'NULL',LLAI_IND) as LLAI_IND,
    if(IsNULL(FLAG_BIPOLAR_TARGET),'NULL',FLAG_BIPOLAR_TARGET) as FLAG_BIPOLAR_TARGET,
    if(IsNULL(ALAI_INITIATOR),'NULL',ALAI_INITIATOR) as ALAI_INITIATOR,
    if(IsNULL(MAINTENA_INITIATOR),'NULL',MAINTENA_INITIATOR) as MAINTENA_INITIATOR,
    if(IsNULL(ALAI_NBRX),'NULL', ALAI_NBRX) as ALAI_NBRX,
    if(IsNULL(ABIM_NBRX),'NULL',ABIM_NBRX) as ABIM_NBRX,
    if(IsNULL(BPI_IND),'NULL',BPI_IND) as BPI_IND,
    if(IsNULL(TARGETED_DECILE),'NULL',TARGETED_DECILE) as TARGETED_DECILE,
    TARGETED_DECILE_SORT,
    if(IsNULL(POG),'NULL',POG) as POG,
    POG_SORT,
    if(IsNULL(ATTITUDINAL),'NULL',ATTITUDINAL) as ATTITUDINAL,
    ATTITUDINAL_SORT,
    if(IsNULL(SEGMENT),'NULL',SEGMENT) as SEGMENT,
    SEGMENT_SORT,
    if(IsNULL(NORTHERA_SEGMENT),'NULL',NORTHERA_SEGMENT) as NORTHERA_SEGMENT,
    NORTHERA_SORT,
    if(IsNULL(NORTHERA_SEGMENT_NEW),'NULL',NORTHERA_SEGMENT_NEW) as NORTHERA_SEGMENT_NEW,
    NORTHERA_SORT_NEW,
    if(IsNULL(NORTHERA_PRIORITY),'NULL',NORTHERA_PRIORITY) as NORTHERA_PRIORITY,
    NORTHERA_PRIORITY_SORT,
    if(IsNULL(NORTHERA_WRITER_STATUS),'NULL',NORTHERA_WRITER_STATUS) as NORTHERA_WRITER_STATUS,
    if(IsNULL(NORTHERA_WRITER_STATUS_DESC),'NULL',NORTHERA_WRITER_STATUS_DESC) as NORTHERA_WRITER_STATUS_DESC,
    NORTHERA_WRITER_STATUS_SORT,
    if(IsNULL(REXULTI_HCP_TIER),'NULL',REXULTI_HCP_TIER) as REXULTI_HCP_TIER,
    REXULTI_HCP_TIER_SORT,
    if(IsNULL(REXULTI_AAD_HCO_TIER),'NULL',REXULTI_AAD_HCO_TIER) as REXULTI_AAD_HCO_TIER,
    REXULTI_AAD_HCO_TIER_SORT,
    if(IsNULL(REXULTI_AAD_HCP_TIER),'NULL',REXULTI_AAD_HCP_TIER) as REXULTI_AAD_HCP_TIER,
    REXULTI_AAD_HCP_TIER_SORT,
    if(IsNULL(REXULTI_MDD_TIER),'NULL',REXULTI_MDD_TIER) as REXULTI_MDD_TIER,
    REXULTI_MDD_TIER_SORT,
    if(IsNULL(REXULTI_SCZ_TIER),'NULL',REXULTI_SCZ_TIER) as REXULTI_SCZ_TIER,
    REXULTI_SCZ_TIER_SORT,
    if(IsNULL(REXULTI_SCZ_PED_TARGET),'NULL',REXULTI_SCZ_PED_TARGET) as REXULTI_SCZ_PED_TARGET,
    REXULTI_SCZ_PED_TARGET_SORT,
    if(IsNULL(REXULTI_DECLINER),'NULL',REXULTI_DECLINER) as REXULTI_DECLINER,
    if(IsNULL(ACCOUNT_SEGMENT),'NULL',ACCOUNT_SEGMENT) as ACCOUNT_SEGMENT,
    if(IsNULL(TRINTELLIX_NBRX_DECLINER),'NULL',TRINTELLIX_NBRX_DECLINER) as TRINTELLIX_NBRX_DECLINER,
    if(IsNULL(ABILIFY_MAINTENA_BIPOLAR_LEAD),'NULL',ABILIFY_MAINTENA_BIPOLAR_LEAD) as ABILIFY_MAINTENA_BIPOLAR_LEAD,
//     [CPD PDE Visible],
    PRESCRIPTIVE_AUTHORITY_IND,
    If([CPD PDE Visible]='Y', 'Y','N') as [Show PDE],
    "aCGRP BOTOX Decile"
    
Resident DIM_MASTER_CUSTOMER;

STORE DIM_CUST INTO [$(vQSBIE_TransformQVD_Dimension)/DIM_MASTER_CUSTOMER$(vSpace).qvd] (qvd);

DROP Table FACT_CALL_PLAN, TEMP_CALL_PLAN_TARGET, DIM_MASTER_CUSTOMER,DIM_CUST;	
// exit script;
///$tab Dim:Patient 10/23
NoConcatenate
[Dim Patient]:
LOAD
    PATIENT_KEY,
    PATIENT_ID as "Patient ID",
    PATIENT_GENDER as "Patient Gender",
    PATIENT_DATE_OF_BIRTH,
    PATIENT_YEAR_OF_BIRTH,
    PATIENT_ZIP
FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_PATIENT$(vSpace).qvd]
(qvd);

Left Join([Dim Patient])
LOAD distinct 
    Date(Date#(ENROLLMENT_DATE_KEY,'YYYYMMDD'),'MM/DD/YYYY') as "Enrollment Date",
    //FIRST_ENROLL_CUSTOMER_KEY,
    PATIENT_KEY
FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace).qvd]
(qvd);

Left Join([Dim Patient])
LOAD distinct PATIENT_KEY,
    Date(Date#(FIRST_TRIAGE_DATE_KEY,'YYYYMMDD'),'MM/DD/YYYY') as "Triage Date"
FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace).qvd]
(qvd) where not(isnull(FIRST_TRIAGE_DATE_KEY));


NoConcatenate
[Temp]:
LOAD  PATIENT_KEY,
    Max(DATE_KEY) as MaxDate
FROM [[$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace).qvd]
(qvd) Group by PATIENT_KEY;

Left Join([Temp])
LOAD distinct 
    PATIENT_KEY,
    DATE_KEY as MaxDate,
    CUSTOMER_KEY,
    FIRST_ENROLL_CUSTOMER_KEY
FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SNAPSHOT_WEEKLY$(vSpace).qvd]
(qvd);

left join(Temp)
Load Distinct CUSTOMER_KEY ,
	 CUSTOMER_NAME as "Current Prescriber"
FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace).qvd]
(qvd);

left join(Temp)
Load Distinct CUSTOMER_KEY as FIRST_ENROLL_CUSTOMER_KEY,
	 CUSTOMER_NAME as "First Prescriber"
FROM [$(vQSBIE_ExtractQVD_Dimension)/DIM_CUSTOMER$(vSpace).qvd]
(qvd);
 
Left Join ([Dim Patient])
Load PATIENT_KEY,
     "Current Prescriber",
     "First Prescriber"
Resident Temp;

Drop Table Temp;


/////NoConcatenate
[Patient Sales]:
LOAD 
    PATIENT_KEY as [Patient Key],
    MG_DISPENSED,
    DAYS_SUPPLIED
FROM [$(vQSBIE_ExtractQVD_Fact)/FACT_PATIENT_SALES$(vSpace).qvd]
(qvd);

Left Join([Dim Patient])
Load 
	 [Patient Key] as PATIENT_KEY,
    Median(MG_DISPENSED/DAYS_SUPPLIED) as [Median Daily Dose]
Resident [Patient Sales] 
group by  [Patient Key];

Drop Table [Patient Sales];


Store [Dim Patient] into [$(vQSBIE_TransformQVD_Dimension)/DIM_PATIENT$(vSpace).qvd](QVD);

Drop table [Dim Patient];





///$tab Trintellix Product
NoConcatenate
[Product Group Key List]:
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     3 as MB_Key3
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     6 as MB_Key6
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     9 as MB_Key9
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);


NoConcatenate
[New_Product_Dim]:
Load PRODUCT_GROUP_KEY,
     if(isnull(MB_Key3),0,MB_Key3) as MB_Key3,
     if(isnull(MB_Key6),0,MB_Key6) as MB_Key6,
     if(isnull(MB_Key9),0,MB_Key9) as MB_Key9
Resident [Product Group Key List];

Drop Table [Product Group Key List];

NoConcatenate
[Temp Product Dim]:
Load PRODUCT_GROUP_KEY,
	MB_Key3&MB_Key6&MB_Key9 as Market_Basket_Key
Resident [New_Product_Dim]
where (MB_Key3&MB_Key6&MB_Key9)<>000;

left join([Temp Product Dim])
Load PRODUCT_GROUP_KEY,
	 if(if(IsNull(GENERIC_AVAILABILITY_IND),'N',GENERIC_AVAILABILITY_IND)='Y','GENERIC',PRODUCT_NAME) as PRODUCT_NAME
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
(qvd);

drop Table [New_Product_Dim];


NoConcatenate
[Market Basket]:
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'SA' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'IC' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'MAI' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);

LEFT JOIN ([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     FRANCHISE AS PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DAYS_OF_THERAPY as DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
(qvd);


left join([Temp Product Dim])
Load *
Resident [Market Basket];

Drop Table [Market Basket];

NoConcatenate
[Prod Dim]:
Load Distinct 
	 Market_Basket_Key&PRODUCT_NAME as Market_Product_Key,
     Market_Basket_Key,
     PRODUCT_NAME as [Product Name],
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     Market_Basket_Flag,
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
Resident [Temp Product Dim];

Drop Table [Temp Product Dim];


Store [Prod Dim] into [$(vQSBIE_TransformQVD_Dimension)/PSY_Trintellix_Product$(vSpace).qvd](QVD);

DROP Table [Prod Dim];





///$tab MA PSY PRODUCT
NoConcatenate
[Product Group Key List]:
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace).qvd]
(qvd);

Concatenate([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);


Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     1 as MB_Key1
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     2 as MB_Key2
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     3 as MB_Key3
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     4 as MB_Key4
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     5 as MB_Key5
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     6 as MB_Key6
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     7 as MB_Key7
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     8 as MB_Key8
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace).qvd]
(qvd);

Left Join ([Product Group Key List])
LOAD Distinct PRODUCT_GROUP_KEY, 
     9 as MB_Key9
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);


NoConcatenate
[New_Product_Dim]:
Load PRODUCT_GROUP_KEY,
	 if(isnull(MB_Key1),0,MB_Key1) as MB_Key1,
     if(isnull(MB_Key2),0,MB_Key2) as MB_Key2,
     if(isnull(MB_Key3),0,MB_Key3) as MB_Key3,
     if(isnull(MB_Key4),0,MB_Key4) as MB_Key4,
     if(isnull(MB_Key5),0,MB_Key5) as MB_Key5,
     if(isnull(MB_Key6),0,MB_Key6) as MB_Key6,
     if(isnull(MB_Key7),0,MB_Key7) as MB_Key7,
     if(isnull(MB_Key8),0,MB_Key8) as MB_Key8,
     if(isnull(MB_Key9),0,MB_Key9) as MB_Key9
Resident [Product Group Key List];

Drop Table [Product Group Key List];

NoConcatenate
[Temp Product Dim]:
Load PRODUCT_GROUP_KEY,
	 MB_Key1&MB_Key2&MB_Key3&MB_Key4&MB_Key5&MB_Key6&MB_Key7&MB_Key8&MB_Key9 as Market_Basket_Key
Resident [New_Product_Dim]
where (MB_Key1&MB_Key2&MB_Key3&MB_Key4&MB_Key5&MB_Key6&MB_Key7&MB_Key8&MB_Key9)<>000000000;

left join([Temp Product Dim])
Load PRODUCT_GROUP_KEY,
	 if(if(IsNull(GENERIC_AVAILABILITY_IND),'N',GENERIC_AVAILABILITY_IND)='Y','GENERIC',PRODUCT_NAME) as PRODUCT_NAME
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
(qvd);

drop Table [New_Product_Dim];


NoConcatenate
[Market Basket]:
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'SA' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_SA$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'SA' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_SA$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'SA' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_SA$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'IC' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_IC$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'IC' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_IC$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'IC' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_IC$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'MAI' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_ABILIFY_MAINTENA_MAI$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'MAI' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_REXULTI_MAI$(vSpace).qvd]
(qvd);

Concatenate([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     MARKET_BASKET_NAME, 
     MARKET_BASKET_NAME & ' ' &MARKET_BASKET_DESC as MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     'MAI' AS Market_Basket_Flag
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_MB_TRINTELLIX_MAI$(vSpace).qvd]
(qvd);

LEFT JOIN ([Market Basket])
LOAD PRODUCT_GROUP_KEY, 
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     FRANCHISE AS PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DAYS_OF_THERAPY as DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
FROM
[$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
(qvd);


left join([Temp Product Dim])
Load *
Resident [Market Basket];

Drop Table [Market Basket];

NoConcatenate
[Prod Dim]:
Load Distinct 
	 Market_Basket_Key&PRODUCT_NAME as Market_Product_Key,
     Market_Basket_Key,
     PRODUCT_NAME as [Product Name],
     MARKET_BASKET_NAME, 
     MARKET_BASKET_DESC, 
     MARKET_BASKET_GROUP,
     Market_Basket_Flag,
     PRODUCT_GROUP_CODE, 
     PRODUCT_GROUP, 
     BRAND_CODE, 
     BRAND, 
     MARKET_CODE, 
     MARKET, 
     MARKET_GROUP_CODE, 
     MARKET_GROUP, 
     FRANCHISE_CODE, 
     PRODUCT_FRANCHISE, 
     PRODUCT_STRENGTH, 
     DaysforTherapy, 
     FACTOR, 
     PRODUCT_LAUNCH_DATE, 
     LU_PRODUCT_FLAG, 
     GENERIC_AVAILABILITY_IND
Resident [Temp Product Dim];

Drop Table [Temp Product Dim];


Store [Prod Dim] into [$(vQSBIE_TransformQVD_Dimension)/PSY_Product$(vSpace).qvd](QVD);

DROP Table [Prod Dim];





///$tab MA  PSY GENERIC
// GenericStep_Temp:
// load 
// PRODUCT_GROUP_KEY,
// PRODUCT_GROUP_CODE
// from 
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd](qvd) where match(PRODUCT_GROUP_CODE,26094,26095,29152);

// inner join 
// LOAD Distinct LEFT(DATE_KEY,6)AS [PLAN MONTH], 
//      PLAN_KEY,  
//      ACCEPTABLE_COVERAGE_IND,
//      PRODUCT_GROUP_KEY
// FROM
// [$(vQSBIE_ExtractQVD_Fact)/FACT_FORMULARY_NATIONAL_STATUS$(vSpace).qvd](qvd);
 


// NoConcatenate


// GenericStep:
// LOAD [PLAN MONTH]&PLAN_KEY AS [GenericStep Key],
//      ACCEPTABLE_COVERAGE_IND;
// Load [PLAN MONTH],PLAN_KEY,
//     IF(PRODUCT_GROUP_CODE=26095,'TRINTELLIX',
//      IF(PRODUCT_GROUP_CODE=29152,'REXULTI',
//      IF(PRODUCT_GROUP_CODE=26094,'ABILIFY MAINTENA'))) AS MARKET_BASKET_NAME ,
// 	  ACCEPTABLE_COVERAGE_IND
//      resident  GenericStep_Temp;

// Drop table GenericStep_Temp;

// Store GenericStep into [$(vQSBIE_TransformQVD_Dimension)/PSY_GenericStep$(vSpace).qvd](Qvd);

// Drop Table GenericStep;




///$tab MA FORMULARY
// NoConcatenate
// [Fact National Formulary]:
// LOAD DATE_KEY as [Date Key], 
//      PRIOR_FORMULARY_DATE_KEY,     //Key
//      PLAN_KEY as [Plan Key],       //Key
//      PRODUCT_GROUP_KEY,     //Key
//      MM_NATIONAL_TERRITORY_KEY as [MM_NATIONAL_TERRITORY_KEY],
//      MM_REGIONAL_TERRITORY_KEY as [MM_REGIONAL_TERRITORY_KEY],
//      COVERAGE_DETAIL as [Formulary],
//      COVERAGE_DETAIL as [Coverage], 
//      FORMULARY_LIVES as [Lives],
//      TIER as [Tier],
//      COVERAGE ,
//      PRIOR_AUTHORIZATION as [Prior Authorization],
//      GENERIC_STEP_COUNT as [Generic Step Count],
//      BRAND_STEP_COUNT as [Brand Step Count],
//      TOTAL_STEP_COUNT as [Total Step Count],
//      ACCEPTABLE_COVERAGE_IND as [Acceptable Coverage Indicator]
// FROM
// [$(vQSBIE_ExtractQVD_Fact)/FACT_FORMULARY_NATIONAL_STATUS$(vSpace).qvd]
// (qvd);

// Inner Join([Fact National Formulary])
// LOAD PRODUCT_GROUP_KEY, 
//      PRODUCT_GROUP, 
//      BRAND, 
//      LU_PRODUCT_FLAG
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
// (qvd);

// Inner Join([Fact National Formulary])
// LOAD PLAN_KEY as [Plan Key], 
//      PLAN_ID, 
//      PAYER_ID,  
//      PAYMENT_TYPE
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PLAN$(vSpace).qvd]
// (qvd);

// Left Join([Fact National Formulary])
// LOAD DATE_KEY as PRIOR_FORMULARY_DATE_KEY, 
//      DATE_FULL
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_CLNDR$(vSpace).qvd]
// (qvd);

// NoConcatenate
// [Formulary]:
// LOAD
//        [Date Key] as DATE_KEY
// ,      [Plan Key]
// ,      [MM_NATIONAL_TERRITORY_KEY]
// ,	   [MM_REGIONAL_TERRITORY_KEY]
// ,      PAYER_ID as [Payer ID]
// ,      PAYMENT_TYPE as [Payment Type]
// ,      BRAND as [Brand]
// ,      LU_PRODUCT_FLAG as [LU Product Indicator]
// ,      PRODUCT_GROUP as [Product Group]
// ,      [Formulary]
// ,      [Coverage]
// ,      [Lives]
// ,      DATE_FULL as [Formulary Last Change]
// ,      [Acceptable Coverage Indicator]
// ,      [Tier]
// ,      COVERAGE 
// ,      [Prior Authorization]
// ,      [Generic Step Count]
// ,      [Brand Step Count]
// ,      [Total Step Count]
// ,      [Payer Payment Formulary]
// Resident [Fact National Formulary];

// Drop Table [Fact National Formulary];

// Store [Formulary] into [$(vQSBIE_TransformQVD_Dimension)/Formulary$(vSpace).qvd](QVD);

// Drop Table [Formulary];



///$tab MA CURRENT FORMULARY
// NoConcatenate
// [Temp PSY Formulary]:
// LOAD DATE_KEY as [Date Key], 
//      PRIOR_FORMULARY_DATE_KEY,     //Key
//      PLAN_KEY as [Plan Key],       //Key
//      PRODUCT_GROUP_KEY,     //Key
//      MM_NATIONAL_TERRITORY_KEY as [MM_NATIONAL_TERRITORY_KEY],
//      MM_REGIONAL_TERRITORY_KEY as [MM_REGIONAL_TERRITORY_KEY],
//      COVERAGE_DETAIL as [Formulary],
//      COVERAGE_DETAIL as [Coverage], 
//      FORMULARY_LIVES as [Lives],
//      TIER as [Tier],
//      COVERAGE ,
//      PRIOR_AUTHORIZATION as [Prior Authorization],
//      GENERIC_STEP_COUNT as [Generic Step Count],
//      BRAND_STEP_COUNT as [Brand Step Count],
//      TOTAL_STEP_COUNT as [Total Step Count],
//      ACCEPTABLE_COVERAGE_IND as [Acceptable Coverage Indicator]
// FROM
// [$(vQSBIE_ExtractQVD_Fact)/FACT_FORMULARY_NATIONAL$(vSpace).qvd]
// (qvd)
// where PLAN_KEY<>0 ;

// Inner Join([Temp PSY Formulary])
// LOAD PRODUCT_GROUP_KEY,    //Key
//      PRODUCT_GROUP, 
//      BRAND, 
//      LU_PRODUCT_FLAG,
//      PRODUCT_GROUP as [Product Group],
//      PRODUCT_NAME as [Product Name]
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
// (qvd)
// where GENERIC_AVAILABILITY_IND='N' or Isnull(GENERIC_AVAILABILITY_IND);

// Left Join([Temp PSY Formulary])
// LOAD DATE_KEY as PRIOR_FORMULARY_DATE_KEY, 
//      DATE_FULL
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_CLNDR$(vSpace).qvd]
// (qvd);

// NoConcatenate
// [Temp Product]:
// LOAD PRODUCT_GROUP_KEY, 
//      PRODUCT_GROUP_CODE,  
//      BRAND_CODE,
//      LU_PRODUCT_FLAG
// FROM
// [$(vQSBIE_ExtractQVD_Dimension)/DIM_PRODUCT_GROUP$(vSpace).qvd]
// (qvd);


// NoConcatenate
// [PSY Formulary]:
// Load   Distinct [Date Key] as DATE_KEY
// ,      [Plan Key]
// ,      BRAND as [Brand]
// ,      LU_PRODUCT_FLAG as [LU Product Indicator]
// ,      [Product Group]
// ,      [Product Name]
// ,      [Coverage]
// ,      [Lives]
// ,      DATE_FULL as [Formulary Last Change]
// ,      [Acceptable Coverage Indicator]
// ,      if(LU_PRODUCT_FLAG='Y', [Coverage]) as [LU Coverage]
// ,      if(LU_PRODUCT_FLAG='Y', [Tier]) as [LU Tier]
// ,      [Tier]
// ,      [Prior Authorization]
// ,      [Generic Step Count]
// ,      [Brand Step Count]
// ,      [Total Step Count],
// 	   PRODUCT_GROUP_KEY
// Resident [Temp PSY Formulary];

// Store [PSY Formulary] into [$(vQSBIE_TransformQVD_Dimension)/PSY_Formulary$(vSpace).qvd](QVD);

// Drop Tables [Temp PSY Formulary],[PSY Formulary];